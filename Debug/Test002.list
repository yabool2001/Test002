
Test002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000074  08004204  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004204  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d151  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c57  00000000  00000000  0002d1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015946  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae75  00000000  00000000  00045826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881dc  00000000  00000000  0005069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  000d88cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080040b4 	.word	0x080040b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080040b4 	.word	0x080040b4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uldivmod>:
 8000240:	2b00      	cmp	r3, #0
 8000242:	d111      	bne.n	8000268 <__aeabi_uldivmod+0x28>
 8000244:	2a00      	cmp	r2, #0
 8000246:	d10f      	bne.n	8000268 <__aeabi_uldivmod+0x28>
 8000248:	2900      	cmp	r1, #0
 800024a:	d100      	bne.n	800024e <__aeabi_uldivmod+0xe>
 800024c:	2800      	cmp	r0, #0
 800024e:	d002      	beq.n	8000256 <__aeabi_uldivmod+0x16>
 8000250:	2100      	movs	r1, #0
 8000252:	43c9      	mvns	r1, r1
 8000254:	1c08      	adds	r0, r1, #0
 8000256:	b407      	push	{r0, r1, r2}
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <__aeabi_uldivmod+0x24>)
 800025a:	a102      	add	r1, pc, #8	; (adr r1, 8000264 <__aeabi_uldivmod+0x24>)
 800025c:	1840      	adds	r0, r0, r1
 800025e:	9002      	str	r0, [sp, #8]
 8000260:	bd03      	pop	{r0, r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	ffffffd9 	.word	0xffffffd9
 8000268:	b403      	push	{r0, r1}
 800026a:	4668      	mov	r0, sp
 800026c:	b501      	push	{r0, lr}
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	9b01      	ldr	r3, [sp, #4]
 8000276:	469e      	mov	lr, r3
 8000278:	b002      	add	sp, #8
 800027a:	bc0c      	pop	{r2, r3}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__udivmoddi4>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	0004      	movs	r4, r0
 800028e:	000d      	movs	r5, r1
 8000290:	4692      	mov	sl, r2
 8000292:	4699      	mov	r9, r3
 8000294:	b083      	sub	sp, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d830      	bhi.n	80002fc <__udivmoddi4+0x7c>
 800029a:	d02d      	beq.n	80002f8 <__udivmoddi4+0x78>
 800029c:	4649      	mov	r1, r9
 800029e:	4650      	mov	r0, sl
 80002a0:	f000 f8ba 	bl	8000418 <__clzdi2>
 80002a4:	0029      	movs	r1, r5
 80002a6:	0006      	movs	r6, r0
 80002a8:	0020      	movs	r0, r4
 80002aa:	f000 f8b5 	bl	8000418 <__clzdi2>
 80002ae:	1a33      	subs	r3, r6, r0
 80002b0:	4698      	mov	r8, r3
 80002b2:	3b20      	subs	r3, #32
 80002b4:	469b      	mov	fp, r3
 80002b6:	d433      	bmi.n	8000320 <__udivmoddi4+0xa0>
 80002b8:	465a      	mov	r2, fp
 80002ba:	4653      	mov	r3, sl
 80002bc:	4093      	lsls	r3, r2
 80002be:	4642      	mov	r2, r8
 80002c0:	001f      	movs	r7, r3
 80002c2:	4653      	mov	r3, sl
 80002c4:	4093      	lsls	r3, r2
 80002c6:	001e      	movs	r6, r3
 80002c8:	42af      	cmp	r7, r5
 80002ca:	d83a      	bhi.n	8000342 <__udivmoddi4+0xc2>
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d100      	bne.n	80002d2 <__udivmoddi4+0x52>
 80002d0:	e078      	b.n	80003c4 <__udivmoddi4+0x144>
 80002d2:	465b      	mov	r3, fp
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5e>
 80002dc:	e075      	b.n	80003ca <__udivmoddi4+0x14a>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	465a      	mov	r2, fp
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4642      	mov	r2, r8
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e028      	b.n	800034a <__udivmoddi4+0xca>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9cf      	bls.n	800029c <__udivmoddi4+0x1c>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8e>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b003      	add	sp, #12
 8000314:	bcf0      	pop	{r4, r5, r6, r7}
 8000316:	46bb      	mov	fp, r7
 8000318:	46b2      	mov	sl, r6
 800031a:	46a9      	mov	r9, r5
 800031c:	46a0      	mov	r8, r4
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	4642      	mov	r2, r8
 8000322:	2320      	movs	r3, #32
 8000324:	1a9b      	subs	r3, r3, r2
 8000326:	4652      	mov	r2, sl
 8000328:	40da      	lsrs	r2, r3
 800032a:	4641      	mov	r1, r8
 800032c:	0013      	movs	r3, r2
 800032e:	464a      	mov	r2, r9
 8000330:	408a      	lsls	r2, r1
 8000332:	0017      	movs	r7, r2
 8000334:	4642      	mov	r2, r8
 8000336:	431f      	orrs	r7, r3
 8000338:	4653      	mov	r3, sl
 800033a:	4093      	lsls	r3, r2
 800033c:	001e      	movs	r6, r3
 800033e:	42af      	cmp	r7, r5
 8000340:	d9c4      	bls.n	80002cc <__udivmoddi4+0x4c>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	4643      	mov	r3, r8
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0d9      	beq.n	8000304 <__udivmoddi4+0x84>
 8000350:	07fb      	lsls	r3, r7, #31
 8000352:	0872      	lsrs	r2, r6, #1
 8000354:	431a      	orrs	r2, r3
 8000356:	4646      	mov	r6, r8
 8000358:	087b      	lsrs	r3, r7, #1
 800035a:	e00e      	b.n	800037a <__udivmoddi4+0xfa>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d101      	bne.n	8000364 <__udivmoddi4+0xe4>
 8000360:	42a2      	cmp	r2, r4
 8000362:	d80c      	bhi.n	800037e <__udivmoddi4+0xfe>
 8000364:	1aa4      	subs	r4, r4, r2
 8000366:	419d      	sbcs	r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	1924      	adds	r4, r4, r4
 800036c:	416d      	adcs	r5, r5
 800036e:	2100      	movs	r1, #0
 8000370:	3e01      	subs	r6, #1
 8000372:	1824      	adds	r4, r4, r0
 8000374:	414d      	adcs	r5, r1
 8000376:	2e00      	cmp	r6, #0
 8000378:	d006      	beq.n	8000388 <__udivmoddi4+0x108>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d9ee      	bls.n	800035c <__udivmoddi4+0xdc>
 800037e:	3e01      	subs	r6, #1
 8000380:	1924      	adds	r4, r4, r4
 8000382:	416d      	adcs	r5, r5
 8000384:	2e00      	cmp	r6, #0
 8000386:	d1f8      	bne.n	800037a <__udivmoddi4+0xfa>
 8000388:	9800      	ldr	r0, [sp, #0]
 800038a:	9901      	ldr	r1, [sp, #4]
 800038c:	465b      	mov	r3, fp
 800038e:	1900      	adds	r0, r0, r4
 8000390:	4169      	adcs	r1, r5
 8000392:	2b00      	cmp	r3, #0
 8000394:	db24      	blt.n	80003e0 <__udivmoddi4+0x160>
 8000396:	002b      	movs	r3, r5
 8000398:	465a      	mov	r2, fp
 800039a:	4644      	mov	r4, r8
 800039c:	40d3      	lsrs	r3, r2
 800039e:	002a      	movs	r2, r5
 80003a0:	40e2      	lsrs	r2, r4
 80003a2:	001c      	movs	r4, r3
 80003a4:	465b      	mov	r3, fp
 80003a6:	0015      	movs	r5, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db2a      	blt.n	8000402 <__udivmoddi4+0x182>
 80003ac:	0026      	movs	r6, r4
 80003ae:	409e      	lsls	r6, r3
 80003b0:	0033      	movs	r3, r6
 80003b2:	0026      	movs	r6, r4
 80003b4:	4647      	mov	r7, r8
 80003b6:	40be      	lsls	r6, r7
 80003b8:	0032      	movs	r2, r6
 80003ba:	1a80      	subs	r0, r0, r2
 80003bc:	4199      	sbcs	r1, r3
 80003be:	9000      	str	r0, [sp, #0]
 80003c0:	9101      	str	r1, [sp, #4]
 80003c2:	e79f      	b.n	8000304 <__udivmoddi4+0x84>
 80003c4:	42a3      	cmp	r3, r4
 80003c6:	d8bc      	bhi.n	8000342 <__udivmoddi4+0xc2>
 80003c8:	e783      	b.n	80002d2 <__udivmoddi4+0x52>
 80003ca:	4642      	mov	r2, r8
 80003cc:	2320      	movs	r3, #32
 80003ce:	2100      	movs	r1, #0
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	2200      	movs	r2, #0
 80003d4:	9100      	str	r1, [sp, #0]
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	2201      	movs	r2, #1
 80003da:	40da      	lsrs	r2, r3
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	e786      	b.n	80002ee <__udivmoddi4+0x6e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	2320      	movs	r3, #32
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	4646      	mov	r6, r8
 80003ea:	409a      	lsls	r2, r3
 80003ec:	0023      	movs	r3, r4
 80003ee:	40f3      	lsrs	r3, r6
 80003f0:	4644      	mov	r4, r8
 80003f2:	4313      	orrs	r3, r2
 80003f4:	002a      	movs	r2, r5
 80003f6:	40e2      	lsrs	r2, r4
 80003f8:	001c      	movs	r4, r3
 80003fa:	465b      	mov	r3, fp
 80003fc:	0015      	movs	r5, r2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	dad4      	bge.n	80003ac <__udivmoddi4+0x12c>
 8000402:	4642      	mov	r2, r8
 8000404:	002f      	movs	r7, r5
 8000406:	2320      	movs	r3, #32
 8000408:	0026      	movs	r6, r4
 800040a:	4097      	lsls	r7, r2
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	40de      	lsrs	r6, r3
 8000410:	003b      	movs	r3, r7
 8000412:	4333      	orrs	r3, r6
 8000414:	e7cd      	b.n	80003b2 <__udivmoddi4+0x132>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__clzdi2>:
 8000418:	b510      	push	{r4, lr}
 800041a:	2900      	cmp	r1, #0
 800041c:	d103      	bne.n	8000426 <__clzdi2+0xe>
 800041e:	f000 f807 	bl	8000430 <__clzsi2>
 8000422:	3020      	adds	r0, #32
 8000424:	e002      	b.n	800042c <__clzdi2+0x14>
 8000426:	1c08      	adds	r0, r1, #0
 8000428:	f000 f802 	bl	8000430 <__clzsi2>
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__clzsi2>:
 8000430:	211c      	movs	r1, #28
 8000432:	2301      	movs	r3, #1
 8000434:	041b      	lsls	r3, r3, #16
 8000436:	4298      	cmp	r0, r3
 8000438:	d301      	bcc.n	800043e <__clzsi2+0xe>
 800043a:	0c00      	lsrs	r0, r0, #16
 800043c:	3910      	subs	r1, #16
 800043e:	0a1b      	lsrs	r3, r3, #8
 8000440:	4298      	cmp	r0, r3
 8000442:	d301      	bcc.n	8000448 <__clzsi2+0x18>
 8000444:	0a00      	lsrs	r0, r0, #8
 8000446:	3908      	subs	r1, #8
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	4298      	cmp	r0, r3
 800044c:	d301      	bcc.n	8000452 <__clzsi2+0x22>
 800044e:	0900      	lsrs	r0, r0, #4
 8000450:	3904      	subs	r1, #4
 8000452:	a202      	add	r2, pc, #8	; (adr r2, 800045c <__clzsi2+0x2c>)
 8000454:	5c10      	ldrb	r0, [r2, r0]
 8000456:	1840      	adds	r0, r0, r1
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	02020304 	.word	0x02020304
 8000460:	01010101 	.word	0x01010101
	...

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  s = strlen ( uart_rx_buff ) ;
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <main+0x40>)
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff fe46 	bl	8000104 <strlen>
 8000478:	0002      	movs	r2, r0
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <main+0x44>)
 800047c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 f9dd 	bl	800083c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f81b 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f895 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800048a:	f000 f85f 	bl	800054c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT ( &huart2 , uart_rx_buff , (uint16_t)s ) ;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <main+0x44>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	b29a      	uxth	r2, r3
 8000494:	4905      	ldr	r1, [pc, #20]	; (80004ac <main+0x40>)
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <main+0x48>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fb9f 	bl	8001bdc <HAL_UART_Receive_IT>
	  HAL_Delay ( 5000 ) ;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <main+0x4c>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fa51 	bl	8000948 <HAL_Delay>
	  print_uart_rx_buff () ;
 80004a6:	f000 f89b 	bl	80005e0 <print_uart_rx_buff>
	  HAL_UART_Receive_IT ( &huart2 , uart_rx_buff , (uint16_t)s ) ;
 80004aa:	e7f0      	b.n	800048e <main+0x22>
 80004ac:	20000000 	.word	0x20000000
 80004b0:	200000a4 	.word	0x200000a4
 80004b4:	200000a8 	.word	0x200000a8
 80004b8:	00001388 	.word	0x00001388

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b093      	sub	sp, #76	; 0x4c
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2410      	movs	r4, #16
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2338      	movs	r3, #56	; 0x38
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 f9c3 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2310      	movs	r3, #16
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 f9bc 	bl	8003858 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fd61 	bl	8000fac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2202      	movs	r2, #2
 80004ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fd99 	bl	8001044 <HAL_RCC_OscConfig>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000516:	f000 f88b 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	003b      	movs	r3, r7
 800051c:	2207      	movs	r2, #7
 800051e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000520:	003b      	movs	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000526:	003b      	movs	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	003b      	movs	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000532:	003b      	movs	r3, r7
 8000534:	2100      	movs	r1, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f001 f8a4 	bl	8001684 <HAL_RCC_ClockConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000540:	f000 f876 	bl	8000630 <Error_Handler>
  }
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b013      	add	sp, #76	; 0x4c
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_USART2_UART_Init+0x64>)
 8000554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000558:	2296      	movs	r2, #150	; 0x96
 800055a:	0192      	lsls	r2, r2, #6
 800055c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_USART2_UART_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_USART2_UART_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_USART2_UART_Init+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000590:	2200      	movs	r2, #0
 8000592:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_USART2_UART_Init+0x60>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fa1e 	bl	80019d8 <HAL_UART_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005a0:	f000 f846 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	40004400 	.word	0x40004400

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_GPIO_Init+0x28>)
 80005bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_GPIO_Init+0x28>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MX_GPIO_Init+0x28>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <print_uart_rx_buff>:

/* USER CODE BEGIN 4 */

static void print_uart_rx_buff ( void )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	sprintf ( (char*)uart_tx_buff , "%s\r\n" , (const char*)uart_rx_buff) ;
 80005e4:	4a09      	ldr	r2, [pc, #36]	; (800060c <print_uart_rx_buff+0x2c>)
 80005e6:	490a      	ldr	r1, [pc, #40]	; (8000610 <print_uart_rx_buff+0x30>)
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <print_uart_rx_buff+0x34>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f003 f93c 	bl	8003868 <siprintf>
	HAL_UART_Transmit ( &huart2 , uart_tx_buff, strlen ( (const char*)uart_tx_buff) , 100 ) ;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <print_uart_rx_buff+0x34>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff fd86 	bl	8000104 <strlen>
 80005f8:	0003      	movs	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4905      	ldr	r1, [pc, #20]	; (8000614 <print_uart_rx_buff+0x34>)
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <print_uart_rx_buff+0x38>)
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	f001 fa3f 	bl	8001a84 <HAL_UART_Transmit>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000000 	.word	0x20000000
 8000610:	080040cc 	.word	0x080040cc
 8000614:	2000009c 	.word	0x2000009c
 8000618:	200000a8 	.word	0x200000a8

0800061c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef *huart )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	print_uart_rx_buff () ;
 8000624:	f7ff ffdc 	bl	80005e0 <print_uart_rx_buff>
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x44>)
 8000644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_MspInit+0x44>)
 8000648:	2101      	movs	r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x44>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_MspInit+0x44>)
 800065c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_MspInit+0x44>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0549      	lsls	r1, r1, #21
 8000664:	430a      	orrs	r2, r1
 8000666:	63da      	str	r2, [r3, #60]	; 0x3c
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_MspInit+0x44>)
 800066a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	055b      	lsls	r3, r3, #21
 8000670:	4013      	ands	r3, r2
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	; 0x2c
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	2414      	movs	r4, #20
 800068e:	193b      	adds	r3, r7, r4
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f003 f8de 	bl	8003858 <memset>
  if(huart->Instance==USART2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d138      	bne.n	8000718 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0289      	lsls	r1, r1, #10
 80006b0:	430a      	orrs	r2, r1
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	187a      	adds	r2, r7, r1
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 faee 	bl	8000ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	201c      	movs	r0, #28
 800070e:	f000 f9eb 	bl	8000ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000712:	201c      	movs	r0, #28
 8000714:	f000 f9fd 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b00b      	add	sp, #44	; 0x2c
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40004400 	.word	0x40004400
 8000724:	40021000 	.word	0x40021000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8e0 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <USART2_IRQHandler+0x14>)
 800075e:	0018      	movs	r0, r3
 8000760:	f001 faa6 	bl	8001cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000a8 	.word	0x200000a8

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f003 f830 	bl	8003804 <__errno>
 80007a4:	0003      	movs	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	18d2      	adds	r2, r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <_sbrk+0x64>)
 80007c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b006      	add	sp, #24
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20002000 	.word	0x20002000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	20000090 	.word	0x20000090
 80007d8:	20000150 	.word	0x20000150

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff fff6 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000816:	f002 fffb 	bl	8003810 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800081a:	f7ff fe27 	bl	800046c <main>

0800081e <LoopForever>:

LoopForever:
  b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800082c:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 8000830:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000834:	2000014c 	.word	0x2000014c

08000838 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_IRQHandler>
	...

0800083c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_Init+0x3c>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Init+0x3c>)
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	0049      	lsls	r1, r1, #1
 8000852:	430a      	orrs	r2, r1
 8000854:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f810 	bl	800087c <HAL_InitTick>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d003      	beq.n	8000868 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e001      	b.n	800086c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fee8 	bl	800063c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <HAL_InitTick+0x88>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d02b      	beq.n	80008ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_InitTick+0x8c>)
 8000896:	681c      	ldr	r4, [r3, #0]
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <HAL_InitTick+0x88>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	0019      	movs	r1, r3
 800089e:	23fa      	movs	r3, #250	; 0xfa
 80008a0:	0098      	lsls	r0, r3, #2
 80008a2:	f7ff fc41 	bl	8000128 <__udivsi3>
 80008a6:	0003      	movs	r3, r0
 80008a8:	0019      	movs	r1, r3
 80008aa:	0020      	movs	r0, r4
 80008ac:	f7ff fc3c 	bl	8000128 <__udivsi3>
 80008b0:	0003      	movs	r3, r0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f93d 	bl	8000b32 <HAL_SYSTICK_Config>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d112      	bne.n	80008e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d80a      	bhi.n	80008d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f90c 	bl	8000ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_InitTick+0x90>)
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e00d      	b.n	80008f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	230f      	movs	r3, #15
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e008      	b.n	80008f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	230f      	movs	r3, #15
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e003      	b.n	80008f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ec:	230f      	movs	r3, #15
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008f4:	230f      	movs	r3, #15
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b005      	add	sp, #20
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	18d2      	adds	r2, r2, r3
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000138 	.word	0x20000138

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000138 	.word	0x20000138

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fff0 	bl	8000934 <HAL_GetTick>
 8000954:	0003      	movs	r3, r0
 8000956:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001a      	movs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	189b      	adds	r3, r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	f7ff ffe0 	bl	8000934 <HAL_GetTick>
 8000974:	0002      	movs	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000000c 	.word	0x2000000c

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	0002      	movs	r2, r0
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b7f      	cmp	r3, #127	; 0x7f
 80009a2:	d809      	bhi.n	80009b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	231f      	movs	r3, #31
 80009ac:	401a      	ands	r2, r3
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_EnableIRQ+0x30>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4091      	lsls	r1, r2
 80009b4:	000a      	movs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b7f      	cmp	r3, #127	; 0x7f
 80009d8:	d828      	bhi.n	8000a2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	33c0      	adds	r3, #192	; 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	589b      	ldr	r3, [r3, r2]
 80009ea:	1dfa      	adds	r2, r7, #7
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	0011      	movs	r1, r2
 80009f0:	2203      	movs	r2, #3
 80009f2:	400a      	ands	r2, r1
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	43d2      	mvns	r2, r2
 80009fe:	401a      	ands	r2, r3
 8000a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	22ff      	movs	r2, #255	; 0xff
 8000a08:	401a      	ands	r2, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	4003      	ands	r3, r0
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <__NVIC_SetPriority+0xd4>)
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	33c0      	adds	r3, #192	; 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a2a:	e031      	b.n	8000a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0019      	movs	r1, r3
 8000a34:	230f      	movs	r3, #15
 8000a36:	400b      	ands	r3, r1
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	3304      	adds	r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	; 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <__NVIC_SetPriority+0xd8>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001c      	movs	r4, r3
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	4023      	ands	r3, r4
 8000a80:	3b08      	subs	r3, #8
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	430a      	orrs	r2, r1
 8000a86:	3306      	adds	r3, #6
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18c3      	adds	r3, r0, r3
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	045b      	lsls	r3, r3, #17
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d301      	bcc.n	8000ab8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e010      	b.n	8000ada <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <SysTick_Config+0x44>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	3a01      	subs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff ff7c 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x44>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	210f      	movs	r1, #15
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	0002      	movs	r2, r0
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	0018      	movs	r0, r3
 8000b26:	f7ff ff33 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ffaf 	bl	8000aa0 <SysTick_Config>
 8000b42:	0003      	movs	r3, r0
}
 8000b44:	0018      	movs	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e050      	b.n	8000c00 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2225      	movs	r2, #37	; 0x25
 8000b62:	5c9b      	ldrb	r3, [r3, r2]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d008      	beq.n	8000b7c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2224      	movs	r2, #36	; 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e041      	b.n	8000c00 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	210e      	movs	r1, #14
 8000b88:	438a      	bics	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	491c      	ldr	r1, [pc, #112]	; (8000c08 <HAL_DMA_Abort+0xbc>)
 8000b98:	400a      	ands	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_DMA_Abort+0xc0>)
 8000bae:	6859      	ldr	r1, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	221c      	movs	r2, #28
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2201      	movs	r2, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_DMA_Abort+0xc0>)
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000bca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00c      	beq.n	8000bee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bde:	490a      	ldr	r1, [pc, #40]	; (8000c08 <HAL_DMA_Abort+0xbc>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000bec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2225      	movs	r2, #37	; 0x25
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2224      	movs	r2, #36	; 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	fffffeff 	.word	0xfffffeff
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c18:	210f      	movs	r1, #15
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2225      	movs	r2, #37	; 0x25
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d006      	beq.n	8000c3a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2204      	movs	r2, #4
 8000c30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e049      	b.n	8000cce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	210e      	movs	r1, #14
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	438a      	bics	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	491d      	ldr	r1, [pc, #116]	; (8000cdc <HAL_DMA_Abort_IT+0xcc>)
 8000c66:	400a      	ands	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_DMA_Abort_IT+0xd0>)
 8000c6c:	6859      	ldr	r1, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	221c      	movs	r2, #28
 8000c74:	4013      	ands	r3, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DMA_Abort_IT+0xd0>)
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000c88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c9c:	490f      	ldr	r1, [pc, #60]	; (8000cdc <HAL_DMA_Abort_IT+0xcc>)
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000caa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2225      	movs	r2, #37	; 0x25
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	0010      	movs	r0, r2
 8000ccc:	4798      	blx	r3
    }
  }
  return status;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b004      	add	sp, #16
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	fffffeff 	.word	0xfffffeff
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e147      	b.n	8000f84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x28>
 8000d0a:	e138      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	0013      	movs	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	2201      	movs	r2, #1
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2207      	movs	r2, #7
 8000de0:	4013      	ands	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2107      	movs	r1, #7
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	6939      	ldr	r1, [r7, #16]
 8000e14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d100      	bne.n	8000e58 <HAL_GPIO_Init+0x174>
 8000e56:	e092      	b.n	8000f7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3318      	adds	r3, #24
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	589b      	ldr	r3, [r3, r2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	220f      	movs	r2, #15
 8000e70:	409a      	lsls	r2, r3
 8000e72:	0013      	movs	r3, r2
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1ca>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a45      	ldr	r2, [pc, #276]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1c6>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <HAL_GPIO_Init+0x2c0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1c2>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a43      	ldr	r2, [pc, #268]	; (8000fa8 <HAL_GPIO_Init+0x2c4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1be>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1cc>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ec0:	4936      	ldr	r1, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ece:	4a33      	ldr	r2, [pc, #204]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	58d3      	ldr	r3, [r2, r3]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	025b      	lsls	r3, r3, #9
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef4:	4929      	ldr	r1, [pc, #164]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000efe:	2384      	movs	r3, #132	; 0x84
 8000f00:	58d3      	ldr	r3, [r2, r3]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f22:	491e      	ldr	r1, [pc, #120]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f24:	2284      	movs	r2, #132	; 0x84
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2ae>
 8000f90:	e6b0      	b.n	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00

08000fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d11f      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	189b      	adds	r3, r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f8a2 	bl	8000128 <__udivsi3>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fea:	e008      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e001      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e009      	b.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	401a      	ands	r2, r3
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	429a      	cmp	r2, r3
 800100e:	d0ed      	beq.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40007000 	.word	0x40007000
 8001020:	fffff9ff 	.word	0xfffff9ff
 8001024:	20000004 	.word	0x20000004
 8001028:	000f4240 	.word	0x000f4240

0800102c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	23e0      	movs	r3, #224	; 0xe0
 8001036:	01db      	lsls	r3, r3, #7
 8001038:	4013      	ands	r3, r2
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e304      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	d100      	bne.n	8001062 <HAL_RCC_OscConfig+0x1e>
 8001060:	e07c      	b.n	800115c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001062:	4bc3      	ldr	r3, [pc, #780]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2238      	movs	r2, #56	; 0x38
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106c:	4bc0      	ldr	r3, [pc, #768]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b10      	cmp	r3, #16
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x3e>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b03      	cmp	r3, #3
 8001080:	d002      	beq.n	8001088 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4bb9      	ldr	r3, [pc, #740]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d062      	beq.n	800115a <HAL_RCC_OscConfig+0x116>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d15e      	bne.n	800115a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e2df      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d107      	bne.n	80010bc <HAL_RCC_OscConfig+0x78>
 80010ac:	4bb0      	ldr	r3, [pc, #704]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4baf      	ldr	r3, [pc, #700]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0249      	lsls	r1, r1, #9
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e020      	b.n	80010fe <HAL_RCC_OscConfig+0xba>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d10e      	bne.n	80010e6 <HAL_RCC_OscConfig+0xa2>
 80010c8:	4ba9      	ldr	r3, [pc, #676]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	02c9      	lsls	r1, r1, #11
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4ba6      	ldr	r3, [pc, #664]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4ba5      	ldr	r3, [pc, #660]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0249      	lsls	r1, r1, #9
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <HAL_RCC_OscConfig+0xba>
 80010e6:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4ba1      	ldr	r3, [pc, #644]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	49a1      	ldr	r1, [pc, #644]	; (8001374 <HAL_RCC_OscConfig+0x330>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b9e      	ldr	r3, [pc, #632]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	499f      	ldr	r1, [pc, #636]	; (8001378 <HAL_RCC_OscConfig+0x334>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d014      	beq.n	8001130 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fc15 	bl	8000934 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc10 	bl	8000934 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e29e      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001122:	4b93      	ldr	r3, [pc, #588]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	029b      	lsls	r3, r3, #10
 800112a:	4013      	ands	r3, r2
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xcc>
 800112e:	e015      	b.n	800115c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fc00 	bl	8000934 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113a:	f7ff fbfb 	bl	8000934 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b64      	cmp	r3, #100	; 0x64
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e289      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114c:	4b88      	ldr	r3, [pc, #544]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	029b      	lsls	r3, r3, #10
 8001154:	4013      	ands	r3, r2
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0xf6>
 8001158:	e000      	b.n	800115c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_RCC_OscConfig+0x124>
 8001166:	e099      	b.n	800129c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2238      	movs	r2, #56	; 0x38
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d102      	bne.n	8001188 <HAL_RCC_OscConfig+0x144>
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d002      	beq.n	800118e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d135      	bne.n	80011fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118e:	4b78      	ldr	r3, [pc, #480]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4013      	ands	r3, r2
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x162>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e25c      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b72      	ldr	r3, [pc, #456]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a74      	ldr	r2, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x338>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	021a      	lsls	r2, r3, #8
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6e      	ldr	r2, [pc, #440]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0adb      	lsrs	r3, r3, #11
 80011dc:	2207      	movs	r2, #7
 80011de:	4013      	ands	r3, r2
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x340>)
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x344>)
 80011e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x348>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff fb45 	bl	800087c <HAL_InitTick>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d051      	beq.n	800129a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e232      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d030      	beq.n	8001264 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001202:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <HAL_RCC_OscConfig+0x33c>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0049      	lsls	r1, r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fb86 	bl	8000934 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fb81 	bl	8000934 <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e20f      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4013      	ands	r3, r2
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_RCC_OscConfig+0x338>)
 8001252:	4013      	ands	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	021a      	lsls	r2, r3, #8
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800125e:	430a      	orrs	r2, r1
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	e01b      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800126a:	4949      	ldr	r1, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x34c>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fb60 	bl	8000934 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fb5b 	bl	8000934 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1e9      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4013      	ands	r3, r2
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x236>
 8001298:	e000      	b.n	800129c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	d047      	beq.n	8001336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2238      	movs	r2, #56	; 0x38
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b18      	cmp	r3, #24
 80012b0:	d10a      	bne.n	80012c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d03c      	beq.n	8001336 <HAL_RCC_OscConfig+0x2f2>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d138      	bne.n	8001336 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e1cb      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb2a 	bl	8000934 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fb25 	bl	8000934 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1b3      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f1      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2a2>
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb10 	bl	8000934 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fb0b 	bl	8000934 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e199      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d1f1      	bne.n	800131a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x2fe>
 8001340:	e0c6      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	231f      	movs	r3, #31
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2238      	movs	r2, #56	; 0x38
 8001350:	4013      	ands	r3, r2
 8001352:	2b20      	cmp	r3, #32
 8001354:	d11e      	bne.n	8001394 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_RCC_OscConfig+0x32c>)
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x31e>
 8001360:	e0b6      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d000      	beq.n	800136c <HAL_RCC_OscConfig+0x328>
 800136a:	e0b1      	b.n	80014d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e177      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
 8001370:	40021000 	.word	0x40021000
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	fffbffff 	.word	0xfffbffff
 800137c:	ffff80ff 	.word	0xffff80ff
 8001380:	ffffc7ff 	.word	0xffffc7ff
 8001384:	00f42400 	.word	0x00f42400
 8001388:	20000004 	.word	0x20000004
 800138c:	20000008 	.word	0x20000008
 8001390:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001394:	4bb4      	ldr	r3, [pc, #720]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	055b      	lsls	r3, r3, #21
 800139c:	4013      	ands	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_OscConfig+0x360>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x362>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d011      	beq.n	80013ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4baf      	ldr	r3, [pc, #700]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	4bae      	ldr	r3, [pc, #696]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0549      	lsls	r1, r1, #21
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	055b      	lsls	r3, r3, #21
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013c6:	231f      	movs	r3, #31
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ce:	4ba7      	ldr	r3, [pc, #668]	; (800166c <HAL_RCC_OscConfig+0x628>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	d11a      	bne.n	8001410 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013da:	4ba4      	ldr	r3, [pc, #656]	; (800166c <HAL_RCC_OscConfig+0x628>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4ba3      	ldr	r3, [pc, #652]	; (800166c <HAL_RCC_OscConfig+0x628>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0049      	lsls	r1, r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013e8:	f7ff faa4 	bl	8000934 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f2:	f7ff fa9f 	bl	8000934 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e12d      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	4b99      	ldr	r3, [pc, #612]	; (800166c <HAL_RCC_OscConfig+0x628>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x3e2>
 8001418:	4b93      	ldr	r3, [pc, #588]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800141a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800141e:	2101      	movs	r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c
 8001424:	e01c      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x404>
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	65da      	str	r2, [r3, #92]	; 0x5c
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800143c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800143e:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	65da      	str	r2, [r3, #92]	; 0x5c
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800144a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800144e:	2101      	movs	r1, #1
 8001450:	438a      	bics	r2, r1
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001458:	4b83      	ldr	r3, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800145a:	2104      	movs	r1, #4
 800145c:	438a      	bics	r2, r1
 800145e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d014      	beq.n	8001492 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fa64 	bl	8000934 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001470:	e009      	b.n	8001486 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fa5f 	bl	8000934 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x62c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0ec      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x42e>
 8001490:	e013      	b.n	80014ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fa4f 	bl	8000934 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800149a:	e009      	b.n	80014b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff fa4a 	bl	8000934 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a72      	ldr	r2, [pc, #456]	; (8001670 <HAL_RCC_OscConfig+0x62c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0d7      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014ba:	231f      	movs	r3, #31
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014ca:	496a      	ldr	r1, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x630>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x496>
 80014d8:	e0c1      	b.n	800165e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2238      	movs	r2, #56	; 0x38
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4a4>
 80014e6:	e081      	b.n	80015ec <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d156      	bne.n	800159e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80014f6:	4960      	ldr	r1, [pc, #384]	; (8001678 <HAL_RCC_OscConfig+0x634>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa1a 	bl	8000934 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fa15 	bl	8000934 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0a3      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	049b      	lsls	r3, r3, #18
 8001520:	4013      	ands	r3, r2
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a54      	ldr	r2, [pc, #336]	; (800167c <HAL_RCC_OscConfig+0x638>)
 800152a:	4013      	ands	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1a      	ldr	r2, [r3, #32]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	431a      	orrs	r2, r3
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0449      	lsls	r1, r1, #17
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0549      	lsls	r1, r1, #21
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff f9de 	bl	8000934 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff f9d9 	bl	8000934 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e067      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	049b      	lsls	r3, r3, #18
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x53a>
 800159c:	e05f      	b.n	800165e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015a4:	4934      	ldr	r1, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x634>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015b0:	2103      	movs	r1, #3
 80015b2:	438a      	bics	r2, r1
 80015b4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015bc:	4930      	ldr	r1, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x63c>)
 80015be:	400a      	ands	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff f9b7 	bl	8000934 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff f9b2 	bl	8000934 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e040      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	049b      	lsls	r3, r3, #18
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x588>
 80015ea:	e038      	b.n	800165e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e033      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x624>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2203      	movs	r2, #3
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	429a      	cmp	r2, r3
 800160a:	d126      	bne.n	800165a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2270      	movs	r2, #112	; 0x70
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d11f      	bne.n	800165a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	23fe      	movs	r3, #254	; 0xfe
 800161e:	01db      	lsls	r3, r3, #7
 8001620:	401a      	ands	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	23f8      	movs	r3, #248	; 0xf8
 8001630:	039b      	lsls	r3, r3, #14
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d10e      	bne.n	800165a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	23e0      	movs	r3, #224	; 0xe0
 8001640:	051b      	lsls	r3, r3, #20
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	0f5b      	lsrs	r3, r3, #29
 8001650:	075a      	lsls	r2, r3, #29
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b008      	add	sp, #32
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	00001388 	.word	0x00001388
 8001674:	efffffff 	.word	0xefffffff
 8001678:	feffffff 	.word	0xfeffffff
 800167c:	11c1808c 	.word	0x11c1808c
 8001680:	eefeffff 	.word	0xeefeffff

08001684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0e9      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2207      	movs	r2, #7
 800169e:	4013      	ands	r3, r2
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d91e      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b73      	ldr	r3, [pc, #460]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2207      	movs	r2, #7
 80016ac:	4393      	bics	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b8:	f7ff f93c 	bl	8000934 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f7ff f937 	bl	8000934 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_RCC_ClockConfig+0x1f4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0ca      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2207      	movs	r2, #7
 80016dc:	4013      	ands	r3, r2
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d015      	beq.n	800171a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2204      	movs	r2, #4
 80016f4:	4013      	ands	r3, r2
 80016f6:	d006      	beq.n	8001706 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	4b5f      	ldr	r3, [pc, #380]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 80016fe:	21e0      	movs	r1, #224	; 0xe0
 8001700:	01c9      	lsls	r1, r1, #7
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001706:	4b5d      	ldr	r3, [pc, #372]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_RCC_ClockConfig+0x1fc>)
 800170c:	4013      	ands	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	d057      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	029b      	lsls	r3, r3, #10
 8001734:	4013      	ands	r3, r2
 8001736:	d12b      	bne.n	8001790 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e097      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d107      	bne.n	8001754 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	049b      	lsls	r3, r3, #18
 800174c:	4013      	ands	r3, r2
 800174e:	d11f      	bne.n	8001790 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e08b      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4013      	ands	r3, r2
 8001766:	d113      	bne.n	8001790 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e07f      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d106      	bne.n	8001782 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d108      	bne.n	8001790 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e074      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e06d      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001790:	4b3a      	ldr	r3, [pc, #232]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2207      	movs	r2, #7
 8001796:	4393      	bics	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a4:	f7ff f8c6 	bl	8000934 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7ff f8c1 	bl	8000934 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <HAL_RCC_ClockConfig+0x1f4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e054      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2238      	movs	r2, #56	; 0x38
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2207      	movs	r2, #7
 80017da:	4013      	ands	r3, r2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d21e      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2207      	movs	r2, #7
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017f4:	f7ff f89e 	bl	8000934 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7ff f899 	bl	8000934 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <HAL_RCC_ClockConfig+0x1f4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e02c      	b.n	800186c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2207      	movs	r2, #7
 8001818:	4013      	ands	r3, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d1ee      	bne.n	80017fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2204      	movs	r2, #4
 8001826:	4013      	ands	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <HAL_RCC_ClockConfig+0x200>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800183e:	f000 f829 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001842:	0001      	movs	r1, r0
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	220f      	movs	r2, #15
 800184c:	401a      	ands	r2, r3
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x204>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	58d3      	ldr	r3, [r2, r3]
 8001854:	221f      	movs	r2, #31
 8001856:	4013      	ands	r3, r2
 8001858:	000a      	movs	r2, r1
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x208>)
 800185e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x20c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff f809 	bl	800087c <HAL_InitTick>
 800186a:	0003      	movs	r3, r0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40022000 	.word	0x40022000
 8001878:	00001388 	.word	0x00001388
 800187c:	40021000 	.word	0x40021000
 8001880:	fffff0ff 	.word	0xfffff0ff
 8001884:	ffff8fff 	.word	0xffff8fff
 8001888:	080040d4 	.word	0x080040d4
 800188c:	20000004 	.word	0x20000004
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2238      	movs	r2, #56	; 0x38
 80018a0:	4013      	ands	r3, r2
 80018a2:	d10f      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018a4:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0adb      	lsrs	r3, r3, #11
 80018aa:	2207      	movs	r2, #7
 80018ac:	4013      	ands	r3, r2
 80018ae:	2201      	movs	r2, #1
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	4835      	ldr	r0, [pc, #212]	; (8001990 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018ba:	f7fe fc35 	bl	8000128 <__udivsi3>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	e05d      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2238      	movs	r2, #56	; 0x38
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_GetSysClockFreq+0x100>)
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e054      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2238      	movs	r2, #56	; 0x38
 80018dc:	4013      	ands	r3, r2
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d138      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2203      	movs	r2, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10d      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	4824      	ldr	r0, [pc, #144]	; (8001994 <HAL_RCC_GetSysClockFreq+0x100>)
 8001904:	f7fe fc10 	bl	8000128 <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	0019      	movs	r1, r3
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	227f      	movs	r2, #127	; 0x7f
 8001914:	4013      	ands	r3, r2
 8001916:	434b      	muls	r3, r1
 8001918:	617b      	str	r3, [r7, #20]
        break;
 800191a:	e00d      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	481c      	ldr	r0, [pc, #112]	; (8001990 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001920:	f7fe fc02 	bl	8000128 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	0019      	movs	r1, r3
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	227f      	movs	r2, #127	; 0x7f
 8001930:	4013      	ands	r3, r2
 8001932:	434b      	muls	r3, r1
 8001934:	617b      	str	r3, [r7, #20]
        break;
 8001936:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0f5b      	lsrs	r3, r3, #29
 800193e:	2207      	movs	r2, #7
 8001940:	4013      	ands	r3, r2
 8001942:	3301      	adds	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	6978      	ldr	r0, [r7, #20]
 800194a:	f7fe fbed 	bl	8000128 <__udivsi3>
 800194e:	0003      	movs	r3, r0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e015      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2238      	movs	r2, #56	; 0x38
 800195a:	4013      	ands	r3, r2
 800195c:	2b20      	cmp	r3, #32
 800195e:	d103      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2238      	movs	r2, #56	; 0x38
 800196e:	4013      	ands	r3, r2
 8001970:	2b18      	cmp	r3, #24
 8001972:	d103      	bne.n	800197c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001974:	23fa      	movs	r3, #250	; 0xfa
 8001976:	01db      	lsls	r3, r3, #7
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e001      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001980:	693b      	ldr	r3, [r7, #16]
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b006      	add	sp, #24
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40021000 	.word	0x40021000
 8001990:	00f42400 	.word	0x00f42400
 8001994:	007a1200 	.word	0x007a1200

08001998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019b0:	f7ff fff2 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b4:	0004      	movs	r4, r0
 80019b6:	f7ff fb39 	bl	800102c <LL_RCC_GetAPB1Prescaler>
 80019ba:	0003      	movs	r3, r0
 80019bc:	0b1a      	lsrs	r2, r3, #12
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	58d3      	ldr	r3, [r2, r3]
 80019c4:	221f      	movs	r2, #31
 80019c6:	4013      	ands	r3, r2
 80019c8:	40dc      	lsrs	r4, r3
 80019ca:	0023      	movs	r3, r4
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdb0      	pop	{r4, r5, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	08004114 	.word	0x08004114

080019d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e046      	b.n	8001a78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2284      	movs	r2, #132	; 0x84
 80019ee:	589b      	ldr	r3, [r3, r2]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fe40 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2284      	movs	r2, #132	; 0x84
 8001a08:	2124      	movs	r1, #36	; 0x24
 8001a0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2101      	movs	r1, #1
 8001a18:	438a      	bics	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fc7c 	bl	800231c <UART_SetConfig>
 8001a24:	0003      	movs	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e024      	b.n	8001a78 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 feff 	bl	800283c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	490d      	ldr	r1, [pc, #52]	; (8001a80 <HAL_UART_Init+0xa8>)
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	212a      	movs	r1, #42	; 0x2a
 8001a5a:	438a      	bics	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 ff97 	bl	80029a4 <UART_CheckIdleState>
 8001a76:	0003      	movs	r3, r0
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	ffffb7ff 	.word	0xffffb7ff

08001a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	1dbb      	adds	r3, r7, #6
 8001a92:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2284      	movs	r2, #132	; 0x84
 8001a98:	589b      	ldr	r3, [r3, r2]
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d000      	beq.n	8001aa0 <HAL_UART_Transmit+0x1c>
 8001a9e:	e097      	b.n	8001bd0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_UART_Transmit+0x2a>
 8001aa6:	1dbb      	adds	r3, r7, #6
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e08f      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d109      	bne.n	8001ad2 <HAL_UART_Transmit+0x4e>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07f      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	5c9b      	ldrb	r3, [r3, r2]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_UART_Transmit+0x5c>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e078      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	228c      	movs	r2, #140	; 0x8c
 8001aec:	2100      	movs	r1, #0
 8001aee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2284      	movs	r2, #132	; 0x84
 8001af4:	2121      	movs	r1, #33	; 0x21
 8001af6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001af8:	f7fe ff1c 	bl	8000934 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1dba      	adds	r2, r7, #6
 8001b04:	2154      	movs	r1, #84	; 0x54
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1dba      	adds	r2, r7, #6
 8001b0e:	2156      	movs	r1, #86	; 0x56
 8001b10:	8812      	ldrh	r2, [r2, #0]
 8001b12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d108      	bne.n	8001b32 <HAL_UART_Transmit+0xae>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d104      	bne.n	8001b32 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	e003      	b.n	8001b3a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001b42:	e02c      	b.n	8001b9e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	f000 ff71 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e039      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10b      	bne.n	8001b7c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	05d2      	lsls	r2, r2, #23
 8001b70:	0dd2      	lsrs	r2, r2, #23
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	3302      	adds	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	e007      	b.n	8001b8c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2256      	movs	r2, #86	; 0x56
 8001b90:	5a9b      	ldrh	r3, [r3, r2]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b299      	uxth	r1, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2256      	movs	r2, #86	; 0x56
 8001b9c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2256      	movs	r2, #86	; 0x56
 8001ba2:	5a9b      	ldrh	r3, [r3, r2]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1cc      	bne.n	8001b44 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	f000 ff3e 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2284      	movs	r2, #132	; 0x84
 8001bc8:	2120      	movs	r1, #32
 8001bca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b008      	add	sp, #32
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	1dbb      	adds	r3, r7, #6
 8001be8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2288      	movs	r2, #136	; 0x88
 8001bee:	589b      	ldr	r3, [r3, r2]
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d155      	bne.n	8001ca0 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_UART_Receive_IT+0x26>
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e04d      	b.n	8001ca2 <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d109      	bne.n	8001c26 <HAL_UART_Receive_IT+0x4a>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d001      	beq.n	8001c26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e03d      	b.n	8001ca2 <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	5c9b      	ldrb	r3, [r3, r2]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_UART_Receive_IT+0x58>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e036      	b.n	8001ca2 <HAL_UART_Receive_IT+0xc6>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	2101      	movs	r1, #1
 8001c3a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_UART_Receive_IT+0xd0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d020      	beq.n	8001c8e <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	4013      	ands	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8001c60:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f383 8810 	msr	PRIMASK, r3
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	04c9      	lsls	r1, r1, #19
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f383 8810 	msr	PRIMASK, r3
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 ff96 	bl	8002bc8 <UART_Start_Receive_IT>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	e000      	b.n	8001ca2 <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b008      	add	sp, #32
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40008000 	.word	0x40008000

08001cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b0aa      	sub	sp, #168	; 0xa8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	22a4      	movs	r2, #164	; 0xa4
 8001cc0:	18b9      	adds	r1, r7, r2
 8001cc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	20a0      	movs	r0, #160	; 0xa0
 8001ccc:	1839      	adds	r1, r7, r0
 8001cce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	249c      	movs	r4, #156	; 0x9c
 8001cd8:	1939      	adds	r1, r7, r4
 8001cda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001cdc:	0011      	movs	r1, r2
 8001cde:	18bb      	adds	r3, r7, r2
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4aa0      	ldr	r2, [pc, #640]	; (8001f64 <HAL_UART_IRQHandler+0x2b4>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2298      	movs	r2, #152	; 0x98
 8001ce8:	18bd      	adds	r5, r7, r2
 8001cea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001cec:	18bb      	adds	r3, r7, r2
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11a      	bne.n	8001d2a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d015      	beq.n	8001d2a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2220      	movs	r2, #32
 8001d04:	4013      	ands	r3, r2
 8001d06:	d105      	bne.n	8001d14 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	055b      	lsls	r3, r3, #21
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00a      	beq.n	8001d2a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d100      	bne.n	8001d1e <HAL_UART_IRQHandler+0x6e>
 8001d1c:	e2cf      	b.n	80022be <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	0010      	movs	r0, r2
 8001d26:	4798      	blx	r3
      }
      return;
 8001d28:	e2c9      	b.n	80022be <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d2a:	2398      	movs	r3, #152	; 0x98
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d100      	bne.n	8001d36 <HAL_UART_IRQHandler+0x86>
 8001d34:	e11e      	b.n	8001f74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001d36:	239c      	movs	r3, #156	; 0x9c
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8a      	ldr	r2, [pc, #552]	; (8001f68 <HAL_UART_IRQHandler+0x2b8>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d106      	bne.n	8001d50 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001d42:	23a0      	movs	r3, #160	; 0xa0
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a88      	ldr	r2, [pc, #544]	; (8001f6c <HAL_UART_IRQHandler+0x2bc>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <HAL_UART_IRQHandler+0xa0>
 8001d4e:	e111      	b.n	8001f74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d50:	23a4      	movs	r3, #164	; 0xa4
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d012      	beq.n	8001d82 <HAL_UART_IRQHandler+0xd2>
 8001d5c:	23a0      	movs	r3, #160	; 0xa0
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d00b      	beq.n	8001d82 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	228c      	movs	r2, #140	; 0x8c
 8001d76:	589b      	ldr	r3, [r3, r2]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	218c      	movs	r1, #140	; 0x8c
 8001d80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d82:	23a4      	movs	r3, #164	; 0xa4
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d011      	beq.n	8001db2 <HAL_UART_IRQHandler+0x102>
 8001d8e:	239c      	movs	r3, #156	; 0x9c
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	d00b      	beq.n	8001db2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	228c      	movs	r2, #140	; 0x8c
 8001da6:	589b      	ldr	r3, [r3, r2]
 8001da8:	2204      	movs	r2, #4
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	218c      	movs	r1, #140	; 0x8c
 8001db0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001db2:	23a4      	movs	r3, #164	; 0xa4
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d011      	beq.n	8001de2 <HAL_UART_IRQHandler+0x132>
 8001dbe:	239c      	movs	r3, #156	; 0x9c
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d00b      	beq.n	8001de2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	228c      	movs	r2, #140	; 0x8c
 8001dd6:	589b      	ldr	r3, [r3, r2]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	218c      	movs	r1, #140	; 0x8c
 8001de0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001de2:	23a4      	movs	r3, #164	; 0xa4
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	4013      	ands	r3, r2
 8001dec:	d017      	beq.n	8001e1e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001dee:	23a0      	movs	r3, #160	; 0xa0
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	4013      	ands	r3, r2
 8001df8:	d105      	bne.n	8001e06 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001dfa:	239c      	movs	r3, #156	; 0x9c
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a59      	ldr	r2, [pc, #356]	; (8001f68 <HAL_UART_IRQHandler+0x2b8>)
 8001e02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001e04:	d00b      	beq.n	8001e1e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	228c      	movs	r2, #140	; 0x8c
 8001e12:	589b      	ldr	r3, [r3, r2]
 8001e14:	2208      	movs	r2, #8
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	218c      	movs	r1, #140	; 0x8c
 8001e1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e1e:	23a4      	movs	r3, #164	; 0xa4
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1a4>
 8001e2c:	23a0      	movs	r3, #160	; 0xa0
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	04db      	lsls	r3, r3, #19
 8001e36:	4013      	ands	r3, r2
 8001e38:	d00c      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	228c      	movs	r2, #140	; 0x8c
 8001e48:	589b      	ldr	r3, [r3, r2]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	218c      	movs	r1, #140	; 0x8c
 8001e52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	228c      	movs	r2, #140	; 0x8c
 8001e58:	589b      	ldr	r3, [r3, r2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d100      	bne.n	8001e60 <HAL_UART_IRQHandler+0x1b0>
 8001e5e:	e230      	b.n	80022c2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001e60:	23a4      	movs	r3, #164	; 0xa4
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d015      	beq.n	8001e98 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001e6c:	23a0      	movs	r3, #160	; 0xa0
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	4013      	ands	r3, r2
 8001e76:	d106      	bne.n	8001e86 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001e78:	239c      	movs	r3, #156	; 0x9c
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	055b      	lsls	r3, r3, #21
 8001e82:	4013      	ands	r3, r2
 8001e84:	d008      	beq.n	8001e98 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	0010      	movs	r0, r2
 8001e96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	228c      	movs	r2, #140	; 0x8c
 8001e9c:	589b      	ldr	r3, [r3, r2]
 8001e9e:	2194      	movs	r1, #148	; 0x94
 8001ea0:	187a      	adds	r2, r7, r1
 8001ea2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d004      	beq.n	8001ebc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2228      	movs	r2, #40	; 0x28
 8001eb8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001eba:	d047      	beq.n	8001f4c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 ff8e 	bl	8002de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d137      	bne.n	8001f42 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eda:	2090      	movs	r0, #144	; 0x90
 8001edc:	183a      	adds	r2, r7, r0
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee6:	f383 8810 	msr	PRIMASK, r3
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	438a      	bics	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	183b      	adds	r3, r7, r0
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f04:	f383 8810 	msr	PRIMASK, r3
}
 8001f08:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_UART_IRQHandler+0x2c0>)
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe fe76 	bl	8000c10 <HAL_DMA_Abort_IT>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d01a      	beq.n	8001f5e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f32:	0018      	movs	r0, r3
 8001f34:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f36:	e012      	b.n	8001f5e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 f9da 	bl	80022f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	e00d      	b.n	8001f5e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f9d5 	bl	80022f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4a:	e008      	b.n	8001f5e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f9d0 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	228c      	movs	r2, #140	; 0x8c
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001f5c:	e1b1      	b.n	80022c2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5e:	46c0      	nop			; (mov r8, r8)
    return;
 8001f60:	e1af      	b.n	80022c2 <HAL_UART_IRQHandler+0x612>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	0000080f 	.word	0x0000080f
 8001f68:	10000001 	.word	0x10000001
 8001f6c:	04000120 	.word	0x04000120
 8001f70:	08002ead 	.word	0x08002ead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d000      	beq.n	8001f7e <HAL_UART_IRQHandler+0x2ce>
 8001f7c:	e135      	b.n	80021ea <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001f7e:	23a4      	movs	r3, #164	; 0xa4
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	d100      	bne.n	8001f8c <HAL_UART_IRQHandler+0x2dc>
 8001f8a:	e12e      	b.n	80021ea <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001f8c:	23a0      	movs	r3, #160	; 0xa0
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2210      	movs	r2, #16
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_UART_IRQHandler+0x2ea>
 8001f98:	e127      	b.n	80021ea <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d000      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x302>
 8001fb0:	e09e      	b.n	80020f0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	217e      	movs	r1, #126	; 0x7e
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d100      	bne.n	8001fca <HAL_UART_IRQHandler+0x31a>
 8001fc8:	e17d      	b.n	80022c6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	225c      	movs	r2, #92	; 0x5c
 8001fce:	5a9b      	ldrh	r3, [r3, r2]
 8001fd0:	187a      	adds	r2, r7, r1
 8001fd2:	8812      	ldrh	r2, [r2, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d300      	bcc.n	8001fda <HAL_UART_IRQHandler+0x32a>
 8001fd8:	e175      	b.n	80022c6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	187a      	adds	r2, r7, r1
 8001fde:	215e      	movs	r1, #94	; 0x5e
 8001fe0:	8812      	ldrh	r2, [r2, #0]
 8001fe2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2220      	movs	r2, #32
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d16f      	bne.n	80020d2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	f383 8810 	msr	PRIMASK, r3
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	49b1      	ldr	r1, [pc, #708]	; (80022d8 <HAL_UART_IRQHandler+0x628>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	f383 8810 	msr	PRIMASK, r3
}
 8002022:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002024:	f3ef 8310 	mrs	r3, PRIMASK
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202c:	677b      	str	r3, [r7, #116]	; 0x74
 800202e:	2301      	movs	r3, #1
 8002030:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002034:	f383 8810 	msr	PRIMASK, r3
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	438a      	bics	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800204e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002050:	f383 8810 	msr	PRIMASK, r3
}
 8002054:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002056:	f3ef 8310 	mrs	r3, PRIMASK
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800205c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800205e:	673b      	str	r3, [r7, #112]	; 0x70
 8002060:	2301      	movs	r3, #1
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002066:	f383 8810 	msr	PRIMASK, r3
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	438a      	bics	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	f383 8810 	msr	PRIMASK, r3
}
 8002086:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2288      	movs	r2, #136	; 0x88
 800208c:	2120      	movs	r1, #32
 800208e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002096:	f3ef 8310 	mrs	r3, PRIMASK
 800209a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800209c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800209e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020a0:	2301      	movs	r3, #1
 80020a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2110      	movs	r1, #16
 80020b8:	438a      	bics	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	f383 8810 	msr	PRIMASK, r3
}
 80020c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe fd3d 	bl	8000b4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	225c      	movs	r2, #92	; 0x5c
 80020d6:	5a9a      	ldrh	r2, [r3, r2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	215e      	movs	r1, #94	; 0x5e
 80020dc:	5a5b      	ldrh	r3, [r3, r1]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0011      	movs	r1, r2
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f90b 	bl	8002304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80020ee:	e0ea      	b.n	80022c6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	225c      	movs	r2, #92	; 0x5c
 80020f4:	5a99      	ldrh	r1, [r3, r2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	225e      	movs	r2, #94	; 0x5e
 80020fa:	5a9b      	ldrh	r3, [r3, r2]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	208e      	movs	r0, #142	; 0x8e
 8002100:	183b      	adds	r3, r7, r0
 8002102:	1a8a      	subs	r2, r1, r2
 8002104:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	225e      	movs	r2, #94	; 0x5e
 800210a:	5a9b      	ldrh	r3, [r3, r2]
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d100      	bne.n	8002114 <HAL_UART_IRQHandler+0x464>
 8002112:	e0da      	b.n	80022ca <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002114:	183b      	adds	r3, r7, r0
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d100      	bne.n	800211e <HAL_UART_IRQHandler+0x46e>
 800211c:	e0d5      	b.n	80022ca <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211e:	f3ef 8310 	mrs	r3, PRIMASK
 8002122:	60fb      	str	r3, [r7, #12]
  return(result);
 8002124:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002126:	2488      	movs	r4, #136	; 0x88
 8002128:	193a      	adds	r2, r7, r4
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	2301      	movs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f383 8810 	msr	PRIMASK, r3
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4966      	ldr	r1, [pc, #408]	; (80022dc <HAL_UART_IRQHandler+0x62c>)
 8002144:	400a      	ands	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	193b      	adds	r3, r7, r4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f383 8810 	msr	PRIMASK, r3
}
 8002154:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002156:	f3ef 8310 	mrs	r3, PRIMASK
 800215a:	61bb      	str	r3, [r7, #24]
  return(result);
 800215c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800215e:	2484      	movs	r4, #132	; 0x84
 8002160:	193a      	adds	r2, r7, r4
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4959      	ldr	r1, [pc, #356]	; (80022e0 <HAL_UART_IRQHandler+0x630>)
 800217c:	400a      	ands	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	193b      	adds	r3, r7, r4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f383 8810 	msr	PRIMASK, r3
}
 800218c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2288      	movs	r2, #136	; 0x88
 8002192:	2120      	movs	r1, #32
 8002194:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a2:	f3ef 8310 	mrs	r3, PRIMASK
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021aa:	2480      	movs	r4, #128	; 0x80
 80021ac:	193a      	adds	r2, r7, r4
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	2301      	movs	r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	f383 8810 	msr	PRIMASK, r3
}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2110      	movs	r1, #16
 80021c8:	438a      	bics	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	193b      	adds	r3, r7, r4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	f383 8810 	msr	PRIMASK, r3
}
 80021d8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0011      	movs	r1, r2
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f88e 	bl	8002304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021e8:	e06f      	b.n	80022ca <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021ea:	23a4      	movs	r3, #164	; 0xa4
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	035b      	lsls	r3, r3, #13
 80021f4:	4013      	ands	r3, r2
 80021f6:	d010      	beq.n	800221a <HAL_UART_IRQHandler+0x56a>
 80021f8:	239c      	movs	r3, #156	; 0x9c
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	03db      	lsls	r3, r3, #15
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	0352      	lsls	r2, r2, #13
 800220e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f001 fade 	bl	80037d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002218:	e05a      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800221a:	23a4      	movs	r3, #164	; 0xa4
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	4013      	ands	r3, r2
 8002224:	d016      	beq.n	8002254 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002226:	23a0      	movs	r3, #160	; 0xa0
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	4013      	ands	r3, r2
 8002230:	d106      	bne.n	8002240 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002232:	239c      	movs	r3, #156	; 0x9c
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	4013      	ands	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002244:	2b00      	cmp	r3, #0
 8002246:	d042      	beq.n	80022ce <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	0010      	movs	r0, r2
 8002250:	4798      	blx	r3
    }
    return;
 8002252:	e03c      	b.n	80022ce <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002254:	23a4      	movs	r3, #164	; 0xa4
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	4013      	ands	r3, r2
 800225e:	d00a      	beq.n	8002276 <HAL_UART_IRQHandler+0x5c6>
 8002260:	23a0      	movs	r3, #160	; 0xa0
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	4013      	ands	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fe33 	bl	8002eda <UART_EndTransmit_IT>
    return;
 8002274:	e02c      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002276:	23a4      	movs	r3, #164	; 0xa4
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	4013      	ands	r3, r2
 8002282:	d00b      	beq.n	800229c <HAL_UART_IRQHandler+0x5ec>
 8002284:	23a0      	movs	r3, #160	; 0xa0
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	4013      	ands	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f001 faad 	bl	80037f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800229a:	e019      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800229c:	23a4      	movs	r3, #164	; 0xa4
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	045b      	lsls	r3, r3, #17
 80022a6:	4013      	ands	r3, r2
 80022a8:	d012      	beq.n	80022d0 <HAL_UART_IRQHandler+0x620>
 80022aa:	23a0      	movs	r3, #160	; 0xa0
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da0d      	bge.n	80022d0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f001 fa94 	bl	80037e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80022bc:	e008      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
      return;
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	e006      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
    return;
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	e004      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
      return;
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	e002      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
      return;
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	e000      	b.n	80022d0 <HAL_UART_IRQHandler+0x620>
    return;
 80022ce:	46c0      	nop			; (mov r8, r8)
  }
}
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b02a      	add	sp, #168	; 0xa8
 80022d4:	bdb0      	pop	{r4, r5, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	fffffeff 	.word	0xfffffeff
 80022dc:	fffffedf 	.word	0xfffffedf
 80022e0:	effffffe 	.word	0xeffffffe

080022e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	000a      	movs	r2, r1
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b090      	sub	sp, #64	; 0x40
 8002320:	af00      	add	r7, sp, #0
 8002322:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002324:	231a      	movs	r3, #26
 8002326:	2220      	movs	r2, #32
 8002328:	4694      	mov	ip, r2
 800232a:	44bc      	add	ip, r7
 800232c:	4463      	add	r3, ip
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	431a      	orrs	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	431a      	orrs	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4313      	orrs	r3, r2
 8002348:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4ac7      	ldr	r2, [pc, #796]	; (8002670 <UART_SetConfig+0x354>)
 8002352:	4013      	ands	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235c:	430b      	orrs	r3, r1
 800235e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4ac3      	ldr	r2, [pc, #780]	; (8002674 <UART_SetConfig+0x358>)
 8002368:	4013      	ands	r3, r2
 800236a:	0018      	movs	r0, r3
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	68d9      	ldr	r1, [r3, #12]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	0003      	movs	r3, r0
 8002376:	430b      	orrs	r3, r1
 8002378:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4abc      	ldr	r2, [pc, #752]	; (8002678 <UART_SetConfig+0x35c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002390:	4313      	orrs	r3, r2
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4ab8      	ldr	r2, [pc, #736]	; (800267c <UART_SetConfig+0x360>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	430b      	orrs	r3, r1
 80023a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	220f      	movs	r2, #15
 80023b2:	4393      	bics	r3, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	0003      	movs	r3, r0
 80023c0:	430b      	orrs	r3, r1
 80023c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4aad      	ldr	r2, [pc, #692]	; (8002680 <UART_SetConfig+0x364>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d136      	bne.n	800243c <UART_SetConfig+0x120>
 80023ce:	4bad      	ldr	r3, [pc, #692]	; (8002684 <UART_SetConfig+0x368>)
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d020      	beq.n	800241c <UART_SetConfig+0x100>
 80023da:	d827      	bhi.n	800242c <UART_SetConfig+0x110>
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d00d      	beq.n	80023fc <UART_SetConfig+0xe0>
 80023e0:	d824      	bhi.n	800242c <UART_SetConfig+0x110>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <UART_SetConfig+0xd0>
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d010      	beq.n	800240c <UART_SetConfig+0xf0>
 80023ea:	e01f      	b.n	800242c <UART_SetConfig+0x110>
 80023ec:	231b      	movs	r3, #27
 80023ee:	2220      	movs	r2, #32
 80023f0:	4694      	mov	ip, r2
 80023f2:	44bc      	add	ip, r7
 80023f4:	4463      	add	r3, ip
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e07c      	b.n	80024f6 <UART_SetConfig+0x1da>
 80023fc:	231b      	movs	r3, #27
 80023fe:	2220      	movs	r2, #32
 8002400:	4694      	mov	ip, r2
 8002402:	44bc      	add	ip, r7
 8002404:	4463      	add	r3, ip
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e074      	b.n	80024f6 <UART_SetConfig+0x1da>
 800240c:	231b      	movs	r3, #27
 800240e:	2220      	movs	r2, #32
 8002410:	4694      	mov	ip, r2
 8002412:	44bc      	add	ip, r7
 8002414:	4463      	add	r3, ip
 8002416:	2204      	movs	r2, #4
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e06c      	b.n	80024f6 <UART_SetConfig+0x1da>
 800241c:	231b      	movs	r3, #27
 800241e:	2220      	movs	r2, #32
 8002420:	4694      	mov	ip, r2
 8002422:	44bc      	add	ip, r7
 8002424:	4463      	add	r3, ip
 8002426:	2208      	movs	r2, #8
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e064      	b.n	80024f6 <UART_SetConfig+0x1da>
 800242c:	231b      	movs	r3, #27
 800242e:	2220      	movs	r2, #32
 8002430:	4694      	mov	ip, r2
 8002432:	44bc      	add	ip, r7
 8002434:	4463      	add	r3, ip
 8002436:	2210      	movs	r2, #16
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e05c      	b.n	80024f6 <UART_SetConfig+0x1da>
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a91      	ldr	r2, [pc, #580]	; (8002688 <UART_SetConfig+0x36c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d107      	bne.n	8002456 <UART_SetConfig+0x13a>
 8002446:	231b      	movs	r3, #27
 8002448:	2220      	movs	r2, #32
 800244a:	4694      	mov	ip, r2
 800244c:	44bc      	add	ip, r7
 800244e:	4463      	add	r3, ip
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e04f      	b.n	80024f6 <UART_SetConfig+0x1da>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a87      	ldr	r2, [pc, #540]	; (8002678 <UART_SetConfig+0x35c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d143      	bne.n	80024e8 <UART_SetConfig+0x1cc>
 8002460:	4b88      	ldr	r3, [pc, #544]	; (8002684 <UART_SetConfig+0x368>)
 8002462:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4013      	ands	r3, r2
 800246a:	22c0      	movs	r2, #192	; 0xc0
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	4293      	cmp	r3, r2
 8002470:	d02a      	beq.n	80024c8 <UART_SetConfig+0x1ac>
 8002472:	22c0      	movs	r2, #192	; 0xc0
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	4293      	cmp	r3, r2
 8002478:	d82e      	bhi.n	80024d8 <UART_SetConfig+0x1bc>
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	4293      	cmp	r3, r2
 8002480:	d012      	beq.n	80024a8 <UART_SetConfig+0x18c>
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	4293      	cmp	r3, r2
 8002488:	d826      	bhi.n	80024d8 <UART_SetConfig+0x1bc>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <UART_SetConfig+0x17c>
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	4293      	cmp	r3, r2
 8002494:	d010      	beq.n	80024b8 <UART_SetConfig+0x19c>
 8002496:	e01f      	b.n	80024d8 <UART_SetConfig+0x1bc>
 8002498:	231b      	movs	r3, #27
 800249a:	2220      	movs	r2, #32
 800249c:	4694      	mov	ip, r2
 800249e:	44bc      	add	ip, r7
 80024a0:	4463      	add	r3, ip
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e026      	b.n	80024f6 <UART_SetConfig+0x1da>
 80024a8:	231b      	movs	r3, #27
 80024aa:	2220      	movs	r2, #32
 80024ac:	4694      	mov	ip, r2
 80024ae:	44bc      	add	ip, r7
 80024b0:	4463      	add	r3, ip
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e01e      	b.n	80024f6 <UART_SetConfig+0x1da>
 80024b8:	231b      	movs	r3, #27
 80024ba:	2220      	movs	r2, #32
 80024bc:	4694      	mov	ip, r2
 80024be:	44bc      	add	ip, r7
 80024c0:	4463      	add	r3, ip
 80024c2:	2204      	movs	r2, #4
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e016      	b.n	80024f6 <UART_SetConfig+0x1da>
 80024c8:	231b      	movs	r3, #27
 80024ca:	2220      	movs	r2, #32
 80024cc:	4694      	mov	ip, r2
 80024ce:	44bc      	add	ip, r7
 80024d0:	4463      	add	r3, ip
 80024d2:	2208      	movs	r2, #8
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e00e      	b.n	80024f6 <UART_SetConfig+0x1da>
 80024d8:	231b      	movs	r3, #27
 80024da:	2220      	movs	r2, #32
 80024dc:	4694      	mov	ip, r2
 80024de:	44bc      	add	ip, r7
 80024e0:	4463      	add	r3, ip
 80024e2:	2210      	movs	r2, #16
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e006      	b.n	80024f6 <UART_SetConfig+0x1da>
 80024e8:	231b      	movs	r3, #27
 80024ea:	2220      	movs	r2, #32
 80024ec:	4694      	mov	ip, r2
 80024ee:	44bc      	add	ip, r7
 80024f0:	4463      	add	r3, ip
 80024f2:	2210      	movs	r2, #16
 80024f4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5f      	ldr	r2, [pc, #380]	; (8002678 <UART_SetConfig+0x35c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d000      	beq.n	8002502 <UART_SetConfig+0x1e6>
 8002500:	e096      	b.n	8002630 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002502:	231b      	movs	r3, #27
 8002504:	2220      	movs	r2, #32
 8002506:	4694      	mov	ip, r2
 8002508:	44bc      	add	ip, r7
 800250a:	4463      	add	r3, ip
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d015      	beq.n	800253e <UART_SetConfig+0x222>
 8002512:	dc18      	bgt.n	8002546 <UART_SetConfig+0x22a>
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00d      	beq.n	8002534 <UART_SetConfig+0x218>
 8002518:	dc15      	bgt.n	8002546 <UART_SetConfig+0x22a>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <UART_SetConfig+0x208>
 800251e:	2b02      	cmp	r3, #2
 8002520:	d005      	beq.n	800252e <UART_SetConfig+0x212>
 8002522:	e010      	b.n	8002546 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002524:	f7ff fa42 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002528:	0003      	movs	r3, r0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800252c:	e015      	b.n	800255a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800252e:	4b57      	ldr	r3, [pc, #348]	; (800268c <UART_SetConfig+0x370>)
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002532:	e012      	b.n	800255a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002534:	f7ff f9ae 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002538:	0003      	movs	r3, r0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800253c:	e00d      	b.n	800255a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002544:	e009      	b.n	800255a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800254a:	231a      	movs	r3, #26
 800254c:	2220      	movs	r2, #32
 800254e:	4694      	mov	ip, r2
 8002550:	44bc      	add	ip, r7
 8002552:	4463      	add	r3, ip
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
        break;
 8002558:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	2b00      	cmp	r3, #0
 800255e:	d100      	bne.n	8002562 <UART_SetConfig+0x246>
 8002560:	e14f      	b.n	8002802 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <UART_SetConfig+0x374>)
 8002568:	0052      	lsls	r2, r2, #1
 800256a:	5ad3      	ldrh	r3, [r2, r3]
 800256c:	0019      	movs	r1, r3
 800256e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002570:	f7fd fdda 	bl	8000128 <__udivsi3>
 8002574:	0003      	movs	r3, r0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	0013      	movs	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	189b      	adds	r3, r3, r2
 8002582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002584:	429a      	cmp	r2, r3
 8002586:	d305      	bcc.n	8002594 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800258e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002590:	429a      	cmp	r2, r3
 8002592:	d907      	bls.n	80025a4 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8002594:	231a      	movs	r3, #26
 8002596:	2220      	movs	r2, #32
 8002598:	4694      	mov	ip, r2
 800259a:	44bc      	add	ip, r7
 800259c:	4463      	add	r3, ip
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e12e      	b.n	8002802 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <UART_SetConfig+0x374>)
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	5ad3      	ldrh	r3, [r2, r3]
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	69b8      	ldr	r0, [r7, #24]
 80025c2:	69f9      	ldr	r1, [r7, #28]
 80025c4:	f7fd fe3c 	bl	8000240 <__aeabi_uldivmod>
 80025c8:	0002      	movs	r2, r0
 80025ca:	000b      	movs	r3, r1
 80025cc:	0e11      	lsrs	r1, r2, #24
 80025ce:	021d      	lsls	r5, r3, #8
 80025d0:	430d      	orrs	r5, r1
 80025d2:	0214      	lsls	r4, r2, #8
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	1900      	adds	r0, r0, r4
 80025e6:	4169      	adcs	r1, r5
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f7fd fe23 	bl	8000240 <__aeabi_uldivmod>
 80025fa:	0002      	movs	r2, r0
 80025fc:	000b      	movs	r3, r1
 80025fe:	0013      	movs	r3, r2
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002604:	23c0      	movs	r3, #192	; 0xc0
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d309      	bcc.n	8002620 <UART_SetConfig+0x304>
 800260c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	035b      	lsls	r3, r3, #13
 8002612:	429a      	cmp	r2, r3
 8002614:	d204      	bcs.n	8002620 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	e0f0      	b.n	8002802 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8002620:	231a      	movs	r3, #26
 8002622:	2220      	movs	r2, #32
 8002624:	4694      	mov	ip, r2
 8002626:	44bc      	add	ip, r7
 8002628:	4463      	add	r3, ip
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e0e8      	b.n	8002802 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	429a      	cmp	r2, r3
 800263a:	d000      	beq.n	800263e <UART_SetConfig+0x322>
 800263c:	e086      	b.n	800274c <UART_SetConfig+0x430>
  {
    switch (clocksource)
 800263e:	231b      	movs	r3, #27
 8002640:	2220      	movs	r2, #32
 8002642:	4694      	mov	ip, r2
 8002644:	44bc      	add	ip, r7
 8002646:	4463      	add	r3, ip
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b08      	cmp	r3, #8
 800264c:	d027      	beq.n	800269e <UART_SetConfig+0x382>
 800264e:	dc2a      	bgt.n	80026a6 <UART_SetConfig+0x38a>
 8002650:	2b04      	cmp	r3, #4
 8002652:	d01f      	beq.n	8002694 <UART_SetConfig+0x378>
 8002654:	dc27      	bgt.n	80026a6 <UART_SetConfig+0x38a>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <UART_SetConfig+0x344>
 800265a:	2b02      	cmp	r3, #2
 800265c:	d005      	beq.n	800266a <UART_SetConfig+0x34e>
 800265e:	e022      	b.n	80026a6 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002660:	f7ff f9a4 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002664:	0003      	movs	r3, r0
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002668:	e027      	b.n	80026ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <UART_SetConfig+0x370>)
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800266e:	e024      	b.n	80026ba <UART_SetConfig+0x39e>
 8002670:	cfff69f3 	.word	0xcfff69f3
 8002674:	ffffcfff 	.word	0xffffcfff
 8002678:	40008000 	.word	0x40008000
 800267c:	11fff4ff 	.word	0x11fff4ff
 8002680:	40013800 	.word	0x40013800
 8002684:	40021000 	.word	0x40021000
 8002688:	40004400 	.word	0x40004400
 800268c:	00f42400 	.word	0x00f42400
 8002690:	08004134 	.word	0x08004134
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002694:	f7ff f8fe 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002698:	0003      	movs	r3, r0
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800269c:	e00d      	b.n	80026ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026a4:	e009      	b.n	80026ba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026aa:	231a      	movs	r3, #26
 80026ac:	2220      	movs	r2, #32
 80026ae:	4694      	mov	ip, r2
 80026b0:	44bc      	add	ip, r7
 80026b2:	4463      	add	r3, ip
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
        break;
 80026b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <UART_SetConfig+0x3a6>
 80026c0:	e09f      	b.n	8002802 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c6:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <UART_SetConfig+0x518>)
 80026c8:	0052      	lsls	r2, r2, #1
 80026ca:	5ad3      	ldrh	r3, [r2, r3]
 80026cc:	0019      	movs	r1, r3
 80026ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026d0:	f7fd fd2a 	bl	8000128 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	005a      	lsls	r2, r3, #1
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	18d2      	adds	r2, r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0019      	movs	r1, r3
 80026e6:	0010      	movs	r0, r2
 80026e8:	f7fd fd1e 	bl	8000128 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d921      	bls.n	800273c <UART_SetConfig+0x420>
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	429a      	cmp	r2, r3
 8002700:	d21c      	bcs.n	800273c <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	b29a      	uxth	r2, r3
 8002706:	200e      	movs	r0, #14
 8002708:	2420      	movs	r4, #32
 800270a:	193b      	adds	r3, r7, r4
 800270c:	181b      	adds	r3, r3, r0
 800270e:	210f      	movs	r1, #15
 8002710:	438a      	bics	r2, r1
 8002712:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	2207      	movs	r2, #7
 800271c:	4013      	ands	r3, r2
 800271e:	b299      	uxth	r1, r3
 8002720:	193b      	adds	r3, r7, r4
 8002722:	181b      	adds	r3, r3, r0
 8002724:	193a      	adds	r2, r7, r4
 8002726:	1812      	adds	r2, r2, r0
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	193a      	adds	r2, r7, r4
 8002734:	1812      	adds	r2, r2, r0
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	e062      	b.n	8002802 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 800273c:	231a      	movs	r3, #26
 800273e:	2220      	movs	r2, #32
 8002740:	4694      	mov	ip, r2
 8002742:	44bc      	add	ip, r7
 8002744:	4463      	add	r3, ip
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e05a      	b.n	8002802 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800274c:	231b      	movs	r3, #27
 800274e:	2220      	movs	r2, #32
 8002750:	4694      	mov	ip, r2
 8002752:	44bc      	add	ip, r7
 8002754:	4463      	add	r3, ip
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d015      	beq.n	8002788 <UART_SetConfig+0x46c>
 800275c:	dc18      	bgt.n	8002790 <UART_SetConfig+0x474>
 800275e:	2b04      	cmp	r3, #4
 8002760:	d00d      	beq.n	800277e <UART_SetConfig+0x462>
 8002762:	dc15      	bgt.n	8002790 <UART_SetConfig+0x474>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <UART_SetConfig+0x452>
 8002768:	2b02      	cmp	r3, #2
 800276a:	d005      	beq.n	8002778 <UART_SetConfig+0x45c>
 800276c:	e010      	b.n	8002790 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7ff f91d 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002772:	0003      	movs	r3, r0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002776:	e015      	b.n	80027a4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <UART_SetConfig+0x51c>)
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800277c:	e012      	b.n	80027a4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277e:	f7ff f889 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002782:	0003      	movs	r3, r0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002786:	e00d      	b.n	80027a4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800278e:	e009      	b.n	80027a4 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002794:	231a      	movs	r3, #26
 8002796:	2220      	movs	r2, #32
 8002798:	4694      	mov	ip, r2
 800279a:	44bc      	add	ip, r7
 800279c:	4463      	add	r3, ip
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
        break;
 80027a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02b      	beq.n	8002802 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <UART_SetConfig+0x518>)
 80027b0:	0052      	lsls	r2, r2, #1
 80027b2:	5ad3      	ldrh	r3, [r2, r3]
 80027b4:	0019      	movs	r1, r3
 80027b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027b8:	f7fd fcb6 	bl	8000128 <__udivsi3>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	18d2      	adds	r2, r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f7fd fcaa 	bl	8000128 <__udivsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d909      	bls.n	80027f4 <UART_SetConfig+0x4d8>
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	025b      	lsls	r3, r3, #9
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d204      	bcs.n	80027f4 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	e006      	b.n	8002802 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80027f4:	231a      	movs	r3, #26
 80027f6:	2220      	movs	r2, #32
 80027f8:	4694      	mov	ip, r2
 80027fa:	44bc      	add	ip, r7
 80027fc:	4463      	add	r3, ip
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	226a      	movs	r2, #106	; 0x6a
 8002806:	2101      	movs	r1, #1
 8002808:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	2268      	movs	r2, #104	; 0x68
 800280e:	2101      	movs	r1, #1
 8002810:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	2200      	movs	r2, #0
 8002816:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	2200      	movs	r2, #0
 800281c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800281e:	231a      	movs	r3, #26
 8002820:	2220      	movs	r2, #32
 8002822:	4694      	mov	ip, r2
 8002824:	44bc      	add	ip, r7
 8002826:	4463      	add	r3, ip
 8002828:	781b      	ldrb	r3, [r3, #0]
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b010      	add	sp, #64	; 0x40
 8002830:	bdb0      	pop	{r4, r5, r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	08004134 	.word	0x08004134
 8002838:	00f42400 	.word	0x00f42400

0800283c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	d00b      	beq.n	8002866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <UART_AdvFeatureConfig+0x144>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d00b      	beq.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a43      	ldr	r2, [pc, #268]	; (8002984 <UART_AdvFeatureConfig+0x148>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2204      	movs	r2, #4
 800288e:	4013      	ands	r3, r2
 8002890:	d00b      	beq.n	80028aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <UART_AdvFeatureConfig+0x14c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	2208      	movs	r2, #8
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00b      	beq.n	80028cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <UART_AdvFeatureConfig+0x150>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00b      	beq.n	80028ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <UART_AdvFeatureConfig+0x154>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a25      	ldr	r2, [pc, #148]	; (8002994 <UART_AdvFeatureConfig+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2240      	movs	r2, #64	; 0x40
 8002916:	4013      	ands	r3, r2
 8002918:	d01d      	beq.n	8002956 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <UART_AdvFeatureConfig+0x15c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <UART_AdvFeatureConfig+0x160>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <UART_AdvFeatureConfig+0x164>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffdffff 	.word	0xfffdffff
 8002984:	fffeffff 	.word	0xfffeffff
 8002988:	fffbffff 	.word	0xfffbffff
 800298c:	ffff7fff 	.word	0xffff7fff
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffffdfff 	.word	0xffffdfff
 8002998:	ffefffff 	.word	0xffefffff
 800299c:	ff9fffff 	.word	0xff9fffff
 80029a0:	fff7ffff 	.word	0xfff7ffff

080029a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	228c      	movs	r2, #140	; 0x8c
 80029b0:	2100      	movs	r1, #0
 80029b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b4:	f7fd ffbe 	bl	8000934 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10c      	bne.n	80029e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	0391      	lsls	r1, r2, #14
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <UART_CheckIdleState+0x90>)
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f82e 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e023      	b.n	8002a2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d10c      	bne.n	8002a0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	03d1      	lsls	r1, r2, #15
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <UART_CheckIdleState+0x90>)
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f000 f81a 	bl	8002a38 <UART_WaitOnFlagUntilTimeout>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e00f      	b.n	8002a2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2284      	movs	r2, #132	; 0x84
 8002a10:	2120      	movs	r1, #32
 8002a12:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2288      	movs	r2, #136	; 0x88
 8002a18:	2120      	movs	r1, #32
 8002a1a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	01ffffff 	.word	0x01ffffff

08002a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b094      	sub	sp, #80	; 0x50
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a48:	e0a7      	b.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d100      	bne.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a50:	e0a3      	b.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fd ff6f 	bl	8000934 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13f      	bne.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a68:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	2301      	movs	r3, #1
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	494e      	ldr	r1, [pc, #312]	; (8002bc4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2284      	movs	r2, #132	; 0x84
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2288      	movs	r2, #136	; 0x88
 8002ad8:	2120      	movs	r1, #32
 8002ada:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e069      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2204      	movs	r2, #4
 8002af0:	4013      	ands	r3, r2
 8002af2:	d052      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	401a      	ands	r2, r3
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d148      	bne.n	8002b9a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b12:	f3ef 8310 	mrs	r3, PRIMASK
 8002b16:	613b      	str	r3, [r7, #16]
  return(result);
 8002b18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4924      	ldr	r1, [pc, #144]	; (8002bc4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f383 8810 	msr	PRIMASK, r3
}
 8002b42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b4a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b4e:	2301      	movs	r3, #1
 8002b50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	438a      	bics	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2284      	movs	r2, #132	; 0x84
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2288      	movs	r2, #136	; 0x88
 8002b82:	2120      	movs	r1, #32
 8002b84:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	228c      	movs	r2, #140	; 0x8c
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e010      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	425a      	negs	r2, r3
 8002baa:	4153      	adcs	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	001a      	movs	r2, r3
 8002bb0:	1dfb      	adds	r3, r7, #7
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d100      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x182>
 8002bb8:	e747      	b.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b014      	add	sp, #80	; 0x50
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	fffffe5f 	.word	0xfffffe5f

08002bc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b094      	sub	sp, #80	; 0x50
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	1dbb      	adds	r3, r7, #6
 8002bd4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1dba      	adds	r2, r7, #6
 8002be0:	215c      	movs	r1, #92	; 0x5c
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1dba      	adds	r2, r7, #6
 8002bea:	215e      	movs	r1, #94	; 0x5e
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d10d      	bne.n	8002c1e <UART_Start_Receive_IT+0x56>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <UART_Start_Receive_IT+0x4c>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2260      	movs	r2, #96	; 0x60
 8002c0e:	496f      	ldr	r1, [pc, #444]	; (8002dcc <UART_Start_Receive_IT+0x204>)
 8002c10:	5299      	strh	r1, [r3, r2]
 8002c12:	e02e      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2260      	movs	r2, #96	; 0x60
 8002c18:	21ff      	movs	r1, #255	; 0xff
 8002c1a:	5299      	strh	r1, [r3, r2]
 8002c1c:	e029      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <UART_Start_Receive_IT+0x7a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <UART_Start_Receive_IT+0x70>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2260      	movs	r2, #96	; 0x60
 8002c32:	21ff      	movs	r1, #255	; 0xff
 8002c34:	5299      	strh	r1, [r3, r2]
 8002c36:	e01c      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2260      	movs	r2, #96	; 0x60
 8002c3c:	217f      	movs	r1, #127	; 0x7f
 8002c3e:	5299      	strh	r1, [r3, r2]
 8002c40:	e017      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	055b      	lsls	r3, r3, #21
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10d      	bne.n	8002c6a <UART_Start_Receive_IT+0xa2>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <UART_Start_Receive_IT+0x98>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2260      	movs	r2, #96	; 0x60
 8002c5a:	217f      	movs	r1, #127	; 0x7f
 8002c5c:	5299      	strh	r1, [r3, r2]
 8002c5e:	e008      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2260      	movs	r2, #96	; 0x60
 8002c64:	213f      	movs	r1, #63	; 0x3f
 8002c66:	5299      	strh	r1, [r3, r2]
 8002c68:	e003      	b.n	8002c72 <UART_Start_Receive_IT+0xaa>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2260      	movs	r2, #96	; 0x60
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	228c      	movs	r2, #140	; 0x8c
 8002c76:	2100      	movs	r1, #0
 8002c78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2288      	movs	r2, #136	; 0x88
 8002c7e:	2122      	movs	r1, #34	; 0x22
 8002c80:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c82:	f3ef 8310 	mrs	r3, PRIMASK
 8002c86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	f383 8810 	msr	PRIMASK, r3
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cae:	f383 8810 	msr	PRIMASK, r3
}
 8002cb2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	059b      	lsls	r3, r3, #22
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d150      	bne.n	8002d62 <UART_Start_Receive_IT+0x19a>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2268      	movs	r2, #104	; 0x68
 8002cc4:	5a9b      	ldrh	r3, [r3, r2]
 8002cc6:	1dba      	adds	r2, r7, #6
 8002cc8:	8812      	ldrh	r2, [r2, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d349      	bcc.n	8002d62 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	015b      	lsls	r3, r3, #5
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d107      	bne.n	8002cea <UART_Start_Receive_IT+0x122>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a3a      	ldr	r2, [pc, #232]	; (8002dd0 <UART_Start_Receive_IT+0x208>)
 8002ce6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ce8:	e002      	b.n	8002cf0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <UART_Start_Receive_IT+0x20c>)
 8002cee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cfe:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d02:	2301      	movs	r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	0049      	lsls	r1, r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0549      	lsls	r1, r1, #21
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	f383 8810 	msr	PRIMASK, r3
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	e02e      	b.n	8002dc0 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d107      	bne.n	8002d7e <UART_Start_Receive_IT+0x1b6>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <UART_Start_Receive_IT+0x210>)
 8002d7a:	671a      	str	r2, [r3, #112]	; 0x70
 8002d7c:	e002      	b.n	8002d84 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <UART_Start_Receive_IT+0x214>)
 8002d82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d90:	613b      	str	r3, [r7, #16]
  return(result);
 8002d92:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2190      	movs	r1, #144	; 0x90
 8002dae:	0049      	lsls	r1, r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b014      	add	sp, #80	; 0x50
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	000001ff 	.word	0x000001ff
 8002dd0:	080034f1 	.word	0x080034f1
 8002dd4:	0800320d 	.word	0x0800320d
 8002dd8:	080030a1 	.word	0x080030a1
 8002ddc:	08002f35 	.word	0x08002f35

08002de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dec:	617b      	str	r3, [r7, #20]
  return(result);
 8002dee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4926      	ldr	r1, [pc, #152]	; (8002ea4 <UART_EndRxTransfer+0xc4>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1e:	623b      	str	r3, [r7, #32]
  return(result);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <UART_EndRxTransfer+0xc8>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	f383 8810 	msr	PRIMASK, r3
}
 8002e4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d118      	bne.n	8002e86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e54:	f3ef 8310 	mrs	r3, PRIMASK
 8002e58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5e:	2301      	movs	r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f383 8810 	msr	PRIMASK, r3
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2110      	movs	r1, #16
 8002e76:	438a      	bics	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2288      	movs	r2, #136	; 0x88
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b00e      	add	sp, #56	; 0x38
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	fffffedf 	.word	0xfffffedf
 8002ea8:	effffffe 	.word	0xeffffffe

08002eac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	225e      	movs	r2, #94	; 0x5e
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2256      	movs	r2, #86	; 0x56
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff fa11 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f383 8810 	msr	PRIMASK, r3
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	438a      	bics	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2284      	movs	r2, #132	; 0x84
 8002f18:	2120      	movs	r1, #32
 8002f1a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff f9dd 	bl	80022e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b006      	add	sp, #24
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b090      	sub	sp, #64	; 0x40
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002f3c:	203e      	movs	r0, #62	; 0x3e
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	2160      	movs	r1, #96	; 0x60
 8002f44:	5a52      	ldrh	r2, [r2, r1]
 8002f46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2288      	movs	r2, #136	; 0x88
 8002f4c:	589b      	ldr	r3, [r3, r2]
 8002f4e:	2b22      	cmp	r3, #34	; 0x22
 8002f50:	d000      	beq.n	8002f54 <UART_RxISR_8BIT+0x20>
 8002f52:	e097      	b.n	8003084 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	213c      	movs	r1, #60	; 0x3c
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	183b      	adds	r3, r7, r0
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	400a      	ands	r2, r1
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	225e      	movs	r2, #94	; 0x5e
 8002f84:	5a9b      	ldrh	r3, [r3, r2]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b299      	uxth	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	225e      	movs	r2, #94	; 0x5e
 8002f90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	225e      	movs	r2, #94	; 0x5e
 8002f96:	5a9b      	ldrh	r3, [r3, r2]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d000      	beq.n	8002fa0 <UART_RxISR_8BIT+0x6c>
 8002f9e:	e079      	b.n	8003094 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fa6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <UART_RxISR_8BIT+0x168>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
 8002fdc:	2301      	movs	r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2288      	movs	r2, #136	; 0x88
 8003008:	2120      	movs	r1, #32
 800300a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12f      	bne.n	800307a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003020:	f3ef 8310 	mrs	r3, PRIMASK
 8003024:	60fb      	str	r3, [r7, #12]
  return(result);
 8003026:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
 800302a:	2301      	movs	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2110      	movs	r1, #16
 8003042:	438a      	bics	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2210      	movs	r2, #16
 800305a:	4013      	ands	r3, r2
 800305c:	2b10      	cmp	r3, #16
 800305e:	d103      	bne.n	8003068 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2210      	movs	r2, #16
 8003066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	225c      	movs	r2, #92	; 0x5c
 800306c:	5a9a      	ldrh	r2, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff f946 	bl	8002304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003078:	e00c      	b.n	8003094 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd facd 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003082:	e007      	b.n	8003094 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2108      	movs	r1, #8
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b010      	add	sp, #64	; 0x40
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fffffedf 	.word	0xfffffedf

080030a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b090      	sub	sp, #64	; 0x40
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80030a8:	203e      	movs	r0, #62	; 0x3e
 80030aa:	183b      	adds	r3, r7, r0
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2160      	movs	r1, #96	; 0x60
 80030b0:	5a52      	ldrh	r2, [r2, r1]
 80030b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2288      	movs	r2, #136	; 0x88
 80030b8:	589b      	ldr	r3, [r3, r2]
 80030ba:	2b22      	cmp	r3, #34	; 0x22
 80030bc:	d000      	beq.n	80030c0 <UART_RxISR_16BIT+0x20>
 80030be:	e097      	b.n	80031f0 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	213c      	movs	r1, #60	; 0x3c
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	183a      	adds	r2, r7, r0
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	225e      	movs	r2, #94	; 0x5e
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b299      	uxth	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	225e      	movs	r2, #94	; 0x5e
 80030fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	225e      	movs	r2, #94	; 0x5e
 8003102:	5a9b      	ldrh	r3, [r3, r2]
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d000      	beq.n	800310c <UART_RxISR_16BIT+0x6c>
 800310a:	e079      	b.n	8003200 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310c:	f3ef 8310 	mrs	r3, PRIMASK
 8003110:	617b      	str	r3, [r7, #20]
  return(result);
 8003112:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f383 8810 	msr	PRIMASK, r3
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4936      	ldr	r1, [pc, #216]	; (8003208 <UART_RxISR_16BIT+0x168>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	623b      	str	r3, [r7, #32]
  return(result);
 8003144:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2288      	movs	r2, #136	; 0x88
 8003174:	2120      	movs	r1, #32
 8003176:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d12f      	bne.n	80031e6 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318c:	f3ef 8310 	mrs	r3, PRIMASK
 8003190:	60bb      	str	r3, [r7, #8]
  return(result);
 8003192:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003196:	2301      	movs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f383 8810 	msr	PRIMASK, r3
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2110      	movs	r1, #16
 80031ae:	438a      	bics	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f383 8810 	msr	PRIMASK, r3
}
 80031bc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	2210      	movs	r2, #16
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d103      	bne.n	80031d4 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2210      	movs	r2, #16
 80031d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	225c      	movs	r2, #92	; 0x5c
 80031d8:	5a9a      	ldrh	r2, [r3, r2]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0011      	movs	r1, r2
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff f890 	bl	8002304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031e4:	e00c      	b.n	8003200 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd fa17 	bl	800061c <HAL_UART_RxCpltCallback>
}
 80031ee:	e007      	b.n	8003200 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2108      	movs	r1, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b010      	add	sp, #64	; 0x40
 8003206:	bd80      	pop	{r7, pc}
 8003208:	fffffedf 	.word	0xfffffedf

0800320c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b09c      	sub	sp, #112	; 0x70
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003214:	236a      	movs	r3, #106	; 0x6a
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	2160      	movs	r1, #96	; 0x60
 800321c:	5a52      	ldrh	r2, [r2, r1]
 800321e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2288      	movs	r2, #136	; 0x88
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b22      	cmp	r3, #34	; 0x22
 8003240:	d000      	beq.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003242:	e141      	b.n	80034c8 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003244:	235e      	movs	r3, #94	; 0x5e
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	2168      	movs	r1, #104	; 0x68
 800324c:	5a52      	ldrh	r2, [r2, r1]
 800324e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003250:	e0e8      	b.n	8003424 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003258:	215c      	movs	r1, #92	; 0x5c
 800325a:	187b      	adds	r3, r7, r1
 800325c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800325e:	187b      	adds	r3, r7, r1
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	236a      	movs	r3, #106	; 0x6a
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	400a      	ands	r2, r1
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	225e      	movs	r2, #94	; 0x5e
 8003284:	5a9b      	ldrh	r3, [r3, r2]
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b299      	uxth	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	225e      	movs	r2, #94	; 0x5e
 8003290:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	d049      	beq.n	8003336 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d010      	beq.n	80032cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80032aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	228c      	movs	r2, #140	; 0x8c
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	2201      	movs	r2, #1
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	218c      	movs	r1, #140	; 0x8c
 80032ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80032d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2202      	movs	r2, #2
 80032e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	228c      	movs	r2, #140	; 0x8c
 80032e8:	589b      	ldr	r3, [r3, r2]
 80032ea:	2204      	movs	r2, #4
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	218c      	movs	r1, #140	; 0x8c
 80032f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f6:	2204      	movs	r2, #4
 80032f8:	4013      	ands	r3, r2
 80032fa:	d00f      	beq.n	800331c <UART_RxISR_8BIT_FIFOEN+0x110>
 80032fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2204      	movs	r2, #4
 800330a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	228c      	movs	r2, #140	; 0x8c
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	2202      	movs	r2, #2
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	218c      	movs	r1, #140	; 0x8c
 800331a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	228c      	movs	r2, #140	; 0x8c
 8003320:	589b      	ldr	r3, [r3, r2]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7fe ffe3 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	228c      	movs	r2, #140	; 0x8c
 8003332:	2100      	movs	r1, #0
 8003334:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	225e      	movs	r2, #94	; 0x5e
 800333a:	5a9b      	ldrh	r3, [r3, r2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d170      	bne.n	8003424 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003342:	f3ef 8310 	mrs	r3, PRIMASK
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334a:	65bb      	str	r3, [r7, #88]	; 0x58
 800334c:	2301      	movs	r3, #1
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	495f      	ldr	r1, [pc, #380]	; (80034e0 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336e:	f383 8810 	msr	PRIMASK, r3
}
 8003372:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800337c:	657b      	str	r3, [r7, #84]	; 0x54
 800337e:	2301      	movs	r3, #1
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4953      	ldr	r1, [pc, #332]	; (80034e4 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8003396:	400a      	ands	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2288      	movs	r2, #136	; 0x88
 80033aa:	2120      	movs	r1, #32
 80033ac:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d12f      	bne.n	800341c <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	623b      	str	r3, [r7, #32]
  return(result);
 80033c8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ca:	653b      	str	r3, [r7, #80]	; 0x50
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2110      	movs	r1, #16
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2210      	movs	r2, #16
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d103      	bne.n	800340a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	225c      	movs	r2, #92	; 0x5c
 800340e:	5a9a      	ldrh	r2, [r3, r2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0011      	movs	r1, r2
 8003414:	0018      	movs	r0, r3
 8003416:	f7fe ff75 	bl	8002304 <HAL_UARTEx_RxEventCallback>
 800341a:	e003      	b.n	8003424 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f7fd f8fc 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003424:	235e      	movs	r3, #94	; 0x5e
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800342e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003430:	2220      	movs	r2, #32
 8003432:	4013      	ands	r3, r2
 8003434:	d000      	beq.n	8003438 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8003436:	e70c      	b.n	8003252 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003438:	204e      	movs	r0, #78	; 0x4e
 800343a:	183b      	adds	r3, r7, r0
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	215e      	movs	r1, #94	; 0x5e
 8003440:	5a52      	ldrh	r2, [r2, r1]
 8003442:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003444:	0001      	movs	r1, r0
 8003446:	187b      	adds	r3, r7, r1
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d044      	beq.n	80034d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2268      	movs	r2, #104	; 0x68
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	187a      	adds	r2, r7, r1
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d23d      	bcs.n	80034d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	60bb      	str	r3, [r7, #8]
  return(result);
 8003462:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
 8003466:	2301      	movs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	491a      	ldr	r1, [pc, #104]	; (80034e8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800347e:	400a      	ands	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a16      	ldr	r2, [pc, #88]	; (80034ec <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003492:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003494:	f3ef 8310 	mrs	r3, PRIMASK
 8003498:	617b      	str	r3, [r7, #20]
  return(result);
 800349a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
 800349e:	2301      	movs	r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2120      	movs	r1, #32
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034c6:	e007      	b.n	80034d8 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2108      	movs	r1, #8
 80034d4:	430a      	orrs	r2, r1
 80034d6:	619a      	str	r2, [r3, #24]
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b01c      	add	sp, #112	; 0x70
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	fffffeff 	.word	0xfffffeff
 80034e4:	effffffe 	.word	0xeffffffe
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	08002f35 	.word	0x08002f35

080034f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b09e      	sub	sp, #120	; 0x78
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80034f8:	2372      	movs	r3, #114	; 0x72
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	2160      	movs	r1, #96	; 0x60
 8003500:	5a52      	ldrh	r2, [r2, r1]
 8003502:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2288      	movs	r2, #136	; 0x88
 8003520:	589b      	ldr	r3, [r3, r2]
 8003522:	2b22      	cmp	r3, #34	; 0x22
 8003524:	d000      	beq.n	8003528 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003526:	e141      	b.n	80037ac <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003528:	2366      	movs	r3, #102	; 0x66
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	2168      	movs	r1, #104	; 0x68
 8003530:	5a52      	ldrh	r2, [r2, r1]
 8003532:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003534:	e0e8      	b.n	8003708 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353c:	2164      	movs	r1, #100	; 0x64
 800353e:	187b      	adds	r3, r7, r1
 8003540:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2272      	movs	r2, #114	; 0x72
 800354c:	18ba      	adds	r2, r7, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4013      	ands	r3, r2
 8003554:	b29a      	uxth	r2, r3
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	1c9a      	adds	r2, r3, #2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	225e      	movs	r2, #94	; 0x5e
 8003568:	5a9b      	ldrh	r3, [r3, r2]
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b299      	uxth	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	225e      	movs	r2, #94	; 0x5e
 8003574:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800357e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003580:	2207      	movs	r2, #7
 8003582:	4013      	ands	r3, r2
 8003584:	d049      	beq.n	800361a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d010      	beq.n	80035b0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800358e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4013      	ands	r3, r2
 8003596:	d00b      	beq.n	80035b0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	228c      	movs	r2, #140	; 0x8c
 80035a4:	589b      	ldr	r3, [r3, r2]
 80035a6:	2201      	movs	r2, #1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	218c      	movs	r1, #140	; 0x8c
 80035ae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b2:	2202      	movs	r2, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00f      	beq.n	80035d8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80035b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ba:	2201      	movs	r2, #1
 80035bc:	4013      	ands	r3, r2
 80035be:	d00b      	beq.n	80035d8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2202      	movs	r2, #2
 80035c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	228c      	movs	r2, #140	; 0x8c
 80035cc:	589b      	ldr	r3, [r3, r2]
 80035ce:	2204      	movs	r2, #4
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	218c      	movs	r1, #140	; 0x8c
 80035d6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035da:	2204      	movs	r2, #4
 80035dc:	4013      	ands	r3, r2
 80035de:	d00f      	beq.n	8003600 <UART_RxISR_16BIT_FIFOEN+0x110>
 80035e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e2:	2201      	movs	r2, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00b      	beq.n	8003600 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2204      	movs	r2, #4
 80035ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	228c      	movs	r2, #140	; 0x8c
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2202      	movs	r2, #2
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	218c      	movs	r1, #140	; 0x8c
 80035fe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	228c      	movs	r2, #140	; 0x8c
 8003604:	589b      	ldr	r3, [r3, r2]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f7fe fe71 	bl	80022f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	228c      	movs	r2, #140	; 0x8c
 8003616:	2100      	movs	r1, #0
 8003618:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	225e      	movs	r2, #94	; 0x5e
 800361e:	5a9b      	ldrh	r3, [r3, r2]
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d170      	bne.n	8003708 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003626:	f3ef 8310 	mrs	r3, PRIMASK
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800362e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003630:	2301      	movs	r3, #1
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	495f      	ldr	r1, [pc, #380]	; (80037c4 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8003648:	400a      	ands	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	f383 8810 	msr	PRIMASK, r3
}
 8003656:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003658:	f3ef 8310 	mrs	r3, PRIMASK
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003660:	65bb      	str	r3, [r7, #88]	; 0x58
 8003662:	2301      	movs	r3, #1
 8003664:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003668:	f383 8810 	msr	PRIMASK, r3
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4953      	ldr	r1, [pc, #332]	; (80037c8 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800367a:	400a      	ands	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2288      	movs	r2, #136	; 0x88
 800368e:	2120      	movs	r1, #32
 8003690:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12f      	bne.n	8003700 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	657b      	str	r3, [r7, #84]	; 0x54
 80036b0:	2301      	movs	r3, #1
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2110      	movs	r1, #16
 80036c8:	438a      	bics	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d103      	bne.n	80036ee <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	225c      	movs	r2, #92	; 0x5c
 80036f2:	5a9a      	ldrh	r2, [r3, r2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7fe fe03 	bl	8002304 <HAL_UARTEx_RxEventCallback>
 80036fe:	e003      	b.n	8003708 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f7fc ff8a 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003708:	2366      	movs	r3, #102	; 0x66
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8003712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003714:	2220      	movs	r2, #32
 8003716:	4013      	ands	r3, r2
 8003718:	d000      	beq.n	800371c <UART_RxISR_16BIT_FIFOEN+0x22c>
 800371a:	e70c      	b.n	8003536 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800371c:	2052      	movs	r0, #82	; 0x52
 800371e:	183b      	adds	r3, r7, r0
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	215e      	movs	r1, #94	; 0x5e
 8003724:	5a52      	ldrh	r2, [r2, r1]
 8003726:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003728:	0001      	movs	r1, r0
 800372a:	187b      	adds	r3, r7, r1
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d044      	beq.n	80037bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2268      	movs	r2, #104	; 0x68
 8003736:	5a9b      	ldrh	r3, [r3, r2]
 8003738:	187a      	adds	r2, r7, r1
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d23d      	bcs.n	80037bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003740:	f3ef 8310 	mrs	r3, PRIMASK
 8003744:	60fb      	str	r3, [r7, #12]
  return(result);
 8003746:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374a:	2301      	movs	r3, #1
 800374c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	491a      	ldr	r1, [pc, #104]	; (80037cc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003762:	400a      	ands	r2, r1
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003776:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003778:	f3ef 8310 	mrs	r3, PRIMASK
 800377c:	61bb      	str	r3, [r7, #24]
  return(result);
 800377e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
 8003782:	2301      	movs	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f383 8810 	msr	PRIMASK, r3
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2120      	movs	r1, #32
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f383 8810 	msr	PRIMASK, r3
}
 80037a8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037aa:	e007      	b.n	80037bc <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2108      	movs	r1, #8
 80037b8:	430a      	orrs	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b01e      	add	sp, #120	; 0x78
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fffffeff 	.word	0xfffffeff
 80037c8:	effffffe 	.word	0xeffffffe
 80037cc:	efffffff 	.word	0xefffffff
 80037d0:	080030a1 	.word	0x080030a1

080037d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <__errno>:
 8003804:	4b01      	ldr	r3, [pc, #4]	; (800380c <__errno+0x8>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	4770      	bx	lr
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000010 	.word	0x20000010

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	2600      	movs	r6, #0
 8003814:	4d0c      	ldr	r5, [pc, #48]	; (8003848 <__libc_init_array+0x38>)
 8003816:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	2600      	movs	r6, #0
 8003822:	f000 fc47 	bl	80040b4 <_init>
 8003826:	4d0a      	ldr	r5, [pc, #40]	; (8003850 <__libc_init_array+0x40>)
 8003828:	4c0a      	ldr	r4, [pc, #40]	; (8003854 <__libc_init_array+0x44>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	00b3      	lsls	r3, r6, #2
 8003836:	58eb      	ldr	r3, [r5, r3]
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	00b3      	lsls	r3, r6, #2
 8003840:	58eb      	ldr	r3, [r5, r3]
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	08004188 	.word	0x08004188
 800384c:	08004188 	.word	0x08004188
 8003850:	08004188 	.word	0x08004188
 8003854:	0800418c 	.word	0x0800418c

08003858 <memset>:
 8003858:	0003      	movs	r3, r0
 800385a:	1882      	adds	r2, r0, r2
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	7019      	strb	r1, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <siprintf>:
 8003868:	b40e      	push	{r1, r2, r3}
 800386a:	b500      	push	{lr}
 800386c:	490b      	ldr	r1, [pc, #44]	; (800389c <siprintf+0x34>)
 800386e:	b09c      	sub	sp, #112	; 0x70
 8003870:	ab1d      	add	r3, sp, #116	; 0x74
 8003872:	9002      	str	r0, [sp, #8]
 8003874:	9006      	str	r0, [sp, #24]
 8003876:	9107      	str	r1, [sp, #28]
 8003878:	9104      	str	r1, [sp, #16]
 800387a:	4809      	ldr	r0, [pc, #36]	; (80038a0 <siprintf+0x38>)
 800387c:	4909      	ldr	r1, [pc, #36]	; (80038a4 <siprintf+0x3c>)
 800387e:	cb04      	ldmia	r3!, {r2}
 8003880:	9105      	str	r1, [sp, #20]
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	a902      	add	r1, sp, #8
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	f000 f870 	bl	800396c <_svfiprintf_r>
 800388c:	2300      	movs	r3, #0
 800388e:	9a02      	ldr	r2, [sp, #8]
 8003890:	7013      	strb	r3, [r2, #0]
 8003892:	b01c      	add	sp, #112	; 0x70
 8003894:	bc08      	pop	{r3}
 8003896:	b003      	add	sp, #12
 8003898:	4718      	bx	r3
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	7fffffff 	.word	0x7fffffff
 80038a0:	20000010 	.word	0x20000010
 80038a4:	ffff0208 	.word	0xffff0208

080038a8 <__ssputs_r>:
 80038a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038aa:	688e      	ldr	r6, [r1, #8]
 80038ac:	b085      	sub	sp, #20
 80038ae:	0007      	movs	r7, r0
 80038b0:	000c      	movs	r4, r1
 80038b2:	9203      	str	r2, [sp, #12]
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	429e      	cmp	r6, r3
 80038b8:	d83c      	bhi.n	8003934 <__ssputs_r+0x8c>
 80038ba:	2390      	movs	r3, #144	; 0x90
 80038bc:	898a      	ldrh	r2, [r1, #12]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	421a      	tst	r2, r3
 80038c2:	d034      	beq.n	800392e <__ssputs_r+0x86>
 80038c4:	2503      	movs	r5, #3
 80038c6:	6909      	ldr	r1, [r1, #16]
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	1a5b      	subs	r3, r3, r1
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	6963      	ldr	r3, [r4, #20]
 80038d0:	9802      	ldr	r0, [sp, #8]
 80038d2:	435d      	muls	r5, r3
 80038d4:	0feb      	lsrs	r3, r5, #31
 80038d6:	195d      	adds	r5, r3, r5
 80038d8:	9b01      	ldr	r3, [sp, #4]
 80038da:	106d      	asrs	r5, r5, #1
 80038dc:	3301      	adds	r3, #1
 80038de:	181b      	adds	r3, r3, r0
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	d900      	bls.n	80038e6 <__ssputs_r+0x3e>
 80038e4:	001d      	movs	r5, r3
 80038e6:	0553      	lsls	r3, r2, #21
 80038e8:	d532      	bpl.n	8003950 <__ssputs_r+0xa8>
 80038ea:	0029      	movs	r1, r5
 80038ec:	0038      	movs	r0, r7
 80038ee:	f000 fb31 	bl	8003f54 <_malloc_r>
 80038f2:	1e06      	subs	r6, r0, #0
 80038f4:	d109      	bne.n	800390a <__ssputs_r+0x62>
 80038f6:	230c      	movs	r3, #12
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	2001      	movs	r0, #1
 80038fe:	89a2      	ldrh	r2, [r4, #12]
 8003900:	4240      	negs	r0, r0
 8003902:	4313      	orrs	r3, r2
 8003904:	81a3      	strh	r3, [r4, #12]
 8003906:	b005      	add	sp, #20
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390a:	9a02      	ldr	r2, [sp, #8]
 800390c:	6921      	ldr	r1, [r4, #16]
 800390e:	f000 faba 	bl	8003e86 <memcpy>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <__ssputs_r+0xc0>)
 8003916:	401a      	ands	r2, r3
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	4313      	orrs	r3, r2
 800391c:	81a3      	strh	r3, [r4, #12]
 800391e:	9b02      	ldr	r3, [sp, #8]
 8003920:	6126      	str	r6, [r4, #16]
 8003922:	18f6      	adds	r6, r6, r3
 8003924:	6026      	str	r6, [r4, #0]
 8003926:	6165      	str	r5, [r4, #20]
 8003928:	9e01      	ldr	r6, [sp, #4]
 800392a:	1aed      	subs	r5, r5, r3
 800392c:	60a5      	str	r5, [r4, #8]
 800392e:	9b01      	ldr	r3, [sp, #4]
 8003930:	429e      	cmp	r6, r3
 8003932:	d900      	bls.n	8003936 <__ssputs_r+0x8e>
 8003934:	9e01      	ldr	r6, [sp, #4]
 8003936:	0032      	movs	r2, r6
 8003938:	9903      	ldr	r1, [sp, #12]
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	f000 faac 	bl	8003e98 <memmove>
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	2000      	movs	r0, #0
 8003944:	1b9b      	subs	r3, r3, r6
 8003946:	60a3      	str	r3, [r4, #8]
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	199e      	adds	r6, r3, r6
 800394c:	6026      	str	r6, [r4, #0]
 800394e:	e7da      	b.n	8003906 <__ssputs_r+0x5e>
 8003950:	002a      	movs	r2, r5
 8003952:	0038      	movs	r0, r7
 8003954:	f000 fb5c 	bl	8004010 <_realloc_r>
 8003958:	1e06      	subs	r6, r0, #0
 800395a:	d1e0      	bne.n	800391e <__ssputs_r+0x76>
 800395c:	0038      	movs	r0, r7
 800395e:	6921      	ldr	r1, [r4, #16]
 8003960:	f000 faae 	bl	8003ec0 <_free_r>
 8003964:	e7c7      	b.n	80038f6 <__ssputs_r+0x4e>
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	fffffb7f 	.word	0xfffffb7f

0800396c <_svfiprintf_r>:
 800396c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396e:	b0a1      	sub	sp, #132	; 0x84
 8003970:	9003      	str	r0, [sp, #12]
 8003972:	001d      	movs	r5, r3
 8003974:	898b      	ldrh	r3, [r1, #12]
 8003976:	000f      	movs	r7, r1
 8003978:	0016      	movs	r6, r2
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	d511      	bpl.n	80039a2 <_svfiprintf_r+0x36>
 800397e:	690b      	ldr	r3, [r1, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10e      	bne.n	80039a2 <_svfiprintf_r+0x36>
 8003984:	2140      	movs	r1, #64	; 0x40
 8003986:	f000 fae5 	bl	8003f54 <_malloc_r>
 800398a:	6038      	str	r0, [r7, #0]
 800398c:	6138      	str	r0, [r7, #16]
 800398e:	2800      	cmp	r0, #0
 8003990:	d105      	bne.n	800399e <_svfiprintf_r+0x32>
 8003992:	230c      	movs	r3, #12
 8003994:	9a03      	ldr	r2, [sp, #12]
 8003996:	3801      	subs	r0, #1
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	b021      	add	sp, #132	; 0x84
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	ac08      	add	r4, sp, #32
 80039a6:	6163      	str	r3, [r4, #20]
 80039a8:	3320      	adds	r3, #32
 80039aa:	7663      	strb	r3, [r4, #25]
 80039ac:	3310      	adds	r3, #16
 80039ae:	76a3      	strb	r3, [r4, #26]
 80039b0:	9507      	str	r5, [sp, #28]
 80039b2:	0035      	movs	r5, r6
 80039b4:	782b      	ldrb	r3, [r5, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <_svfiprintf_r+0x52>
 80039ba:	2b25      	cmp	r3, #37	; 0x25
 80039bc:	d147      	bne.n	8003a4e <_svfiprintf_r+0xe2>
 80039be:	1bab      	subs	r3, r5, r6
 80039c0:	9305      	str	r3, [sp, #20]
 80039c2:	42b5      	cmp	r5, r6
 80039c4:	d00c      	beq.n	80039e0 <_svfiprintf_r+0x74>
 80039c6:	0032      	movs	r2, r6
 80039c8:	0039      	movs	r1, r7
 80039ca:	9803      	ldr	r0, [sp, #12]
 80039cc:	f7ff ff6c 	bl	80038a8 <__ssputs_r>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d100      	bne.n	80039d6 <_svfiprintf_r+0x6a>
 80039d4:	e0ae      	b.n	8003b34 <_svfiprintf_r+0x1c8>
 80039d6:	6962      	ldr	r2, [r4, #20]
 80039d8:	9b05      	ldr	r3, [sp, #20]
 80039da:	4694      	mov	ip, r2
 80039dc:	4463      	add	r3, ip
 80039de:	6163      	str	r3, [r4, #20]
 80039e0:	782b      	ldrb	r3, [r5, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d100      	bne.n	80039e8 <_svfiprintf_r+0x7c>
 80039e6:	e0a5      	b.n	8003b34 <_svfiprintf_r+0x1c8>
 80039e8:	2201      	movs	r2, #1
 80039ea:	2300      	movs	r3, #0
 80039ec:	4252      	negs	r2, r2
 80039ee:	6062      	str	r2, [r4, #4]
 80039f0:	a904      	add	r1, sp, #16
 80039f2:	3254      	adds	r2, #84	; 0x54
 80039f4:	1852      	adds	r2, r2, r1
 80039f6:	1c6e      	adds	r6, r5, #1
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	60e3      	str	r3, [r4, #12]
 80039fc:	60a3      	str	r3, [r4, #8]
 80039fe:	7013      	strb	r3, [r2, #0]
 8003a00:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a02:	2205      	movs	r2, #5
 8003a04:	7831      	ldrb	r1, [r6, #0]
 8003a06:	4854      	ldr	r0, [pc, #336]	; (8003b58 <_svfiprintf_r+0x1ec>)
 8003a08:	f000 fa32 	bl	8003e70 <memchr>
 8003a0c:	1c75      	adds	r5, r6, #1
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d11f      	bne.n	8003a52 <_svfiprintf_r+0xe6>
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	06d3      	lsls	r3, r2, #27
 8003a16:	d504      	bpl.n	8003a22 <_svfiprintf_r+0xb6>
 8003a18:	2353      	movs	r3, #83	; 0x53
 8003a1a:	a904      	add	r1, sp, #16
 8003a1c:	185b      	adds	r3, r3, r1
 8003a1e:	2120      	movs	r1, #32
 8003a20:	7019      	strb	r1, [r3, #0]
 8003a22:	0713      	lsls	r3, r2, #28
 8003a24:	d504      	bpl.n	8003a30 <_svfiprintf_r+0xc4>
 8003a26:	2353      	movs	r3, #83	; 0x53
 8003a28:	a904      	add	r1, sp, #16
 8003a2a:	185b      	adds	r3, r3, r1
 8003a2c:	212b      	movs	r1, #43	; 0x2b
 8003a2e:	7019      	strb	r1, [r3, #0]
 8003a30:	7833      	ldrb	r3, [r6, #0]
 8003a32:	2b2a      	cmp	r3, #42	; 0x2a
 8003a34:	d016      	beq.n	8003a64 <_svfiprintf_r+0xf8>
 8003a36:	0035      	movs	r5, r6
 8003a38:	2100      	movs	r1, #0
 8003a3a:	200a      	movs	r0, #10
 8003a3c:	68e3      	ldr	r3, [r4, #12]
 8003a3e:	782a      	ldrb	r2, [r5, #0]
 8003a40:	1c6e      	adds	r6, r5, #1
 8003a42:	3a30      	subs	r2, #48	; 0x30
 8003a44:	2a09      	cmp	r2, #9
 8003a46:	d94e      	bls.n	8003ae6 <_svfiprintf_r+0x17a>
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d111      	bne.n	8003a70 <_svfiprintf_r+0x104>
 8003a4c:	e017      	b.n	8003a7e <_svfiprintf_r+0x112>
 8003a4e:	3501      	adds	r5, #1
 8003a50:	e7b0      	b.n	80039b4 <_svfiprintf_r+0x48>
 8003a52:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <_svfiprintf_r+0x1ec>)
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	1ac0      	subs	r0, r0, r3
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4083      	lsls	r3, r0
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	002e      	movs	r6, r5
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	e7ce      	b.n	8003a02 <_svfiprintf_r+0x96>
 8003a64:	9b07      	ldr	r3, [sp, #28]
 8003a66:	1d19      	adds	r1, r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	9107      	str	r1, [sp, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db01      	blt.n	8003a74 <_svfiprintf_r+0x108>
 8003a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a72:	e004      	b.n	8003a7e <_svfiprintf_r+0x112>
 8003a74:	425b      	negs	r3, r3
 8003a76:	60e3      	str	r3, [r4, #12]
 8003a78:	2302      	movs	r3, #2
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	782b      	ldrb	r3, [r5, #0]
 8003a80:	2b2e      	cmp	r3, #46	; 0x2e
 8003a82:	d10a      	bne.n	8003a9a <_svfiprintf_r+0x12e>
 8003a84:	786b      	ldrb	r3, [r5, #1]
 8003a86:	2b2a      	cmp	r3, #42	; 0x2a
 8003a88:	d135      	bne.n	8003af6 <_svfiprintf_r+0x18a>
 8003a8a:	9b07      	ldr	r3, [sp, #28]
 8003a8c:	3502      	adds	r5, #2
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9207      	str	r2, [sp, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	db2b      	blt.n	8003af0 <_svfiprintf_r+0x184>
 8003a98:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9a:	4e30      	ldr	r6, [pc, #192]	; (8003b5c <_svfiprintf_r+0x1f0>)
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	0030      	movs	r0, r6
 8003aa0:	7829      	ldrb	r1, [r5, #0]
 8003aa2:	f000 f9e5 	bl	8003e70 <memchr>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d006      	beq.n	8003ab8 <_svfiprintf_r+0x14c>
 8003aaa:	2340      	movs	r3, #64	; 0x40
 8003aac:	1b80      	subs	r0, r0, r6
 8003aae:	4083      	lsls	r3, r0
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	3501      	adds	r5, #1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	7829      	ldrb	r1, [r5, #0]
 8003aba:	2206      	movs	r2, #6
 8003abc:	4828      	ldr	r0, [pc, #160]	; (8003b60 <_svfiprintf_r+0x1f4>)
 8003abe:	1c6e      	adds	r6, r5, #1
 8003ac0:	7621      	strb	r1, [r4, #24]
 8003ac2:	f000 f9d5 	bl	8003e70 <memchr>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d03c      	beq.n	8003b44 <_svfiprintf_r+0x1d8>
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <_svfiprintf_r+0x1f8>)
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d125      	bne.n	8003b1c <_svfiprintf_r+0x1b0>
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	9b07      	ldr	r3, [sp, #28]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	3308      	adds	r3, #8
 8003ada:	9307      	str	r3, [sp, #28]
 8003adc:	6963      	ldr	r3, [r4, #20]
 8003ade:	9a04      	ldr	r2, [sp, #16]
 8003ae0:	189b      	adds	r3, r3, r2
 8003ae2:	6163      	str	r3, [r4, #20]
 8003ae4:	e765      	b.n	80039b2 <_svfiprintf_r+0x46>
 8003ae6:	4343      	muls	r3, r0
 8003ae8:	0035      	movs	r5, r6
 8003aea:	2101      	movs	r1, #1
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	e7a6      	b.n	8003a3e <_svfiprintf_r+0xd2>
 8003af0:	2301      	movs	r3, #1
 8003af2:	425b      	negs	r3, r3
 8003af4:	e7d0      	b.n	8003a98 <_svfiprintf_r+0x12c>
 8003af6:	2300      	movs	r3, #0
 8003af8:	200a      	movs	r0, #10
 8003afa:	001a      	movs	r2, r3
 8003afc:	3501      	adds	r5, #1
 8003afe:	6063      	str	r3, [r4, #4]
 8003b00:	7829      	ldrb	r1, [r5, #0]
 8003b02:	1c6e      	adds	r6, r5, #1
 8003b04:	3930      	subs	r1, #48	; 0x30
 8003b06:	2909      	cmp	r1, #9
 8003b08:	d903      	bls.n	8003b12 <_svfiprintf_r+0x1a6>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0c5      	beq.n	8003a9a <_svfiprintf_r+0x12e>
 8003b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b10:	e7c3      	b.n	8003a9a <_svfiprintf_r+0x12e>
 8003b12:	4342      	muls	r2, r0
 8003b14:	0035      	movs	r5, r6
 8003b16:	2301      	movs	r3, #1
 8003b18:	1852      	adds	r2, r2, r1
 8003b1a:	e7f1      	b.n	8003b00 <_svfiprintf_r+0x194>
 8003b1c:	ab07      	add	r3, sp, #28
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	003a      	movs	r2, r7
 8003b22:	0021      	movs	r1, r4
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <_svfiprintf_r+0x1fc>)
 8003b26:	9803      	ldr	r0, [sp, #12]
 8003b28:	e000      	b.n	8003b2c <_svfiprintf_r+0x1c0>
 8003b2a:	bf00      	nop
 8003b2c:	9004      	str	r0, [sp, #16]
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	3301      	adds	r3, #1
 8003b32:	d1d3      	bne.n	8003adc <_svfiprintf_r+0x170>
 8003b34:	89bb      	ldrh	r3, [r7, #12]
 8003b36:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	d400      	bmi.n	8003b3e <_svfiprintf_r+0x1d2>
 8003b3c:	e72d      	b.n	800399a <_svfiprintf_r+0x2e>
 8003b3e:	2001      	movs	r0, #1
 8003b40:	4240      	negs	r0, r0
 8003b42:	e72a      	b.n	800399a <_svfiprintf_r+0x2e>
 8003b44:	ab07      	add	r3, sp, #28
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	003a      	movs	r2, r7
 8003b4a:	0021      	movs	r1, r4
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <_svfiprintf_r+0x1fc>)
 8003b4e:	9803      	ldr	r0, [sp, #12]
 8003b50:	f000 f87c 	bl	8003c4c <_printf_i>
 8003b54:	e7ea      	b.n	8003b2c <_svfiprintf_r+0x1c0>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	0800414c 	.word	0x0800414c
 8003b5c:	08004152 	.word	0x08004152
 8003b60:	08004156 	.word	0x08004156
 8003b64:	00000000 	.word	0x00000000
 8003b68:	080038a9 	.word	0x080038a9

08003b6c <_printf_common>:
 8003b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6e:	0015      	movs	r5, r2
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	688a      	ldr	r2, [r1, #8]
 8003b74:	690b      	ldr	r3, [r1, #16]
 8003b76:	000c      	movs	r4, r1
 8003b78:	9000      	str	r0, [sp, #0]
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	da00      	bge.n	8003b80 <_printf_common+0x14>
 8003b7e:	0013      	movs	r3, r2
 8003b80:	0022      	movs	r2, r4
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	3243      	adds	r2, #67	; 0x43
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	2a00      	cmp	r2, #0
 8003b8a:	d001      	beq.n	8003b90 <_printf_common+0x24>
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	069b      	lsls	r3, r3, #26
 8003b94:	d502      	bpl.n	8003b9c <_printf_common+0x30>
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	0017      	movs	r7, r2
 8003ba2:	401f      	ands	r7, r3
 8003ba4:	421a      	tst	r2, r3
 8003ba6:	d027      	beq.n	8003bf8 <_printf_common+0x8c>
 8003ba8:	0023      	movs	r3, r4
 8003baa:	3343      	adds	r3, #67	; 0x43
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	4193      	sbcs	r3, r2
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	0692      	lsls	r2, r2, #26
 8003bb6:	d430      	bmi.n	8003c1a <_printf_common+0xae>
 8003bb8:	0022      	movs	r2, r4
 8003bba:	9901      	ldr	r1, [sp, #4]
 8003bbc:	9800      	ldr	r0, [sp, #0]
 8003bbe:	9e08      	ldr	r6, [sp, #32]
 8003bc0:	3243      	adds	r2, #67	; 0x43
 8003bc2:	47b0      	blx	r6
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d025      	beq.n	8003c14 <_printf_common+0xa8>
 8003bc8:	2306      	movs	r3, #6
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	682a      	ldr	r2, [r5, #0]
 8003bce:	68e1      	ldr	r1, [r4, #12]
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	4003      	ands	r3, r0
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d103      	bne.n	8003be0 <_printf_common+0x74>
 8003bd8:	1a8d      	subs	r5, r1, r2
 8003bda:	43eb      	mvns	r3, r5
 8003bdc:	17db      	asrs	r3, r3, #31
 8003bde:	401d      	ands	r5, r3
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	6922      	ldr	r2, [r4, #16]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	dd01      	ble.n	8003bec <_printf_common+0x80>
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	18ed      	adds	r5, r5, r3
 8003bec:	2700      	movs	r7, #0
 8003bee:	42bd      	cmp	r5, r7
 8003bf0:	d120      	bne.n	8003c34 <_printf_common+0xc8>
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	e010      	b.n	8003c18 <_printf_common+0xac>
 8003bf6:	3701      	adds	r7, #1
 8003bf8:	68e3      	ldr	r3, [r4, #12]
 8003bfa:	682a      	ldr	r2, [r5, #0]
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	42bb      	cmp	r3, r7
 8003c00:	ddd2      	ble.n	8003ba8 <_printf_common+0x3c>
 8003c02:	0022      	movs	r2, r4
 8003c04:	2301      	movs	r3, #1
 8003c06:	9901      	ldr	r1, [sp, #4]
 8003c08:	9800      	ldr	r0, [sp, #0]
 8003c0a:	9e08      	ldr	r6, [sp, #32]
 8003c0c:	3219      	adds	r2, #25
 8003c0e:	47b0      	blx	r6
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d1f0      	bne.n	8003bf6 <_printf_common+0x8a>
 8003c14:	2001      	movs	r0, #1
 8003c16:	4240      	negs	r0, r0
 8003c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c1a:	2030      	movs	r0, #48	; 0x30
 8003c1c:	18e1      	adds	r1, r4, r3
 8003c1e:	3143      	adds	r1, #67	; 0x43
 8003c20:	7008      	strb	r0, [r1, #0]
 8003c22:	0021      	movs	r1, r4
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	3145      	adds	r1, #69	; 0x45
 8003c28:	7809      	ldrb	r1, [r1, #0]
 8003c2a:	18a2      	adds	r2, r4, r2
 8003c2c:	3243      	adds	r2, #67	; 0x43
 8003c2e:	3302      	adds	r3, #2
 8003c30:	7011      	strb	r1, [r2, #0]
 8003c32:	e7c1      	b.n	8003bb8 <_printf_common+0x4c>
 8003c34:	0022      	movs	r2, r4
 8003c36:	2301      	movs	r3, #1
 8003c38:	9901      	ldr	r1, [sp, #4]
 8003c3a:	9800      	ldr	r0, [sp, #0]
 8003c3c:	9e08      	ldr	r6, [sp, #32]
 8003c3e:	321a      	adds	r2, #26
 8003c40:	47b0      	blx	r6
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d0e6      	beq.n	8003c14 <_printf_common+0xa8>
 8003c46:	3701      	adds	r7, #1
 8003c48:	e7d1      	b.n	8003bee <_printf_common+0x82>
	...

08003c4c <_printf_i>:
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4e:	b08b      	sub	sp, #44	; 0x2c
 8003c50:	9206      	str	r2, [sp, #24]
 8003c52:	000a      	movs	r2, r1
 8003c54:	3243      	adds	r2, #67	; 0x43
 8003c56:	9307      	str	r3, [sp, #28]
 8003c58:	9005      	str	r0, [sp, #20]
 8003c5a:	9204      	str	r2, [sp, #16]
 8003c5c:	7e0a      	ldrb	r2, [r1, #24]
 8003c5e:	000c      	movs	r4, r1
 8003c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c62:	2a78      	cmp	r2, #120	; 0x78
 8003c64:	d806      	bhi.n	8003c74 <_printf_i+0x28>
 8003c66:	2a62      	cmp	r2, #98	; 0x62
 8003c68:	d808      	bhi.n	8003c7c <_printf_i+0x30>
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d100      	bne.n	8003c70 <_printf_i+0x24>
 8003c6e:	e0c0      	b.n	8003df2 <_printf_i+0x1a6>
 8003c70:	2a58      	cmp	r2, #88	; 0x58
 8003c72:	d052      	beq.n	8003d1a <_printf_i+0xce>
 8003c74:	0026      	movs	r6, r4
 8003c76:	3642      	adds	r6, #66	; 0x42
 8003c78:	7032      	strb	r2, [r6, #0]
 8003c7a:	e022      	b.n	8003cc2 <_printf_i+0x76>
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	3863      	subs	r0, #99	; 0x63
 8003c80:	2815      	cmp	r0, #21
 8003c82:	d8f7      	bhi.n	8003c74 <_printf_i+0x28>
 8003c84:	f7fc fa46 	bl	8000114 <__gnu_thumb1_case_shi>
 8003c88:	001f0016 	.word	0x001f0016
 8003c8c:	fff6fff6 	.word	0xfff6fff6
 8003c90:	fff6fff6 	.word	0xfff6fff6
 8003c94:	fff6001f 	.word	0xfff6001f
 8003c98:	fff6fff6 	.word	0xfff6fff6
 8003c9c:	00a8fff6 	.word	0x00a8fff6
 8003ca0:	009a0036 	.word	0x009a0036
 8003ca4:	fff6fff6 	.word	0xfff6fff6
 8003ca8:	fff600b9 	.word	0xfff600b9
 8003cac:	fff60036 	.word	0xfff60036
 8003cb0:	009efff6 	.word	0x009efff6
 8003cb4:	0026      	movs	r6, r4
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	3642      	adds	r6, #66	; 0x42
 8003cba:	1d11      	adds	r1, r2, #4
 8003cbc:	6019      	str	r1, [r3, #0]
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	7033      	strb	r3, [r6, #0]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0a7      	b.n	8003e16 <_printf_i+0x1ca>
 8003cc6:	6808      	ldr	r0, [r1, #0]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	1d0a      	adds	r2, r1, #4
 8003ccc:	0605      	lsls	r5, r0, #24
 8003cce:	d50b      	bpl.n	8003ce8 <_printf_i+0x9c>
 8003cd0:	680d      	ldr	r5, [r1, #0]
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	da03      	bge.n	8003ce0 <_printf_i+0x94>
 8003cd8:	232d      	movs	r3, #45	; 0x2d
 8003cda:	9a04      	ldr	r2, [sp, #16]
 8003cdc:	426d      	negs	r5, r5
 8003cde:	7013      	strb	r3, [r2, #0]
 8003ce0:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <_printf_i+0x21c>)
 8003ce2:	270a      	movs	r7, #10
 8003ce4:	9303      	str	r3, [sp, #12]
 8003ce6:	e032      	b.n	8003d4e <_printf_i+0x102>
 8003ce8:	680d      	ldr	r5, [r1, #0]
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	0641      	lsls	r1, r0, #25
 8003cee:	d5f1      	bpl.n	8003cd4 <_printf_i+0x88>
 8003cf0:	b22d      	sxth	r5, r5
 8003cf2:	e7ef      	b.n	8003cd4 <_printf_i+0x88>
 8003cf4:	680d      	ldr	r5, [r1, #0]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	1d08      	adds	r0, r1, #4
 8003cfa:	6018      	str	r0, [r3, #0]
 8003cfc:	062e      	lsls	r6, r5, #24
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xb8>
 8003d00:	680d      	ldr	r5, [r1, #0]
 8003d02:	e003      	b.n	8003d0c <_printf_i+0xc0>
 8003d04:	066d      	lsls	r5, r5, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0xb4>
 8003d08:	680d      	ldr	r5, [r1, #0]
 8003d0a:	b2ad      	uxth	r5, r5
 8003d0c:	4b56      	ldr	r3, [pc, #344]	; (8003e68 <_printf_i+0x21c>)
 8003d0e:	270a      	movs	r7, #10
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	2a6f      	cmp	r2, #111	; 0x6f
 8003d14:	d117      	bne.n	8003d46 <_printf_i+0xfa>
 8003d16:	2708      	movs	r7, #8
 8003d18:	e015      	b.n	8003d46 <_printf_i+0xfa>
 8003d1a:	3145      	adds	r1, #69	; 0x45
 8003d1c:	700a      	strb	r2, [r1, #0]
 8003d1e:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <_printf_i+0x21c>)
 8003d20:	9203      	str	r2, [sp, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	ca20      	ldmia	r2!, {r5}
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	0608      	lsls	r0, r1, #24
 8003d2c:	d550      	bpl.n	8003dd0 <_printf_i+0x184>
 8003d2e:	07cb      	lsls	r3, r1, #31
 8003d30:	d502      	bpl.n	8003d38 <_printf_i+0xec>
 8003d32:	2320      	movs	r3, #32
 8003d34:	4319      	orrs	r1, r3
 8003d36:	6021      	str	r1, [r4, #0]
 8003d38:	2710      	movs	r7, #16
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d103      	bne.n	8003d46 <_printf_i+0xfa>
 8003d3e:	2320      	movs	r3, #32
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	439a      	bics	r2, r3
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	0023      	movs	r3, r4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	3343      	adds	r3, #67	; 0x43
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db03      	blt.n	8003d5e <_printf_i+0x112>
 8003d56:	2204      	movs	r2, #4
 8003d58:	6821      	ldr	r1, [r4, #0]
 8003d5a:	4391      	bics	r1, r2
 8003d5c:	6021      	str	r1, [r4, #0]
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	d102      	bne.n	8003d68 <_printf_i+0x11c>
 8003d62:	9e04      	ldr	r6, [sp, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <_printf_i+0x136>
 8003d68:	9e04      	ldr	r6, [sp, #16]
 8003d6a:	0028      	movs	r0, r5
 8003d6c:	0039      	movs	r1, r7
 8003d6e:	f7fc fa61 	bl	8000234 <__aeabi_uidivmod>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	3e01      	subs	r6, #1
 8003d76:	5c5b      	ldrb	r3, [r3, r1]
 8003d78:	7033      	strb	r3, [r6, #0]
 8003d7a:	002b      	movs	r3, r5
 8003d7c:	0005      	movs	r5, r0
 8003d7e:	429f      	cmp	r7, r3
 8003d80:	d9f3      	bls.n	8003d6a <_printf_i+0x11e>
 8003d82:	2f08      	cmp	r7, #8
 8003d84:	d109      	bne.n	8003d9a <_printf_i+0x14e>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	07db      	lsls	r3, r3, #31
 8003d8a:	d506      	bpl.n	8003d9a <_printf_i+0x14e>
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	6922      	ldr	r2, [r4, #16]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	dc02      	bgt.n	8003d9a <_printf_i+0x14e>
 8003d94:	2330      	movs	r3, #48	; 0x30
 8003d96:	3e01      	subs	r6, #1
 8003d98:	7033      	strb	r3, [r6, #0]
 8003d9a:	9b04      	ldr	r3, [sp, #16]
 8003d9c:	1b9b      	subs	r3, r3, r6
 8003d9e:	6123      	str	r3, [r4, #16]
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	0021      	movs	r1, r4
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	9805      	ldr	r0, [sp, #20]
 8003da8:	9b06      	ldr	r3, [sp, #24]
 8003daa:	aa09      	add	r2, sp, #36	; 0x24
 8003dac:	f7ff fede 	bl	8003b6c <_printf_common>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d135      	bne.n	8003e20 <_printf_i+0x1d4>
 8003db4:	2001      	movs	r0, #1
 8003db6:	4240      	negs	r0, r0
 8003db8:	b00b      	add	sp, #44	; 0x2c
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	0022      	movs	r2, r4
 8003dc6:	2178      	movs	r1, #120	; 0x78
 8003dc8:	3245      	adds	r2, #69	; 0x45
 8003dca:	7011      	strb	r1, [r2, #0]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <_printf_i+0x220>)
 8003dce:	e7a7      	b.n	8003d20 <_printf_i+0xd4>
 8003dd0:	0648      	lsls	r0, r1, #25
 8003dd2:	d5ac      	bpl.n	8003d2e <_printf_i+0xe2>
 8003dd4:	b2ad      	uxth	r5, r5
 8003dd6:	e7aa      	b.n	8003d2e <_printf_i+0xe2>
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	680d      	ldr	r5, [r1, #0]
 8003ddc:	1d10      	adds	r0, r2, #4
 8003dde:	6949      	ldr	r1, [r1, #20]
 8003de0:	6018      	str	r0, [r3, #0]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	062e      	lsls	r6, r5, #24
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0x1a0>
 8003de8:	6019      	str	r1, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <_printf_i+0x1a6>
 8003dec:	066d      	lsls	r5, r5, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0x19c>
 8003df0:	8019      	strh	r1, [r3, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9e04      	ldr	r6, [sp, #16]
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	e7d2      	b.n	8003da0 <_printf_i+0x154>
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	1d11      	adds	r1, r2, #4
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	6816      	ldr	r6, [r2, #0]
 8003e02:	2100      	movs	r1, #0
 8003e04:	0030      	movs	r0, r6
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	f000 f832 	bl	8003e70 <memchr>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d001      	beq.n	8003e14 <_printf_i+0x1c8>
 8003e10:	1b80      	subs	r0, r0, r6
 8003e12:	6060      	str	r0, [r4, #4]
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9a04      	ldr	r2, [sp, #16]
 8003e1c:	7013      	strb	r3, [r2, #0]
 8003e1e:	e7bf      	b.n	8003da0 <_printf_i+0x154>
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	0032      	movs	r2, r6
 8003e24:	9906      	ldr	r1, [sp, #24]
 8003e26:	9805      	ldr	r0, [sp, #20]
 8003e28:	9d07      	ldr	r5, [sp, #28]
 8003e2a:	47a8      	blx	r5
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d0c1      	beq.n	8003db4 <_printf_i+0x168>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	079b      	lsls	r3, r3, #30
 8003e34:	d415      	bmi.n	8003e62 <_printf_i+0x216>
 8003e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e38:	68e0      	ldr	r0, [r4, #12]
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	dabc      	bge.n	8003db8 <_printf_i+0x16c>
 8003e3e:	0018      	movs	r0, r3
 8003e40:	e7ba      	b.n	8003db8 <_printf_i+0x16c>
 8003e42:	0022      	movs	r2, r4
 8003e44:	2301      	movs	r3, #1
 8003e46:	9906      	ldr	r1, [sp, #24]
 8003e48:	9805      	ldr	r0, [sp, #20]
 8003e4a:	9e07      	ldr	r6, [sp, #28]
 8003e4c:	3219      	adds	r2, #25
 8003e4e:	47b0      	blx	r6
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d0af      	beq.n	8003db4 <_printf_i+0x168>
 8003e54:	3501      	adds	r5, #1
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	dcf0      	bgt.n	8003e42 <_printf_i+0x1f6>
 8003e60:	e7e9      	b.n	8003e36 <_printf_i+0x1ea>
 8003e62:	2500      	movs	r5, #0
 8003e64:	e7f7      	b.n	8003e56 <_printf_i+0x20a>
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	0800415d 	.word	0x0800415d
 8003e6c:	0800416e 	.word	0x0800416e

08003e70 <memchr>:
 8003e70:	b2c9      	uxtb	r1, r1
 8003e72:	1882      	adds	r2, r0, r2
 8003e74:	4290      	cmp	r0, r2
 8003e76:	d101      	bne.n	8003e7c <memchr+0xc>
 8003e78:	2000      	movs	r0, #0
 8003e7a:	4770      	bx	lr
 8003e7c:	7803      	ldrb	r3, [r0, #0]
 8003e7e:	428b      	cmp	r3, r1
 8003e80:	d0fb      	beq.n	8003e7a <memchr+0xa>
 8003e82:	3001      	adds	r0, #1
 8003e84:	e7f6      	b.n	8003e74 <memchr+0x4>

08003e86 <memcpy>:
 8003e86:	2300      	movs	r3, #0
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d100      	bne.n	8003e90 <memcpy+0xa>
 8003e8e:	bd10      	pop	{r4, pc}
 8003e90:	5ccc      	ldrb	r4, [r1, r3]
 8003e92:	54c4      	strb	r4, [r0, r3]
 8003e94:	3301      	adds	r3, #1
 8003e96:	e7f8      	b.n	8003e8a <memcpy+0x4>

08003e98 <memmove>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4288      	cmp	r0, r1
 8003e9c:	d902      	bls.n	8003ea4 <memmove+0xc>
 8003e9e:	188b      	adds	r3, r1, r2
 8003ea0:	4298      	cmp	r0, r3
 8003ea2:	d303      	bcc.n	8003eac <memmove+0x14>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e007      	b.n	8003eb8 <memmove+0x20>
 8003ea8:	5c8b      	ldrb	r3, [r1, r2]
 8003eaa:	5483      	strb	r3, [r0, r2]
 8003eac:	3a01      	subs	r2, #1
 8003eae:	d2fb      	bcs.n	8003ea8 <memmove+0x10>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	5ccc      	ldrb	r4, [r1, r3]
 8003eb4:	54c4      	strb	r4, [r0, r3]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1fa      	bne.n	8003eb2 <memmove+0x1a>
 8003ebc:	e7f8      	b.n	8003eb0 <memmove+0x18>
	...

08003ec0 <_free_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	0005      	movs	r5, r0
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	d010      	beq.n	8003eea <_free_r+0x2a>
 8003ec8:	1f0c      	subs	r4, r1, #4
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da00      	bge.n	8003ed2 <_free_r+0x12>
 8003ed0:	18e4      	adds	r4, r4, r3
 8003ed2:	0028      	movs	r0, r5
 8003ed4:	f000 f8d4 	bl	8004080 <__malloc_lock>
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <_free_r+0x90>)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <_free_r+0x2c>
 8003ee0:	6063      	str	r3, [r4, #4]
 8003ee2:	6014      	str	r4, [r2, #0]
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	f000 f8d3 	bl	8004090 <__malloc_unlock>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d908      	bls.n	8003f02 <_free_r+0x42>
 8003ef0:	6821      	ldr	r1, [r4, #0]
 8003ef2:	1860      	adds	r0, r4, r1
 8003ef4:	4283      	cmp	r3, r0
 8003ef6:	d1f3      	bne.n	8003ee0 <_free_r+0x20>
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	1841      	adds	r1, r0, r1
 8003efe:	6021      	str	r1, [r4, #0]
 8003f00:	e7ee      	b.n	8003ee0 <_free_r+0x20>
 8003f02:	001a      	movs	r2, r3
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <_free_r+0x4e>
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	d9f9      	bls.n	8003f02 <_free_r+0x42>
 8003f0e:	6811      	ldr	r1, [r2, #0]
 8003f10:	1850      	adds	r0, r2, r1
 8003f12:	42a0      	cmp	r0, r4
 8003f14:	d10b      	bne.n	8003f2e <_free_r+0x6e>
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	1809      	adds	r1, r1, r0
 8003f1a:	1850      	adds	r0, r2, r1
 8003f1c:	6011      	str	r1, [r2, #0]
 8003f1e:	4283      	cmp	r3, r0
 8003f20:	d1e0      	bne.n	8003ee4 <_free_r+0x24>
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	1841      	adds	r1, r0, r1
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	6053      	str	r3, [r2, #4]
 8003f2c:	e7da      	b.n	8003ee4 <_free_r+0x24>
 8003f2e:	42a0      	cmp	r0, r4
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x78>
 8003f32:	230c      	movs	r3, #12
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	e7d5      	b.n	8003ee4 <_free_r+0x24>
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	1860      	adds	r0, r4, r1
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	d103      	bne.n	8003f48 <_free_r+0x88>
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	1841      	adds	r1, r0, r1
 8003f46:	6021      	str	r1, [r4, #0]
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6054      	str	r4, [r2, #4]
 8003f4c:	e7ca      	b.n	8003ee4 <_free_r+0x24>
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	20000094 	.word	0x20000094

08003f54 <_malloc_r>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	2303      	movs	r3, #3
 8003f58:	1ccd      	adds	r5, r1, #3
 8003f5a:	439d      	bics	r5, r3
 8003f5c:	3508      	adds	r5, #8
 8003f5e:	0006      	movs	r6, r0
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	d21f      	bcs.n	8003fa4 <_malloc_r+0x50>
 8003f64:	250c      	movs	r5, #12
 8003f66:	42a9      	cmp	r1, r5
 8003f68:	d81e      	bhi.n	8003fa8 <_malloc_r+0x54>
 8003f6a:	0030      	movs	r0, r6
 8003f6c:	f000 f888 	bl	8004080 <__malloc_lock>
 8003f70:	4925      	ldr	r1, [pc, #148]	; (8004008 <_malloc_r+0xb4>)
 8003f72:	680a      	ldr	r2, [r1, #0]
 8003f74:	0014      	movs	r4, r2
 8003f76:	2c00      	cmp	r4, #0
 8003f78:	d11a      	bne.n	8003fb0 <_malloc_r+0x5c>
 8003f7a:	4f24      	ldr	r7, [pc, #144]	; (800400c <_malloc_r+0xb8>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <_malloc_r+0x38>
 8003f82:	0021      	movs	r1, r4
 8003f84:	0030      	movs	r0, r6
 8003f86:	f000 f869 	bl	800405c <_sbrk_r>
 8003f8a:	6038      	str	r0, [r7, #0]
 8003f8c:	0029      	movs	r1, r5
 8003f8e:	0030      	movs	r0, r6
 8003f90:	f000 f864 	bl	800405c <_sbrk_r>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d12b      	bne.n	8003ff0 <_malloc_r+0x9c>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	0030      	movs	r0, r6
 8003f9c:	6033      	str	r3, [r6, #0]
 8003f9e:	f000 f877 	bl	8004090 <__malloc_unlock>
 8003fa2:	e003      	b.n	8003fac <_malloc_r+0x58>
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	dade      	bge.n	8003f66 <_malloc_r+0x12>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	2000      	movs	r0, #0
 8003fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	1b5b      	subs	r3, r3, r5
 8003fb4:	d419      	bmi.n	8003fea <_malloc_r+0x96>
 8003fb6:	2b0b      	cmp	r3, #11
 8003fb8:	d903      	bls.n	8003fc2 <_malloc_r+0x6e>
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	18e4      	adds	r4, r4, r3
 8003fbe:	6025      	str	r5, [r4, #0]
 8003fc0:	e003      	b.n	8003fca <_malloc_r+0x76>
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	42a2      	cmp	r2, r4
 8003fc6:	d10e      	bne.n	8003fe6 <_malloc_r+0x92>
 8003fc8:	600b      	str	r3, [r1, #0]
 8003fca:	0030      	movs	r0, r6
 8003fcc:	f000 f860 	bl	8004090 <__malloc_unlock>
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	300b      	adds	r0, #11
 8003fd6:	1d23      	adds	r3, r4, #4
 8003fd8:	4390      	bics	r0, r2
 8003fda:	1ac2      	subs	r2, r0, r3
 8003fdc:	4298      	cmp	r0, r3
 8003fde:	d0e6      	beq.n	8003fae <_malloc_r+0x5a>
 8003fe0:	1a1b      	subs	r3, r3, r0
 8003fe2:	50a3      	str	r3, [r4, r2]
 8003fe4:	e7e3      	b.n	8003fae <_malloc_r+0x5a>
 8003fe6:	6053      	str	r3, [r2, #4]
 8003fe8:	e7ef      	b.n	8003fca <_malloc_r+0x76>
 8003fea:	0022      	movs	r2, r4
 8003fec:	6864      	ldr	r4, [r4, #4]
 8003fee:	e7c2      	b.n	8003f76 <_malloc_r+0x22>
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	1cc4      	adds	r4, r0, #3
 8003ff4:	439c      	bics	r4, r3
 8003ff6:	42a0      	cmp	r0, r4
 8003ff8:	d0e1      	beq.n	8003fbe <_malloc_r+0x6a>
 8003ffa:	1a21      	subs	r1, r4, r0
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	f000 f82d 	bl	800405c <_sbrk_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d1db      	bne.n	8003fbe <_malloc_r+0x6a>
 8004006:	e7c7      	b.n	8003f98 <_malloc_r+0x44>
 8004008:	20000094 	.word	0x20000094
 800400c:	20000098 	.word	0x20000098

08004010 <_realloc_r>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	0007      	movs	r7, r0
 8004014:	000d      	movs	r5, r1
 8004016:	0016      	movs	r6, r2
 8004018:	2900      	cmp	r1, #0
 800401a:	d105      	bne.n	8004028 <_realloc_r+0x18>
 800401c:	0011      	movs	r1, r2
 800401e:	f7ff ff99 	bl	8003f54 <_malloc_r>
 8004022:	0004      	movs	r4, r0
 8004024:	0020      	movs	r0, r4
 8004026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004028:	2a00      	cmp	r2, #0
 800402a:	d103      	bne.n	8004034 <_realloc_r+0x24>
 800402c:	f7ff ff48 	bl	8003ec0 <_free_r>
 8004030:	0034      	movs	r4, r6
 8004032:	e7f7      	b.n	8004024 <_realloc_r+0x14>
 8004034:	f000 f834 	bl	80040a0 <_malloc_usable_size_r>
 8004038:	002c      	movs	r4, r5
 800403a:	42b0      	cmp	r0, r6
 800403c:	d2f2      	bcs.n	8004024 <_realloc_r+0x14>
 800403e:	0031      	movs	r1, r6
 8004040:	0038      	movs	r0, r7
 8004042:	f7ff ff87 	bl	8003f54 <_malloc_r>
 8004046:	1e04      	subs	r4, r0, #0
 8004048:	d0ec      	beq.n	8004024 <_realloc_r+0x14>
 800404a:	0029      	movs	r1, r5
 800404c:	0032      	movs	r2, r6
 800404e:	f7ff ff1a 	bl	8003e86 <memcpy>
 8004052:	0029      	movs	r1, r5
 8004054:	0038      	movs	r0, r7
 8004056:	f7ff ff33 	bl	8003ec0 <_free_r>
 800405a:	e7e3      	b.n	8004024 <_realloc_r+0x14>

0800405c <_sbrk_r>:
 800405c:	2300      	movs	r3, #0
 800405e:	b570      	push	{r4, r5, r6, lr}
 8004060:	4d06      	ldr	r5, [pc, #24]	; (800407c <_sbrk_r+0x20>)
 8004062:	0004      	movs	r4, r0
 8004064:	0008      	movs	r0, r1
 8004066:	602b      	str	r3, [r5, #0]
 8004068:	f7fc fb82 	bl	8000770 <_sbrk>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d103      	bne.n	8004078 <_sbrk_r+0x1c>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d000      	beq.n	8004078 <_sbrk_r+0x1c>
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	2000013c 	.word	0x2000013c

08004080 <__malloc_lock>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4802      	ldr	r0, [pc, #8]	; (800408c <__malloc_lock+0xc>)
 8004084:	f000 f814 	bl	80040b0 <__retarget_lock_acquire_recursive>
 8004088:	bd10      	pop	{r4, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	20000144 	.word	0x20000144

08004090 <__malloc_unlock>:
 8004090:	b510      	push	{r4, lr}
 8004092:	4802      	ldr	r0, [pc, #8]	; (800409c <__malloc_unlock+0xc>)
 8004094:	f000 f80d 	bl	80040b2 <__retarget_lock_release_recursive>
 8004098:	bd10      	pop	{r4, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000144 	.word	0x20000144

080040a0 <_malloc_usable_size_r>:
 80040a0:	1f0b      	subs	r3, r1, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1f18      	subs	r0, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da01      	bge.n	80040ae <_malloc_usable_size_r+0xe>
 80040aa:	580b      	ldr	r3, [r1, r0]
 80040ac:	18c0      	adds	r0, r0, r3
 80040ae:	4770      	bx	lr

080040b0 <__retarget_lock_acquire_recursive>:
 80040b0:	4770      	bx	lr

080040b2 <__retarget_lock_release_recursive>:
 80040b2:	4770      	bx	lr

080040b4 <_init>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr

080040c0 <_fini>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr
