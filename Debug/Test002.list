
Test002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003524  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003658  08003658  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003660  08003660  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003674  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003674  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be10  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a08  00000000  00000000  0002be44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149ba  00000000  00000000  0002e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a71a  00000000  00000000  00043252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c38  00000000  00000000  0004d96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d15a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d2c  00000000  00000000  000d15f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080035c8 	.word	0x080035c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080035c8 	.word	0x080035c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	1c08      	adds	r0, r1, #0
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 f974 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f810 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f88a 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f854 	bl	8000504 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT ( &huart2 , uart_rx_buff , 1 ) ;
 800045c:	4903      	ldr	r1, [pc, #12]	; (800046c <main+0x24>)
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <main+0x28>)
 8000460:	2201      	movs	r2, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fa68 	bl	8001938 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	e7fe      	b.n	8000468 <main+0x20>
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	200000b8 	.word	0x200000b8
 8000470:	20000028 	.word	0x20000028

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b093      	sub	sp, #76	; 0x4c
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	2410      	movs	r4, #16
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2338      	movs	r3, #56	; 0x38
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f003 f897 	bl	80035b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	003b      	movs	r3, r7
 800048c:	0018      	movs	r0, r3
 800048e:	2310      	movs	r3, #16
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f003 f890 	bl	80035b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fcdf 	bl	8000e60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2240      	movs	r2, #64	; 0x40
 80004ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fd17 	bl	8000ef8 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ce:	f000 f863 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2100      	movs	r1, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f822 	bl	8001538 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f8:	f000 f84e 	bl	8000598 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	; 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_USART2_UART_Init+0x60>)
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_USART2_UART_Init+0x64>)
 800050c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000510:	2296      	movs	r2, #150	; 0x96
 8000512:	0192      	lsls	r2, r2, #6
 8000514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART2_UART_Init+0x60>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART2_UART_Init+0x60>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_USART2_UART_Init+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <MX_USART2_UART_Init+0x60>)
 8000548:	2200      	movs	r2, #0
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MX_USART2_UART_Init+0x60>)
 800054e:	0018      	movs	r0, r3
 8000550:	f001 f99c 	bl	800188c <HAL_UART_Init>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000558:	f000 f81e 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000028 	.word	0x20000028
 8000568:	40004400 	.word	0x40004400

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_GPIO_Init+0x28>)
 8000574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_GPIO_Init+0x28>)
 8000578:	2101      	movs	r1, #1
 800057a:	430a      	orrs	r2, r1
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MX_GPIO_Init+0x28>)
 8000580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	641a      	str	r2, [r3, #64]	; 0x40
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0549      	lsls	r1, r1, #21
 80005cc:	430a      	orrs	r2, r1
 80005ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_MspInit+0x44>)
 80005d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	055b      	lsls	r3, r3, #21
 80005d8:	4013      	ands	r3, r2
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	2414      	movs	r4, #20
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f002 ffda 	bl	80035b8 <memset>
  if(huart->Instance==USART2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <HAL_UART_MspInit+0x9c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d138      	bne.n	8000680 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	63da      	str	r2, [r3, #60]	; 0x3c
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_UART_MspInit+0xa0>)
 800061e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0xa0>)
 800062c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_UART_MspInit+0xa0>)
 8000638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	220c      	movs	r2, #12
 8000648:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2202      	movs	r2, #2
 800064e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2201      	movs	r2, #1
 8000660:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	187a      	adds	r2, r7, r1
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fa94 	bl	8000b98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	201c      	movs	r0, #28
 8000676:	f000 f991 	bl	800099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800067a:	201c      	movs	r0, #28
 800067c:	f000 f9a3 	bl	80009c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b00b      	add	sp, #44	; 0x2c
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f8aa 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <USART2_IRQHandler+0x14>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 f9a0 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	20000028 	.word	0x20000028

080006d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff fff6 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000712:	f002 ff2d 	bl	8003570 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000716:	f7ff fe97 	bl	8000448 <main>

0800071a <LoopForever>:

LoopForever:
  b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000728:	08003668 	.word	0x08003668
  ldr r2, =_sbss
 800072c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000730:	200000c0 	.word	0x200000c0

08000734 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_IRQHandler>
	...

08000738 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <HAL_Init+0x3c>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_Init+0x3c>)
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	0049      	lsls	r1, r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000752:	2003      	movs	r0, #3
 8000754:	f000 f810 	bl	8000778 <HAL_InitTick>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d003      	beq.n	8000764 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	e001      	b.n	8000768 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff ff1e 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000780:	230f      	movs	r3, #15
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <HAL_InitTick+0x88>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d02b      	beq.n	80007e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_InitTick+0x8c>)
 8000792:	681c      	ldr	r4, [r3, #0]
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_InitTick+0x88>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	0019      	movs	r1, r3
 800079a:	23fa      	movs	r3, #250	; 0xfa
 800079c:	0098      	lsls	r0, r3, #2
 800079e:	f7ff fcb1 	bl	8000104 <__udivsi3>
 80007a2:	0003      	movs	r3, r0
 80007a4:	0019      	movs	r1, r3
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff fcac 	bl	8000104 <__udivsi3>
 80007ac:	0003      	movs	r3, r0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f919 	bl	80009e6 <HAL_SYSTICK_Config>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d112      	bne.n	80007de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d80a      	bhi.n	80007d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	2301      	movs	r3, #1
 80007c2:	425b      	negs	r3, r3
 80007c4:	2200      	movs	r2, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f8e8 	bl	800099c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_InitTick+0x90>)
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e00d      	b.n	80007f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e008      	b.n	80007f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e003      	b.n	80007f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007e8:	230f      	movs	r3, #15
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	781b      	ldrb	r3, [r3, #0]
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b005      	add	sp, #20
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000008 	.word	0x20000008
 8000804:	20000000 	.word	0x20000000
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	001a      	movs	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	18d2      	adds	r2, r2, r3
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000008 	.word	0x20000008
 800082c:	200000bc 	.word	0x200000bc

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200000bc 	.word	0x200000bc

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	0002      	movs	r2, r0
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b7f      	cmp	r3, #127	; 0x7f
 8000856:	d809      	bhi.n	800086c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	231f      	movs	r3, #31
 8000860:	401a      	ands	r2, r3
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <__NVIC_EnableIRQ+0x30>)
 8000864:	2101      	movs	r1, #1
 8000866:	4091      	lsls	r1, r2
 8000868:	000a      	movs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	; 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	429a      	cmp	r2, r3
 8000966:	d301      	bcc.n	800096c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000968:	2301      	movs	r3, #1
 800096a:	e010      	b.n	800098e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SysTick_Config+0x44>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	3a01      	subs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff7c 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x44>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	0002      	movs	r2, r0
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff ff33 	bl	8000844 <__NVIC_EnableIRQ>
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ffaf 	bl	8000954 <SysTick_Config>
 80009f6:	0003      	movs	r3, r0
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e050      	b.n	8000ab4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2225      	movs	r2, #37	; 0x25
 8000a16:	5c9b      	ldrb	r3, [r3, r2]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d008      	beq.n	8000a30 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2204      	movs	r2, #4
 8000a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2224      	movs	r2, #36	; 0x24
 8000a28:	2100      	movs	r1, #0
 8000a2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e041      	b.n	8000ab4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	210e      	movs	r1, #14
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	491c      	ldr	r1, [pc, #112]	; (8000abc <HAL_DMA_Abort+0xbc>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	438a      	bics	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_DMA_Abort+0xc0>)
 8000a62:	6859      	ldr	r1, [r3, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	221c      	movs	r2, #28
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_DMA_Abort+0xc0>)
 8000a72:	430a      	orrs	r2, r1
 8000a74:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00c      	beq.n	8000aa2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a92:	490a      	ldr	r1, [pc, #40]	; (8000abc <HAL_DMA_Abort+0xbc>)
 8000a94:	400a      	ands	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000aa0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2225      	movs	r2, #37	; 0x25
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2224      	movs	r2, #36	; 0x24
 8000aae:	2100      	movs	r1, #0
 8000ab0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	fffffeff 	.word	0xfffffeff
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000acc:	210f      	movs	r1, #15
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2225      	movs	r2, #37	; 0x25
 8000ad8:	5c9b      	ldrb	r3, [r3, r2]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d006      	beq.n	8000aee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e049      	b.n	8000b82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	210e      	movs	r1, #14
 8000afa:	438a      	bics	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b18:	491d      	ldr	r1, [pc, #116]	; (8000b90 <HAL_DMA_Abort_IT+0xcc>)
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_DMA_Abort_IT+0xd0>)
 8000b20:	6859      	ldr	r1, [r3, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	221c      	movs	r2, #28
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_DMA_Abort_IT+0xd0>)
 8000b30:	430a      	orrs	r2, r1
 8000b32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000b3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00c      	beq.n	8000b60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b50:	490f      	ldr	r1, [pc, #60]	; (8000b90 <HAL_DMA_Abort_IT+0xcc>)
 8000b52:	400a      	ands	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000b5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2225      	movs	r2, #37	; 0x25
 8000b64:	2101      	movs	r1, #1
 8000b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2224      	movs	r2, #36	; 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	0010      	movs	r0, r2
 8000b80:	4798      	blx	r3
    }
  }
  return status;
 8000b82:	230f      	movs	r3, #15
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	781b      	ldrb	r3, [r3, #0]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	fffffeff 	.word	0xfffffeff
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e147      	b.n	8000e38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x28>
 8000bbe:	e138      	b.n	8000e32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	2201      	movs	r2, #1
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	409a      	lsls	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	43da      	mvns	r2, r3
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	58d3      	ldr	r3, [r2, r3]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	2207      	movs	r2, #7
 8000c94:	4013      	ands	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2107      	movs	r1, #7
 8000cae:	400b      	ands	r3, r1
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	6939      	ldr	r1, [r7, #16]
 8000cc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	4013      	ands	r3, r2
 8000d08:	d100      	bne.n	8000d0c <HAL_GPIO_Init+0x174>
 8000d0a:	e092      	b.n	8000e32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3318      	adds	r3, #24
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	589b      	ldr	r3, [r3, r2]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	220f      	movs	r2, #15
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	23a0      	movs	r3, #160	; 0xa0
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x1ca>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x1c6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_GPIO_Init+0x2c0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x1c2>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <HAL_GPIO_Init+0x2c4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x1be>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x1cc>
 8000d62:	2300      	movs	r3, #0
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	2103      	movs	r1, #3
 8000d68:	400a      	ands	r2, r1
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d74:	4936      	ldr	r1, [pc, #216]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3318      	adds	r3, #24
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d82:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	58d3      	ldr	r3, [r2, r3]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	025b      	lsls	r3, r3, #9
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000da8:	4929      	ldr	r1, [pc, #164]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000db2:	2384      	movs	r3, #132	; 0x84
 8000db4:	58d3      	ldr	r3, [r2, r3]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd6:	491e      	ldr	r1, [pc, #120]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000dd8:	2284      	movs	r2, #132	; 0x84
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43da      	mvns	r2, r3
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	035b      	lsls	r3, r3, #13
 8000df6:	4013      	ands	r3, r2
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	039b      	lsls	r3, r3, #14
 8000e20:	4013      	ands	r3, r2
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	40da      	lsrs	r2, r3
 8000e40:	1e13      	subs	r3, r2, #0
 8000e42:	d000      	beq.n	8000e46 <HAL_GPIO_Init+0x2ae>
 8000e44:	e6b0      	b.n	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b006      	add	sp, #24
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021800 	.word	0x40021800
 8000e54:	50000400 	.word	0x50000400
 8000e58:	50000800 	.word	0x50000800
 8000e5c:	50000c00 	.word	0x50000c00

08000e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d11f      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	0013      	movs	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4912      	ldr	r1, [pc, #72]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff f936 	bl	8000104 <__udivsi3>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e9e:	e008      	b.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e001      	b.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e009      	b.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d0ed      	beq.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40007000 	.word	0x40007000
 8000ed4:	fffff9ff 	.word	0xfffff9ff
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	000f4240 	.word	0x000f4240

08000ee0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	23e0      	movs	r3, #224	; 0xe0
 8000eea:	01db      	lsls	r3, r3, #7
 8000eec:	4013      	ands	r3, r2
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e304      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	d100      	bne.n	8000f16 <HAL_RCC_OscConfig+0x1e>
 8000f14:	e07c      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f16:	4bc3      	ldr	r3, [pc, #780]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2238      	movs	r2, #56	; 0x38
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f20:	4bc0      	ldr	r3, [pc, #768]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d102      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3e>
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d002      	beq.n	8000f3c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4bb9      	ldr	r3, [pc, #740]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d062      	beq.n	800100e <HAL_RCC_OscConfig+0x116>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d15e      	bne.n	800100e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e2df      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x78>
 8000f60:	4bb0      	ldr	r3, [pc, #704]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4baf      	ldr	r3, [pc, #700]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e020      	b.n	8000fb2 <HAL_RCC_OscConfig+0xba>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	02db      	lsls	r3, r3, #11
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d10e      	bne.n	8000f9a <HAL_RCC_OscConfig+0xa2>
 8000f7c:	4ba9      	ldr	r3, [pc, #676]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4ba8      	ldr	r3, [pc, #672]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	02c9      	lsls	r1, r1, #11
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4ba5      	ldr	r3, [pc, #660]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0249      	lsls	r1, r1, #9
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e00b      	b.n	8000fb2 <HAL_RCC_OscConfig+0xba>
 8000f9a:	4ba2      	ldr	r3, [pc, #648]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba1      	ldr	r3, [pc, #644]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	49a1      	ldr	r1, [pc, #644]	; (8001228 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4b9f      	ldr	r3, [pc, #636]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	499f      	ldr	r1, [pc, #636]	; (800122c <HAL_RCC_OscConfig+0x334>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc39 	bl	8000830 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fc34 	bl	8000830 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e29e      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd6:	4b93      	ldr	r3, [pc, #588]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xcc>
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc24 	bl	8000830 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fc1f 	bl	8000830 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e289      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001000:	4b88      	ldr	r3, [pc, #544]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0xf6>
 800100c:	e000      	b.n	8001010 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_RCC_OscConfig+0x124>
 800101a:	e099      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2238      	movs	r2, #56	; 0x38
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001026:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b10      	cmp	r3, #16
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x144>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d002      	beq.n	8001042 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d135      	bne.n	80010ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001042:	4b78      	ldr	r3, [pc, #480]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4013      	ands	r3, r2
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x162>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e25c      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b72      	ldr	r3, [pc, #456]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a74      	ldr	r2, [pc, #464]	; (8001230 <HAL_RCC_OscConfig+0x338>)
 8001060:	4013      	ands	r3, r2
 8001062:	0019      	movs	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	021a      	lsls	r2, r3, #8
 800106a:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800106c:	430a      	orrs	r2, r1
 800106e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d112      	bne.n	800109c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001076:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6e      	ldr	r2, [pc, #440]	; (8001234 <HAL_RCC_OscConfig+0x33c>)
 800107c:	4013      	ands	r3, r2
 800107e:	0019      	movs	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800108a:	4b66      	ldr	r3, [pc, #408]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0adb      	lsrs	r3, r3, #11
 8001090:	2207      	movs	r2, #7
 8001092:	4013      	ands	r3, r2
 8001094:	4a68      	ldr	r2, [pc, #416]	; (8001238 <HAL_RCC_OscConfig+0x340>)
 8001096:	40da      	lsrs	r2, r3
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <HAL_RCC_OscConfig+0x344>)
 800109a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <HAL_RCC_OscConfig+0x348>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fb69 	bl	8000778 <HAL_InitTick>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d051      	beq.n	800114e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e232      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d030      	beq.n	8001118 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5e      	ldr	r2, [pc, #376]	; (8001234 <HAL_RCC_OscConfig+0x33c>)
 80010bc:	4013      	ands	r3, r2
 80010be:	0019      	movs	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	4b57      	ldr	r3, [pc, #348]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b55      	ldr	r3, [pc, #340]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fbaa 	bl	8000830 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fba5 	bl	8000830 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e20f      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_RCC_OscConfig+0x338>)
 8001106:	4013      	ands	r3, r2
 8001108:	0019      	movs	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	021a      	lsls	r2, r3, #8
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	e01b      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b41      	ldr	r3, [pc, #260]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800111e:	4949      	ldr	r1, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x34c>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb84 	bl	8000830 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fb7f 	bl	8000830 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1e9      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4013      	ands	r3, r2
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x236>
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2208      	movs	r2, #8
 8001156:	4013      	ands	r3, r2
 8001158:	d047      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	; 0x38
 8001160:	4013      	ands	r3, r2
 8001162:	2b18      	cmp	r3, #24
 8001164:	d10a      	bne.n	800117c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d03c      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f2>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d138      	bne.n	80011ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e1cb      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d019      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fb4e 	bl	8000830 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff fb49 	bl	8000830 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1b3      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f1      	beq.n	800119a <HAL_RCC_OscConfig+0x2a2>
 80011b6:	e018      	b.n	80011ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011be:	2101      	movs	r1, #1
 80011c0:	438a      	bics	r2, r1
 80011c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fb34 	bl	8000830 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fb2f 	bl	8000830 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e199      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d1f1      	bne.n	80011ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2204      	movs	r2, #4
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x2fe>
 80011f4:	e0c6      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	231f      	movs	r3, #31
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2238      	movs	r2, #56	; 0x38
 8001204:	4013      	ands	r3, r2
 8001206:	2b20      	cmp	r3, #32
 8001208:	d11e      	bne.n	8001248 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_RCC_OscConfig+0x32c>)
 800120c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120e:	2202      	movs	r2, #2
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x31e>
 8001214:	e0b6      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d000      	beq.n	8001220 <HAL_RCC_OscConfig+0x328>
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e177      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
 8001224:	40021000 	.word	0x40021000
 8001228:	fffeffff 	.word	0xfffeffff
 800122c:	fffbffff 	.word	0xfffbffff
 8001230:	ffff80ff 	.word	0xffff80ff
 8001234:	ffffc7ff 	.word	0xffffc7ff
 8001238:	00f42400 	.word	0x00f42400
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004
 8001244:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001248:	4bb4      	ldr	r3, [pc, #720]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800124a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	4013      	ands	r3, r2
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x360>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x362>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d011      	beq.n	8001282 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4baf      	ldr	r3, [pc, #700]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001262:	4bae      	ldr	r3, [pc, #696]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	0549      	lsls	r1, r1, #21
 8001268:	430a      	orrs	r2, r1
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
 800126c:	4bab      	ldr	r3, [pc, #684]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800126e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	055b      	lsls	r3, r3, #21
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800127a:	231f      	movs	r3, #31
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001282:	4ba7      	ldr	r3, [pc, #668]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4013      	ands	r3, r2
 800128c:	d11a      	bne.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800128e:	4ba4      	ldr	r3, [pc, #656]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0049      	lsls	r1, r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800129c:	f7ff fac8 	bl	8000830 <HAL_GetTick>
 80012a0:	0003      	movs	r3, r0
 80012a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fac3 	bl	8000830 <HAL_GetTick>
 80012aa:	0002      	movs	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e12d      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b8:	4b99      	ldr	r3, [pc, #612]	; (8001520 <HAL_RCC_OscConfig+0x628>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4013      	ands	r3, r2
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x3e2>
 80012cc:	4b93      	ldr	r3, [pc, #588]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d0:	4b92      	ldr	r3, [pc, #584]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80012d8:	e01c      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x404>
 80012e2:	4b8e      	ldr	r3, [pc, #568]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012e8:	2104      	movs	r1, #4
 80012ea:	430a      	orrs	r2, r1
 80012ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ee:	4b8b      	ldr	r3, [pc, #556]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f2:	4b8a      	ldr	r3, [pc, #552]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
 80012fc:	4b87      	ldr	r3, [pc, #540]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80012fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001300:	4b86      	ldr	r3, [pc, #536]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	65da      	str	r2, [r3, #92]	; 0x5c
 8001308:	4b84      	ldr	r3, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800130a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800130c:	4b83      	ldr	r3, [pc, #524]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800130e:	2104      	movs	r1, #4
 8001310:	438a      	bics	r2, r1
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d014      	beq.n	8001346 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fa88 	bl	8000830 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fa83 	bl	8000830 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a7c      	ldr	r2, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x62c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0ec      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800133a:	4b78      	ldr	r3, [pc, #480]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x42e>
 8001344:	e013      	b.n	800136e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fa73 	bl	8000830 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800134e:	e009      	b.n	8001364 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fa6e 	bl	8000830 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a72      	ldr	r2, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x62c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e0d7      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001364:	4b6d      	ldr	r3, [pc, #436]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800136e:	231f      	movs	r3, #31
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800137a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800137c:	4b67      	ldr	r3, [pc, #412]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800137e:	496a      	ldr	r1, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x630>)
 8001380:	400a      	ands	r2, r1
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x496>
 800138c:	e0c1      	b.n	8001512 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	; 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	2b10      	cmp	r3, #16
 8001398:	d100      	bne.n	800139c <HAL_RCC_OscConfig+0x4a4>
 800139a:	e081      	b.n	80014a0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d156      	bne.n	8001452 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a4:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80013aa:	4960      	ldr	r1, [pc, #384]	; (800152c <HAL_RCC_OscConfig+0x634>)
 80013ac:	400a      	ands	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa3e 	bl	8000830 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fa39 	bl	8000830 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e0a3      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	049b      	lsls	r3, r3, #18
 80013d4:	4013      	ands	r3, r2
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_RCC_OscConfig+0x638>)
 80013de:	4013      	ands	r3, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1a      	ldr	r2, [r3, #32]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001404:	431a      	orrs	r2, r3
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001408:	430a      	orrs	r2, r1
 800140a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	0449      	lsls	r1, r1, #17
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0549      	lsls	r1, r1, #21
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fa02 	bl	8000830 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f9fd 	bl	8000830 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e067      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	049b      	lsls	r3, r3, #18
 800144c:	4013      	ands	r3, r2
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x53a>
 8001450:	e05f      	b.n	8001512 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001458:	4934      	ldr	r1, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x634>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001464:	2103      	movs	r1, #3
 8001466:	438a      	bics	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_RCC_OscConfig+0x624>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001470:	4930      	ldr	r1, [pc, #192]	; (8001534 <HAL_RCC_OscConfig+0x63c>)
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff f9db 	bl	8000830 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff f9d6 	bl	8000830 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e040      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x624>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	049b      	lsls	r3, r3, #18
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x588>
 800149e:	e038      	b.n	8001512 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e033      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x624>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2203      	movs	r2, #3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d126      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2270      	movs	r2, #112	; 0x70
 80014c4:	401a      	ands	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d11f      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	23fe      	movs	r3, #254	; 0xfe
 80014d2:	01db      	lsls	r3, r3, #7
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	23f8      	movs	r3, #248	; 0xf8
 80014e4:	039b      	lsls	r3, r3, #14
 80014e6:	401a      	ands	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d10e      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	23e0      	movs	r3, #224	; 0xe0
 80014f4:	051b      	lsls	r3, r3, #20
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	0f5b      	lsrs	r3, r3, #29
 8001504:	075a      	lsls	r2, r3, #29
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b008      	add	sp, #32
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	40007000 	.word	0x40007000
 8001524:	00001388 	.word	0x00001388
 8001528:	efffffff 	.word	0xefffffff
 800152c:	feffffff 	.word	0xfeffffff
 8001530:	11c1808c 	.word	0x11c1808c
 8001534:	eefeffff 	.word	0xeefeffff

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0e9      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2207      	movs	r2, #7
 8001552:	4013      	ands	r3, r2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d91e      	bls.n	8001598 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b73      	ldr	r3, [pc, #460]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2207      	movs	r2, #7
 8001560:	4393      	bics	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	4b70      	ldr	r3, [pc, #448]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800156c:	f7ff f960 	bl	8000830 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001574:	e009      	b.n	800158a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001576:	f7ff f95b 	bl	8000830 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a6a      	ldr	r2, [pc, #424]	; (800172c <HAL_RCC_ClockConfig+0x1f4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0ca      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800158a:	4b67      	ldr	r3, [pc, #412]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2207      	movs	r2, #7
 8001590:	4013      	ands	r3, r2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d015      	beq.n	80015ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d006      	beq.n	80015ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015b2:	21e0      	movs	r1, #224	; 0xe0
 80015b4:	01c9      	lsls	r1, r1, #7
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <HAL_RCC_ClockConfig+0x1fc>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	d057      	beq.n	8001688 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d12b      	bne.n	8001644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e097      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f8:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	049b      	lsls	r3, r3, #18
 8001600:	4013      	ands	r3, r2
 8001602:	d11f      	bne.n	8001644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e08b      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4013      	ands	r3, r2
 800161a:	d113      	bne.n	8001644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e07f      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d106      	bne.n	8001636 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d108      	bne.n	8001644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e074      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e06d      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2207      	movs	r2, #7
 800164a:	4393      	bics	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001658:	f7ff f8ea 	bl	8000830 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001660:	e009      	b.n	8001676 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff f8e5 	bl	8000830 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a2f      	ldr	r2, [pc, #188]	; (800172c <HAL_RCC_ClockConfig+0x1f4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e054      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	; 0x38
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	429a      	cmp	r2, r3
 8001686:	d1ec      	bne.n	8001662 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2207      	movs	r2, #7
 800168e:	4013      	ands	r3, r2
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d21e      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2207      	movs	r2, #7
 800169c:	4393      	bics	r3, r2
 800169e:	0019      	movs	r1, r3
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016a8:	f7ff f8c2 	bl	8000830 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b0:	e009      	b.n	80016c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b2:	f7ff f8bd 	bl	8000830 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_RCC_ClockConfig+0x1f4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e02c      	b.n	8001720 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2204      	movs	r2, #4
 80016da:	4013      	ands	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_RCC_ClockConfig+0x200>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016f2:	f000 f829 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 80016f6:	0001      	movs	r1, r0
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	220f      	movs	r2, #15
 8001700:	401a      	ands	r2, r3
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_RCC_ClockConfig+0x204>)
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	58d3      	ldr	r3, [r2, r3]
 8001708:	221f      	movs	r2, #31
 800170a:	4013      	ands	r3, r2
 800170c:	000a      	movs	r2, r1
 800170e:	40da      	lsrs	r2, r3
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x208>)
 8001712:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_ClockConfig+0x20c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff f82d 	bl	8000778 <HAL_InitTick>
 800171e:	0003      	movs	r3, r0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000
 800172c:	00001388 	.word	0x00001388
 8001730:	40021000 	.word	0x40021000
 8001734:	fffff0ff 	.word	0xfffff0ff
 8001738:	ffff8fff 	.word	0xffff8fff
 800173c:	080035e0 	.word	0x080035e0
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2238      	movs	r2, #56	; 0x38
 8001754:	4013      	ands	r3, r2
 8001756:	d10f      	bne.n	8001778 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0adb      	lsrs	r3, r3, #11
 800175e:	2207      	movs	r2, #7
 8001760:	4013      	ands	r3, r2
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <HAL_RCC_GetSysClockFreq+0xfc>)
 800176e:	f7fe fcc9 	bl	8000104 <__udivsi3>
 8001772:	0003      	movs	r3, r0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e05d      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2238      	movs	r2, #56	; 0x38
 800177e:	4013      	ands	r3, r2
 8001780:	2b08      	cmp	r3, #8
 8001782:	d102      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001784:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_GetSysClockFreq+0x100>)
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	e054      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2238      	movs	r2, #56	; 0x38
 8001790:	4013      	ands	r3, r2
 8001792:	2b10      	cmp	r3, #16
 8001794:	d138      	bne.n	8001808 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2203      	movs	r2, #3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	2207      	movs	r2, #7
 80017a8:	4013      	ands	r3, r2
 80017aa:	3301      	adds	r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d10d      	bne.n	80017d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	4824      	ldr	r0, [pc, #144]	; (8001848 <HAL_RCC_GetSysClockFreq+0x100>)
 80017b8:	f7fe fca4 	bl	8000104 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	0019      	movs	r1, r3
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	227f      	movs	r2, #127	; 0x7f
 80017c8:	4013      	ands	r3, r2
 80017ca:	434b      	muls	r3, r1
 80017cc:	617b      	str	r3, [r7, #20]
        break;
 80017ce:	e00d      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	481c      	ldr	r0, [pc, #112]	; (8001844 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017d4:	f7fe fc96 	bl	8000104 <__udivsi3>
 80017d8:	0003      	movs	r3, r0
 80017da:	0019      	movs	r1, r3
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	227f      	movs	r2, #127	; 0x7f
 80017e4:	4013      	ands	r3, r2
 80017e6:	434b      	muls	r3, r1
 80017e8:	617b      	str	r3, [r7, #20]
        break;
 80017ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0f5b      	lsrs	r3, r3, #29
 80017f2:	2207      	movs	r2, #7
 80017f4:	4013      	ands	r3, r2
 80017f6:	3301      	adds	r3, #1
 80017f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7fe fc81 	bl	8000104 <__udivsi3>
 8001802:	0003      	movs	r3, r0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e015      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2238      	movs	r2, #56	; 0x38
 800180e:	4013      	ands	r3, r2
 8001810:	2b20      	cmp	r3, #32
 8001812:	d103      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2238      	movs	r2, #56	; 0x38
 8001822:	4013      	ands	r3, r2
 8001824:	2b18      	cmp	r3, #24
 8001826:	d103      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001828:	23fa      	movs	r3, #250	; 0xfa
 800182a:	01db      	lsls	r3, r3, #7
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e001      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001834:	693b      	ldr	r3, [r7, #16]
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b006      	add	sp, #24
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	00f42400 	.word	0x00f42400
 8001848:	007a1200 	.word	0x007a1200

0800184c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_RCC_GetHCLKFreq+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001864:	f7ff fff2 	bl	800184c <HAL_RCC_GetHCLKFreq>
 8001868:	0004      	movs	r4, r0
 800186a:	f7ff fb39 	bl	8000ee0 <LL_RCC_GetAPB1Prescaler>
 800186e:	0003      	movs	r3, r0
 8001870:	0b1a      	lsrs	r2, r3, #12
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	58d3      	ldr	r3, [r2, r3]
 8001878:	221f      	movs	r2, #31
 800187a:	4013      	ands	r3, r2
 800187c:	40dc      	lsrs	r4, r3
 800187e:	0023      	movs	r3, r4
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	08003620 	.word	0x08003620

0800188c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e046      	b.n	800192c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2284      	movs	r2, #132	; 0x84
 80018a2:	589b      	ldr	r3, [r3, r2]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7fe fe9a 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2284      	movs	r2, #132	; 0x84
 80018bc:	2124      	movs	r1, #36	; 0x24
 80018be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fbd8 	bl	8002088 <UART_SetConfig>
 80018d8:	0003      	movs	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e024      	b.n	800192c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 fe5b 	bl	80025a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	490d      	ldr	r1, [pc, #52]	; (8001934 <HAL_UART_Init+0xa8>)
 80018fe:	400a      	ands	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	212a      	movs	r1, #42	; 0x2a
 800190e:	438a      	bics	r2, r1
 8001910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fef3 	bl	8002710 <UART_CheckIdleState>
 800192a:	0003      	movs	r3, r0
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}
 8001934:	ffffb7ff 	.word	0xffffb7ff

08001938 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	1dbb      	adds	r3, r7, #6
 8001944:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2288      	movs	r2, #136	; 0x88
 800194a:	589b      	ldr	r3, [r3, r2]
 800194c:	2b20      	cmp	r3, #32
 800194e:	d155      	bne.n	80019fc <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_UART_Receive_IT+0x26>
 8001956:	1dbb      	adds	r3, r7, #6
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e04d      	b.n	80019fe <HAL_UART_Receive_IT+0xc6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	429a      	cmp	r2, r3
 800196c:	d109      	bne.n	8001982 <HAL_UART_Receive_IT+0x4a>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	d001      	beq.n	8001982 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e03d      	b.n	80019fe <HAL_UART_Receive_IT+0xc6>
      }
    }

    __HAL_LOCK(huart);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_UART_Receive_IT+0x58>
 800198c:	2302      	movs	r3, #2
 800198e:	e036      	b.n	80019fe <HAL_UART_Receive_IT+0xc6>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	2101      	movs	r1, #1
 8001996:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_UART_Receive_IT+0xd0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d020      	beq.n	80019ea <HAL_UART_Receive_IT+0xb2>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	4013      	ands	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_UART_Receive_IT+0xb2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019b6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ba:	613b      	str	r3, [r7, #16]
  return(result);
 80019bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f383 8810 	msr	PRIMASK, r3
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	04c9      	lsls	r1, r1, #19
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f383 8810 	msr	PRIMASK, r3
}
 80019e8:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80019ea:	1dbb      	adds	r3, r7, #6
 80019ec:	881a      	ldrh	r2, [r3, #0]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 ff9e 	bl	8002934 <UART_Start_Receive_IT>
 80019f8:	0003      	movs	r3, r0
 80019fa:	e000      	b.n	80019fe <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80019fc:	2302      	movs	r3, #2
  }
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b008      	add	sp, #32
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40008000 	.word	0x40008000

08001a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b0aa      	sub	sp, #168	; 0xa8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	22a4      	movs	r2, #164	; 0xa4
 8001a1c:	18b9      	adds	r1, r7, r2
 8001a1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	20a0      	movs	r0, #160	; 0xa0
 8001a28:	1839      	adds	r1, r7, r0
 8001a2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	249c      	movs	r4, #156	; 0x9c
 8001a34:	1939      	adds	r1, r7, r4
 8001a36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a38:	0011      	movs	r1, r2
 8001a3a:	18bb      	adds	r3, r7, r2
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4aa0      	ldr	r2, [pc, #640]	; (8001cc0 <HAL_UART_IRQHandler+0x2b4>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	2298      	movs	r2, #152	; 0x98
 8001a44:	18bd      	adds	r5, r7, r2
 8001a46:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001a48:	18bb      	adds	r3, r7, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11a      	bne.n	8001a86 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2220      	movs	r2, #32
 8001a56:	4013      	ands	r3, r2
 8001a58:	d015      	beq.n	8001a86 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	4013      	ands	r3, r2
 8001a62:	d105      	bne.n	8001a70 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d00a      	beq.n	8001a86 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d100      	bne.n	8001a7a <HAL_UART_IRQHandler+0x6e>
 8001a78:	e2cf      	b.n	800201a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	0010      	movs	r0, r2
 8001a82:	4798      	blx	r3
      }
      return;
 8001a84:	e2c9      	b.n	800201a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001a86:	2398      	movs	r3, #152	; 0x98
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d100      	bne.n	8001a92 <HAL_UART_IRQHandler+0x86>
 8001a90:	e11e      	b.n	8001cd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001a92:	239c      	movs	r3, #156	; 0x9c
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a8a      	ldr	r2, [pc, #552]	; (8001cc4 <HAL_UART_IRQHandler+0x2b8>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d106      	bne.n	8001aac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001a9e:	23a0      	movs	r3, #160	; 0xa0
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a88      	ldr	r2, [pc, #544]	; (8001cc8 <HAL_UART_IRQHandler+0x2bc>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d100      	bne.n	8001aac <HAL_UART_IRQHandler+0xa0>
 8001aaa:	e111      	b.n	8001cd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001aac:	23a4      	movs	r3, #164	; 0xa4
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d012      	beq.n	8001ade <HAL_UART_IRQHandler+0xd2>
 8001ab8:	23a0      	movs	r3, #160	; 0xa0
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d00b      	beq.n	8001ade <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	228c      	movs	r2, #140	; 0x8c
 8001ad2:	589b      	ldr	r3, [r3, r2]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	218c      	movs	r1, #140	; 0x8c
 8001adc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ade:	23a4      	movs	r3, #164	; 0xa4
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d011      	beq.n	8001b0e <HAL_UART_IRQHandler+0x102>
 8001aea:	239c      	movs	r3, #156	; 0x9c
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	d00b      	beq.n	8001b0e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	228c      	movs	r2, #140	; 0x8c
 8001b02:	589b      	ldr	r3, [r3, r2]
 8001b04:	2204      	movs	r2, #4
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	218c      	movs	r1, #140	; 0x8c
 8001b0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b0e:	23a4      	movs	r3, #164	; 0xa4
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2204      	movs	r2, #4
 8001b16:	4013      	ands	r3, r2
 8001b18:	d011      	beq.n	8001b3e <HAL_UART_IRQHandler+0x132>
 8001b1a:	239c      	movs	r3, #156	; 0x9c
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	228c      	movs	r2, #140	; 0x8c
 8001b32:	589b      	ldr	r3, [r3, r2]
 8001b34:	2202      	movs	r2, #2
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	218c      	movs	r1, #140	; 0x8c
 8001b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b3e:	23a4      	movs	r3, #164	; 0xa4
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	d017      	beq.n	8001b7a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001b4a:	23a0      	movs	r3, #160	; 0xa0
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2220      	movs	r2, #32
 8001b52:	4013      	ands	r3, r2
 8001b54:	d105      	bne.n	8001b62 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001b56:	239c      	movs	r3, #156	; 0x9c
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_UART_IRQHandler+0x2b8>)
 8001b5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001b60:	d00b      	beq.n	8001b7a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2208      	movs	r2, #8
 8001b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	228c      	movs	r2, #140	; 0x8c
 8001b6e:	589b      	ldr	r3, [r3, r2]
 8001b70:	2208      	movs	r2, #8
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	218c      	movs	r1, #140	; 0x8c
 8001b78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b7a:	23a4      	movs	r3, #164	; 0xa4
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_UART_IRQHandler+0x1a4>
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	04db      	lsls	r3, r3, #19
 8001b92:	4013      	ands	r3, r2
 8001b94:	d00c      	beq.n	8001bb0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	228c      	movs	r2, #140	; 0x8c
 8001ba4:	589b      	ldr	r3, [r3, r2]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	218c      	movs	r1, #140	; 0x8c
 8001bae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	228c      	movs	r2, #140	; 0x8c
 8001bb4:	589b      	ldr	r3, [r3, r2]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <HAL_UART_IRQHandler+0x1b0>
 8001bba:	e230      	b.n	800201e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001bbc:	23a4      	movs	r3, #164	; 0xa4
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d015      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001bc8:	23a0      	movs	r3, #160	; 0xa0
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d106      	bne.n	8001be2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001bd4:	239c      	movs	r3, #156	; 0x9c
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	055b      	lsls	r3, r3, #21
 8001bde:	4013      	ands	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	228c      	movs	r2, #140	; 0x8c
 8001bf8:	589b      	ldr	r3, [r3, r2]
 8001bfa:	2194      	movs	r1, #148	; 0x94
 8001bfc:	187a      	adds	r2, r7, r1
 8001bfe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	d004      	beq.n	8001c18 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2228      	movs	r2, #40	; 0x28
 8001c14:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c16:	d047      	beq.n	8001ca8 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 ff96 	bl	8002b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d137      	bne.n	8001c9e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c32:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c36:	2090      	movs	r0, #144	; 0x90
 8001c38:	183a      	adds	r2, r7, r0
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c42:	f383 8810 	msr	PRIMASK, r3
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	438a      	bics	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	183b      	adds	r3, r7, r0
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c60:	f383 8810 	msr	PRIMASK, r3
}
 8001c64:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c72:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_UART_IRQHandler+0x2c0>)
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7fe ff22 	bl	8000ac4 <HAL_DMA_Abort_IT>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d01a      	beq.n	8001cba <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c8e:	0018      	movs	r0, r3
 8001c90:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c92:	e012      	b.n	8001cba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 f9e2 	bl	8002060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9c:	e00d      	b.n	8001cba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f9dd 	bl	8002060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca6:	e008      	b.n	8001cba <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f9d8 	bl	8002060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	228c      	movs	r2, #140	; 0x8c
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001cb8:	e1b1      	b.n	800201e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cba:	46c0      	nop			; (mov r8, r8)
    return;
 8001cbc:	e1af      	b.n	800201e <HAL_UART_IRQHandler+0x612>
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	0000080f 	.word	0x0000080f
 8001cc4:	10000001 	.word	0x10000001
 8001cc8:	04000120 	.word	0x04000120
 8001ccc:	08002c19 	.word	0x08002c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d000      	beq.n	8001cda <HAL_UART_IRQHandler+0x2ce>
 8001cd8:	e135      	b.n	8001f46 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001cda:	23a4      	movs	r3, #164	; 0xa4
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_UART_IRQHandler+0x2dc>
 8001ce6:	e12e      	b.n	8001f46 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ce8:	23a0      	movs	r3, #160	; 0xa0
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2210      	movs	r2, #16
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_UART_IRQHandler+0x2ea>
 8001cf4:	e127      	b.n	8001f46 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d000      	beq.n	8001d0e <HAL_UART_IRQHandler+0x302>
 8001d0c:	e09e      	b.n	8001e4c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	217e      	movs	r1, #126	; 0x7e
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d100      	bne.n	8001d26 <HAL_UART_IRQHandler+0x31a>
 8001d24:	e17d      	b.n	8002022 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	225c      	movs	r2, #92	; 0x5c
 8001d2a:	5a9b      	ldrh	r3, [r3, r2]
 8001d2c:	187a      	adds	r2, r7, r1
 8001d2e:	8812      	ldrh	r2, [r2, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d300      	bcc.n	8001d36 <HAL_UART_IRQHandler+0x32a>
 8001d34:	e175      	b.n	8002022 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	187a      	adds	r2, r7, r1
 8001d3a:	215e      	movs	r1, #94	; 0x5e
 8001d3c:	8812      	ldrh	r2, [r2, #0]
 8001d3e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d16f      	bne.n	8001e2e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d56:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d58:	2301      	movs	r3, #1
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	f383 8810 	msr	PRIMASK, r3
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	49b1      	ldr	r1, [pc, #708]	; (8002034 <HAL_UART_IRQHandler+0x628>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7a:	f383 8810 	msr	PRIMASK, r3
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d80:	f3ef 8310 	mrs	r3, PRIMASK
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d90:	f383 8810 	msr	PRIMASK, r3
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	438a      	bics	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dac:	f383 8810 	msr	PRIMASK, r3
}
 8001db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db2:	f3ef 8310 	mrs	r3, PRIMASK
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dba:	673b      	str	r3, [r7, #112]	; 0x70
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc2:	f383 8810 	msr	PRIMASK, r3
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	438a      	bics	r2, r1
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dde:	f383 8810 	msr	PRIMASK, r3
}
 8001de2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2288      	movs	r2, #136	; 0x88
 8001de8:	2120      	movs	r1, #32
 8001dea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001df2:	f3ef 8310 	mrs	r3, PRIMASK
 8001df6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e02:	f383 8810 	msr	PRIMASK, r3
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2110      	movs	r1, #16
 8001e14:	438a      	bics	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1e:	f383 8810 	msr	PRIMASK, r3
}
 8001e22:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7fe fde9 	bl	8000a00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	225c      	movs	r2, #92	; 0x5c
 8001e32:	5a9a      	ldrh	r2, [r3, r2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	215e      	movs	r1, #94	; 0x5e
 8001e38:	5a5b      	ldrh	r3, [r3, r1]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0011      	movs	r1, r2
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f913 	bl	8002070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001e4a:	e0ea      	b.n	8002022 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	225c      	movs	r2, #92	; 0x5c
 8001e50:	5a99      	ldrh	r1, [r3, r2]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	225e      	movs	r2, #94	; 0x5e
 8001e56:	5a9b      	ldrh	r3, [r3, r2]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	208e      	movs	r0, #142	; 0x8e
 8001e5c:	183b      	adds	r3, r7, r0
 8001e5e:	1a8a      	subs	r2, r1, r2
 8001e60:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	225e      	movs	r2, #94	; 0x5e
 8001e66:	5a9b      	ldrh	r3, [r3, r2]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d100      	bne.n	8001e70 <HAL_UART_IRQHandler+0x464>
 8001e6e:	e0da      	b.n	8002026 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <HAL_UART_IRQHandler+0x46e>
 8001e78:	e0d5      	b.n	8002026 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e80:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001e82:	2488      	movs	r4, #136	; 0x88
 8001e84:	193a      	adds	r2, r7, r4
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f383 8810 	msr	PRIMASK, r3
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4966      	ldr	r1, [pc, #408]	; (8002038 <HAL_UART_IRQHandler+0x62c>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f383 8810 	msr	PRIMASK, r3
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8001eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001eb8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001eba:	2484      	movs	r4, #132	; 0x84
 8001ebc:	193a      	adds	r2, r7, r4
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f383 8810 	msr	PRIMASK, r3
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4959      	ldr	r1, [pc, #356]	; (800203c <HAL_UART_IRQHandler+0x630>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f383 8810 	msr	PRIMASK, r3
}
 8001ee8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2288      	movs	r2, #136	; 0x88
 8001eee:	2120      	movs	r1, #32
 8001ef0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efe:	f3ef 8310 	mrs	r3, PRIMASK
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f06:	2480      	movs	r4, #128	; 0x80
 8001f08:	193a      	adds	r2, r7, r4
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	f383 8810 	msr	PRIMASK, r3
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2110      	movs	r1, #16
 8001f24:	438a      	bics	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	f383 8810 	msr	PRIMASK, r3
}
 8001f34:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f36:	183b      	adds	r3, r7, r0
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 f896 	bl	8002070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f44:	e06f      	b.n	8002026 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f46:	23a4      	movs	r3, #164	; 0xa4
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	035b      	lsls	r3, r3, #13
 8001f50:	4013      	ands	r3, r2
 8001f52:	d010      	beq.n	8001f76 <HAL_UART_IRQHandler+0x56a>
 8001f54:	239c      	movs	r3, #156	; 0x9c
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	03db      	lsls	r3, r3, #15
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	0352      	lsls	r2, r2, #13
 8001f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f001 fae6 	bl	8003540 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001f74:	e05a      	b.n	800202c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8001f76:	23a4      	movs	r3, #164	; 0xa4
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d016      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8001f82:	23a0      	movs	r3, #160	; 0xa0
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8001f8e:	239c      	movs	r3, #156	; 0x9c
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d042      	beq.n	800202a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	0010      	movs	r0, r2
 8001fac:	4798      	blx	r3
    }
    return;
 8001fae:	e03c      	b.n	800202a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001fb0:	23a4      	movs	r3, #164	; 0xa4
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00a      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x5c6>
 8001fbc:	23a0      	movs	r3, #160	; 0xa0
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 fe3b 	bl	8002c46 <UART_EndTransmit_IT>
    return;
 8001fd0:	e02c      	b.n	800202c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8001fd2:	23a4      	movs	r3, #164	; 0xa4
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x5ec>
 8001fe0:	23a0      	movs	r3, #160	; 0xa0
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	05db      	lsls	r3, r3, #23
 8001fea:	4013      	ands	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f001 fab5 	bl	8003560 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001ff6:	e019      	b.n	800202c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8001ff8:	23a4      	movs	r3, #164	; 0xa4
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	045b      	lsls	r3, r3, #17
 8002002:	4013      	ands	r3, r2
 8002004:	d012      	beq.n	800202c <HAL_UART_IRQHandler+0x620>
 8002006:	23a0      	movs	r3, #160	; 0xa0
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0d      	bge.n	800202c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fa9c 	bl	8003550 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002018:	e008      	b.n	800202c <HAL_UART_IRQHandler+0x620>
      return;
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	e006      	b.n	800202c <HAL_UART_IRQHandler+0x620>
    return;
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	e004      	b.n	800202c <HAL_UART_IRQHandler+0x620>
      return;
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	e002      	b.n	800202c <HAL_UART_IRQHandler+0x620>
      return;
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	e000      	b.n	800202c <HAL_UART_IRQHandler+0x620>
    return;
 800202a:	46c0      	nop			; (mov r8, r8)
  }
}
 800202c:	46bd      	mov	sp, r7
 800202e:	b02a      	add	sp, #168	; 0xa8
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	fffffeff 	.word	0xfffffeff
 8002038:	fffffedf 	.word	0xfffffedf
 800203c:	effffffe 	.word	0xeffffffe

08002040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	000a      	movs	r2, r1
 800207a:	1cbb      	adds	r3, r7, #2
 800207c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b090      	sub	sp, #64	; 0x40
 800208c:	af00      	add	r7, sp, #0
 800208e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002090:	231a      	movs	r3, #26
 8002092:	2220      	movs	r2, #32
 8002094:	4694      	mov	ip, r2
 8002096:	44bc      	add	ip, r7
 8002098:	4463      	add	r3, ip
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4ac7      	ldr	r2, [pc, #796]	; (80023dc <UART_SetConfig+0x354>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4ac3      	ldr	r2, [pc, #780]	; (80023e0 <UART_SetConfig+0x358>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	0003      	movs	r3, r0
 80020e2:	430b      	orrs	r3, r1
 80020e4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4abc      	ldr	r2, [pc, #752]	; (80023e4 <UART_SetConfig+0x35c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fc:	4313      	orrs	r3, r2
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4ab8      	ldr	r2, [pc, #736]	; (80023e8 <UART_SetConfig+0x360>)
 8002108:	4013      	ands	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002112:	430b      	orrs	r3, r1
 8002114:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	220f      	movs	r2, #15
 800211e:	4393      	bics	r3, r2
 8002120:	0018      	movs	r0, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	0003      	movs	r3, r0
 800212c:	430b      	orrs	r3, r1
 800212e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4aad      	ldr	r2, [pc, #692]	; (80023ec <UART_SetConfig+0x364>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d136      	bne.n	80021a8 <UART_SetConfig+0x120>
 800213a:	4bad      	ldr	r3, [pc, #692]	; (80023f0 <UART_SetConfig+0x368>)
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	2203      	movs	r2, #3
 8002140:	4013      	ands	r3, r2
 8002142:	2b03      	cmp	r3, #3
 8002144:	d020      	beq.n	8002188 <UART_SetConfig+0x100>
 8002146:	d827      	bhi.n	8002198 <UART_SetConfig+0x110>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d00d      	beq.n	8002168 <UART_SetConfig+0xe0>
 800214c:	d824      	bhi.n	8002198 <UART_SetConfig+0x110>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <UART_SetConfig+0xd0>
 8002152:	2b01      	cmp	r3, #1
 8002154:	d010      	beq.n	8002178 <UART_SetConfig+0xf0>
 8002156:	e01f      	b.n	8002198 <UART_SetConfig+0x110>
 8002158:	231b      	movs	r3, #27
 800215a:	2220      	movs	r2, #32
 800215c:	4694      	mov	ip, r2
 800215e:	44bc      	add	ip, r7
 8002160:	4463      	add	r3, ip
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e07c      	b.n	8002262 <UART_SetConfig+0x1da>
 8002168:	231b      	movs	r3, #27
 800216a:	2220      	movs	r2, #32
 800216c:	4694      	mov	ip, r2
 800216e:	44bc      	add	ip, r7
 8002170:	4463      	add	r3, ip
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e074      	b.n	8002262 <UART_SetConfig+0x1da>
 8002178:	231b      	movs	r3, #27
 800217a:	2220      	movs	r2, #32
 800217c:	4694      	mov	ip, r2
 800217e:	44bc      	add	ip, r7
 8002180:	4463      	add	r3, ip
 8002182:	2204      	movs	r2, #4
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e06c      	b.n	8002262 <UART_SetConfig+0x1da>
 8002188:	231b      	movs	r3, #27
 800218a:	2220      	movs	r2, #32
 800218c:	4694      	mov	ip, r2
 800218e:	44bc      	add	ip, r7
 8002190:	4463      	add	r3, ip
 8002192:	2208      	movs	r2, #8
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e064      	b.n	8002262 <UART_SetConfig+0x1da>
 8002198:	231b      	movs	r3, #27
 800219a:	2220      	movs	r2, #32
 800219c:	4694      	mov	ip, r2
 800219e:	44bc      	add	ip, r7
 80021a0:	4463      	add	r3, ip
 80021a2:	2210      	movs	r2, #16
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e05c      	b.n	8002262 <UART_SetConfig+0x1da>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a91      	ldr	r2, [pc, #580]	; (80023f4 <UART_SetConfig+0x36c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d107      	bne.n	80021c2 <UART_SetConfig+0x13a>
 80021b2:	231b      	movs	r3, #27
 80021b4:	2220      	movs	r2, #32
 80021b6:	4694      	mov	ip, r2
 80021b8:	44bc      	add	ip, r7
 80021ba:	4463      	add	r3, ip
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e04f      	b.n	8002262 <UART_SetConfig+0x1da>
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a87      	ldr	r2, [pc, #540]	; (80023e4 <UART_SetConfig+0x35c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d143      	bne.n	8002254 <UART_SetConfig+0x1cc>
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <UART_SetConfig+0x368>)
 80021ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	22c0      	movs	r2, #192	; 0xc0
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02a      	beq.n	8002234 <UART_SetConfig+0x1ac>
 80021de:	22c0      	movs	r2, #192	; 0xc0
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d82e      	bhi.n	8002244 <UART_SetConfig+0x1bc>
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d012      	beq.n	8002214 <UART_SetConfig+0x18c>
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d826      	bhi.n	8002244 <UART_SetConfig+0x1bc>
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <UART_SetConfig+0x17c>
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	4293      	cmp	r3, r2
 8002200:	d010      	beq.n	8002224 <UART_SetConfig+0x19c>
 8002202:	e01f      	b.n	8002244 <UART_SetConfig+0x1bc>
 8002204:	231b      	movs	r3, #27
 8002206:	2220      	movs	r2, #32
 8002208:	4694      	mov	ip, r2
 800220a:	44bc      	add	ip, r7
 800220c:	4463      	add	r3, ip
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e026      	b.n	8002262 <UART_SetConfig+0x1da>
 8002214:	231b      	movs	r3, #27
 8002216:	2220      	movs	r2, #32
 8002218:	4694      	mov	ip, r2
 800221a:	44bc      	add	ip, r7
 800221c:	4463      	add	r3, ip
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e01e      	b.n	8002262 <UART_SetConfig+0x1da>
 8002224:	231b      	movs	r3, #27
 8002226:	2220      	movs	r2, #32
 8002228:	4694      	mov	ip, r2
 800222a:	44bc      	add	ip, r7
 800222c:	4463      	add	r3, ip
 800222e:	2204      	movs	r2, #4
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e016      	b.n	8002262 <UART_SetConfig+0x1da>
 8002234:	231b      	movs	r3, #27
 8002236:	2220      	movs	r2, #32
 8002238:	4694      	mov	ip, r2
 800223a:	44bc      	add	ip, r7
 800223c:	4463      	add	r3, ip
 800223e:	2208      	movs	r2, #8
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e00e      	b.n	8002262 <UART_SetConfig+0x1da>
 8002244:	231b      	movs	r3, #27
 8002246:	2220      	movs	r2, #32
 8002248:	4694      	mov	ip, r2
 800224a:	44bc      	add	ip, r7
 800224c:	4463      	add	r3, ip
 800224e:	2210      	movs	r2, #16
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e006      	b.n	8002262 <UART_SetConfig+0x1da>
 8002254:	231b      	movs	r3, #27
 8002256:	2220      	movs	r2, #32
 8002258:	4694      	mov	ip, r2
 800225a:	44bc      	add	ip, r7
 800225c:	4463      	add	r3, ip
 800225e:	2210      	movs	r2, #16
 8002260:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5f      	ldr	r2, [pc, #380]	; (80023e4 <UART_SetConfig+0x35c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d000      	beq.n	800226e <UART_SetConfig+0x1e6>
 800226c:	e096      	b.n	800239c <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800226e:	231b      	movs	r3, #27
 8002270:	2220      	movs	r2, #32
 8002272:	4694      	mov	ip, r2
 8002274:	44bc      	add	ip, r7
 8002276:	4463      	add	r3, ip
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d015      	beq.n	80022aa <UART_SetConfig+0x222>
 800227e:	dc18      	bgt.n	80022b2 <UART_SetConfig+0x22a>
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00d      	beq.n	80022a0 <UART_SetConfig+0x218>
 8002284:	dc15      	bgt.n	80022b2 <UART_SetConfig+0x22a>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <UART_SetConfig+0x208>
 800228a:	2b02      	cmp	r3, #2
 800228c:	d005      	beq.n	800229a <UART_SetConfig+0x212>
 800228e:	e010      	b.n	80022b2 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002290:	f7ff fae6 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 8002294:	0003      	movs	r3, r0
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002298:	e015      	b.n	80022c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800229a:	4b57      	ldr	r3, [pc, #348]	; (80023f8 <UART_SetConfig+0x370>)
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800229e:	e012      	b.n	80022c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a0:	f7ff fa52 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 80022a4:	0003      	movs	r3, r0
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a8:	e00d      	b.n	80022c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022b0:	e009      	b.n	80022c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80022b6:	231a      	movs	r3, #26
 80022b8:	2220      	movs	r2, #32
 80022ba:	4694      	mov	ip, r2
 80022bc:	44bc      	add	ip, r7
 80022be:	4463      	add	r3, ip
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
        break;
 80022c4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d100      	bne.n	80022ce <UART_SetConfig+0x246>
 80022cc:	e14f      	b.n	800256e <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d2:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <UART_SetConfig+0x374>)
 80022d4:	0052      	lsls	r2, r2, #1
 80022d6:	5ad3      	ldrh	r3, [r2, r3]
 80022d8:	0019      	movs	r1, r3
 80022da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022dc:	f7fd ff12 	bl	8000104 <__udivsi3>
 80022e0:	0003      	movs	r3, r0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	0013      	movs	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d305      	bcc.n	8002300 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d907      	bls.n	8002310 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8002300:	231a      	movs	r3, #26
 8002302:	2220      	movs	r2, #32
 8002304:	4694      	mov	ip, r2
 8002306:	44bc      	add	ip, r7
 8002308:	4463      	add	r3, ip
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e12e      	b.n	800256e <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <UART_SetConfig+0x374>)
 800231e:	0052      	lsls	r2, r2, #1
 8002320:	5ad3      	ldrh	r3, [r2, r3]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	69b8      	ldr	r0, [r7, #24]
 800232e:	69f9      	ldr	r1, [r7, #28]
 8002330:	f7fd ff74 	bl	800021c <__aeabi_uldivmod>
 8002334:	0002      	movs	r2, r0
 8002336:	000b      	movs	r3, r1
 8002338:	0e11      	lsrs	r1, r2, #24
 800233a:	021d      	lsls	r5, r3, #8
 800233c:	430d      	orrs	r5, r1
 800233e:	0214      	lsls	r4, r2, #8
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	1900      	adds	r0, r0, r4
 8002352:	4169      	adcs	r1, r5
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f7fd ff5b 	bl	800021c <__aeabi_uldivmod>
 8002366:	0002      	movs	r2, r0
 8002368:	000b      	movs	r3, r1
 800236a:	0013      	movs	r3, r2
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800236e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002370:	23c0      	movs	r3, #192	; 0xc0
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d309      	bcc.n	800238c <UART_SetConfig+0x304>
 8002378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	035b      	lsls	r3, r3, #13
 800237e:	429a      	cmp	r2, r3
 8002380:	d204      	bcs.n	800238c <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	e0f0      	b.n	800256e <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 800238c:	231a      	movs	r3, #26
 800238e:	2220      	movs	r2, #32
 8002390:	4694      	mov	ip, r2
 8002392:	44bc      	add	ip, r7
 8002394:	4463      	add	r3, ip
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e0e8      	b.n	800256e <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d000      	beq.n	80023aa <UART_SetConfig+0x322>
 80023a8:	e086      	b.n	80024b8 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 80023aa:	231b      	movs	r3, #27
 80023ac:	2220      	movs	r2, #32
 80023ae:	4694      	mov	ip, r2
 80023b0:	44bc      	add	ip, r7
 80023b2:	4463      	add	r3, ip
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d027      	beq.n	800240a <UART_SetConfig+0x382>
 80023ba:	dc2a      	bgt.n	8002412 <UART_SetConfig+0x38a>
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d01f      	beq.n	8002400 <UART_SetConfig+0x378>
 80023c0:	dc27      	bgt.n	8002412 <UART_SetConfig+0x38a>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x344>
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d005      	beq.n	80023d6 <UART_SetConfig+0x34e>
 80023ca:	e022      	b.n	8002412 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023cc:	f7ff fa48 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 80023d0:	0003      	movs	r3, r0
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023d4:	e027      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <UART_SetConfig+0x370>)
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023da:	e024      	b.n	8002426 <UART_SetConfig+0x39e>
 80023dc:	cfff69f3 	.word	0xcfff69f3
 80023e0:	ffffcfff 	.word	0xffffcfff
 80023e4:	40008000 	.word	0x40008000
 80023e8:	11fff4ff 	.word	0x11fff4ff
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40004400 	.word	0x40004400
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	08003640 	.word	0x08003640
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002400:	f7ff f9a2 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 8002404:	0003      	movs	r3, r0
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002408:	e00d      	b.n	8002426 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002410:	e009      	b.n	8002426 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002416:	231a      	movs	r3, #26
 8002418:	2220      	movs	r2, #32
 800241a:	4694      	mov	ip, r2
 800241c:	44bc      	add	ip, r7
 800241e:	4463      	add	r3, ip
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
        break;
 8002424:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <UART_SetConfig+0x3a6>
 800242c:	e09f      	b.n	800256e <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <UART_SetConfig+0x518>)
 8002434:	0052      	lsls	r2, r2, #1
 8002436:	5ad3      	ldrh	r3, [r2, r3]
 8002438:	0019      	movs	r1, r3
 800243a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800243c:	f7fd fe62 	bl	8000104 <__udivsi3>
 8002440:	0003      	movs	r3, r0
 8002442:	005a      	lsls	r2, r3, #1
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	18d2      	adds	r2, r2, r3
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0019      	movs	r1, r3
 8002452:	0010      	movs	r0, r2
 8002454:	f7fd fe56 	bl	8000104 <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	b29b      	uxth	r3, r3
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d921      	bls.n	80024a8 <UART_SetConfig+0x420>
 8002464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	429a      	cmp	r2, r3
 800246c:	d21c      	bcs.n	80024a8 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	b29a      	uxth	r2, r3
 8002472:	200e      	movs	r0, #14
 8002474:	2420      	movs	r4, #32
 8002476:	193b      	adds	r3, r7, r4
 8002478:	181b      	adds	r3, r3, r0
 800247a:	210f      	movs	r1, #15
 800247c:	438a      	bics	r2, r1
 800247e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	b299      	uxth	r1, r3
 800248c:	193b      	adds	r3, r7, r4
 800248e:	181b      	adds	r3, r3, r0
 8002490:	193a      	adds	r2, r7, r4
 8002492:	1812      	adds	r2, r2, r0
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	193a      	adds	r2, r7, r4
 80024a0:	1812      	adds	r2, r2, r0
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	e062      	b.n	800256e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80024a8:	231a      	movs	r3, #26
 80024aa:	2220      	movs	r2, #32
 80024ac:	4694      	mov	ip, r2
 80024ae:	44bc      	add	ip, r7
 80024b0:	4463      	add	r3, ip
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e05a      	b.n	800256e <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024b8:	231b      	movs	r3, #27
 80024ba:	2220      	movs	r2, #32
 80024bc:	4694      	mov	ip, r2
 80024be:	44bc      	add	ip, r7
 80024c0:	4463      	add	r3, ip
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d015      	beq.n	80024f4 <UART_SetConfig+0x46c>
 80024c8:	dc18      	bgt.n	80024fc <UART_SetConfig+0x474>
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00d      	beq.n	80024ea <UART_SetConfig+0x462>
 80024ce:	dc15      	bgt.n	80024fc <UART_SetConfig+0x474>
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <UART_SetConfig+0x452>
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d005      	beq.n	80024e4 <UART_SetConfig+0x45c>
 80024d8:	e010      	b.n	80024fc <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024da:	f7ff f9c1 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 80024de:	0003      	movs	r3, r0
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024e2:	e015      	b.n	8002510 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <UART_SetConfig+0x51c>)
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024e8:	e012      	b.n	8002510 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ea:	f7ff f92d 	bl	8001748 <HAL_RCC_GetSysClockFreq>
 80024ee:	0003      	movs	r3, r0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024f2:	e00d      	b.n	8002510 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80024fa:	e009      	b.n	8002510 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002500:	231a      	movs	r3, #26
 8002502:	2220      	movs	r2, #32
 8002504:	4694      	mov	ip, r2
 8002506:	44bc      	add	ip, r7
 8002508:	4463      	add	r3, ip
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
        break;
 800250e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02b      	beq.n	800256e <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <UART_SetConfig+0x518>)
 800251c:	0052      	lsls	r2, r2, #1
 800251e:	5ad3      	ldrh	r3, [r2, r3]
 8002520:	0019      	movs	r1, r3
 8002522:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002524:	f7fd fdee 	bl	8000104 <__udivsi3>
 8002528:	0003      	movs	r3, r0
 800252a:	001a      	movs	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	18d2      	adds	r2, r2, r3
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0019      	movs	r1, r3
 800253a:	0010      	movs	r0, r2
 800253c:	f7fd fde2 	bl	8000104 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	b29b      	uxth	r3, r3
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d909      	bls.n	8002560 <UART_SetConfig+0x4d8>
 800254c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	429a      	cmp	r2, r3
 8002554:	d204      	bcs.n	8002560 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	e006      	b.n	800256e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8002560:	231a      	movs	r3, #26
 8002562:	2220      	movs	r2, #32
 8002564:	4694      	mov	ip, r2
 8002566:	44bc      	add	ip, r7
 8002568:	4463      	add	r3, ip
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	226a      	movs	r2, #106	; 0x6a
 8002572:	2101      	movs	r1, #1
 8002574:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2268      	movs	r2, #104	; 0x68
 800257a:	2101      	movs	r1, #1
 800257c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2200      	movs	r2, #0
 8002582:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800258a:	231a      	movs	r3, #26
 800258c:	2220      	movs	r2, #32
 800258e:	4694      	mov	ip, r2
 8002590:	44bc      	add	ip, r7
 8002592:	4463      	add	r3, ip
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b010      	add	sp, #64	; 0x40
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	08003640 	.word	0x08003640
 80025a4:	00f42400 	.word	0x00f42400

080025a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a4a      	ldr	r2, [pc, #296]	; (80026ec <UART_AdvFeatureConfig+0x144>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d00b      	beq.n	80025f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <UART_AdvFeatureConfig+0x148>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	2204      	movs	r2, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d00b      	beq.n	8002616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <UART_AdvFeatureConfig+0x14c>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	2208      	movs	r2, #8
 800261c:	4013      	ands	r3, r2
 800261e:	d00b      	beq.n	8002638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <UART_AdvFeatureConfig+0x150>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2210      	movs	r2, #16
 800263e:	4013      	ands	r3, r2
 8002640:	d00b      	beq.n	800265a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <UART_AdvFeatureConfig+0x154>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	2220      	movs	r2, #32
 8002660:	4013      	ands	r3, r2
 8002662:	d00b      	beq.n	800267c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4a25      	ldr	r2, [pc, #148]	; (8002700 <UART_AdvFeatureConfig+0x158>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	4013      	ands	r3, r2
 8002684:	d01d      	beq.n	80026c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <UART_AdvFeatureConfig+0x15c>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	035b      	lsls	r3, r3, #13
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10b      	bne.n	80026c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <UART_AdvFeatureConfig+0x160>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	2280      	movs	r2, #128	; 0x80
 80026c8:	4013      	ands	r3, r2
 80026ca:	d00b      	beq.n	80026e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <UART_AdvFeatureConfig+0x164>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]
  }
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fffdffff 	.word	0xfffdffff
 80026f0:	fffeffff 	.word	0xfffeffff
 80026f4:	fffbffff 	.word	0xfffbffff
 80026f8:	ffff7fff 	.word	0xffff7fff
 80026fc:	ffffefff 	.word	0xffffefff
 8002700:	ffffdfff 	.word	0xffffdfff
 8002704:	ffefffff 	.word	0xffefffff
 8002708:	ff9fffff 	.word	0xff9fffff
 800270c:	fff7ffff 	.word	0xfff7ffff

08002710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	228c      	movs	r2, #140	; 0x8c
 800271c:	2100      	movs	r1, #0
 800271e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002720:	f7fe f886 	bl	8000830 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2208      	movs	r2, #8
 8002730:	4013      	ands	r3, r2
 8002732:	2b08      	cmp	r3, #8
 8002734:	d10c      	bne.n	8002750 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	0391      	lsls	r1, r2, #14
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <UART_CheckIdleState+0x90>)
 8002740:	9200      	str	r2, [sp, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	f000 f82e 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e023      	b.n	8002798 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	2b04      	cmp	r3, #4
 800275c:	d10c      	bne.n	8002778 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	03d1      	lsls	r1, r2, #15
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <UART_CheckIdleState+0x90>)
 8002768:	9200      	str	r2, [sp, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	f000 f81a 	bl	80027a4 <UART_WaitOnFlagUntilTimeout>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e00f      	b.n	8002798 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2284      	movs	r2, #132	; 0x84
 800277c:	2120      	movs	r1, #32
 800277e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2288      	movs	r2, #136	; 0x88
 8002784:	2120      	movs	r1, #32
 8002786:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	01ffffff 	.word	0x01ffffff

080027a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	; 0x50
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	e0a7      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	3301      	adds	r3, #1
 80027ba:	d100      	bne.n	80027be <UART_WaitOnFlagUntilTimeout+0x1a>
 80027bc:	e0a3      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7fe f837 	bl	8000830 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d13f      	bne.n	8002854 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8310 	mrs	r3, PRIMASK
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
 80027de:	2301      	movs	r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	494e      	ldr	r1, [pc, #312]	; (8002930 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002806:	f3ef 8310 	mrs	r3, PRIMASK
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
 8002810:	2301      	movs	r3, #1
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	f383 8810 	msr	PRIMASK, r3
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2284      	movs	r2, #132	; 0x84
 800283c:	2120      	movs	r1, #32
 800283e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2288      	movs	r2, #136	; 0x88
 8002844:	2120      	movs	r1, #32
 8002846:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e069      	b.n	8002928 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2204      	movs	r2, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d052      	beq.n	8002906 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	401a      	ands	r2, r3
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	429a      	cmp	r2, r3
 8002872:	d148      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287e:	f3ef 8310 	mrs	r3, PRIMASK
 8002882:	613b      	str	r3, [r7, #16]
  return(result);
 8002884:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4924      	ldr	r1, [pc, #144]	; (8002930 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f383 8810 	msr	PRIMASK, r3
}
 80028ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b0:	f3ef 8310 	mrs	r3, PRIMASK
 80028b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80028b6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ba:	2301      	movs	r3, #1
 80028bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f383 8810 	msr	PRIMASK, r3
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2101      	movs	r1, #1
 80028d2:	438a      	bics	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	f383 8810 	msr	PRIMASK, r3
}
 80028e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2284      	movs	r2, #132	; 0x84
 80028e6:	2120      	movs	r1, #32
 80028e8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2288      	movs	r2, #136	; 0x88
 80028ee:	2120      	movs	r1, #32
 80028f0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	228c      	movs	r2, #140	; 0x8c
 80028f6:	2120      	movs	r1, #32
 80028f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e010      	b.n	8002928 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	425a      	negs	r2, r3
 8002916:	4153      	adcs	r3, r2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	001a      	movs	r2, r3
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d100      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x182>
 8002924:	e747      	b.n	80027b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b014      	add	sp, #80	; 0x50
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fffffe5f 	.word	0xfffffe5f

08002934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b094      	sub	sp, #80	; 0x50
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	1dbb      	adds	r3, r7, #6
 8002940:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1dba      	adds	r2, r7, #6
 800294c:	215c      	movs	r1, #92	; 0x5c
 800294e:	8812      	ldrh	r2, [r2, #0]
 8002950:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1dba      	adds	r2, r7, #6
 8002956:	215e      	movs	r1, #94	; 0x5e
 8002958:	8812      	ldrh	r2, [r2, #0]
 800295a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	429a      	cmp	r2, r3
 800296c:	d10d      	bne.n	800298a <UART_Start_Receive_IT+0x56>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <UART_Start_Receive_IT+0x4c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2260      	movs	r2, #96	; 0x60
 800297a:	496f      	ldr	r1, [pc, #444]	; (8002b38 <UART_Start_Receive_IT+0x204>)
 800297c:	5299      	strh	r1, [r3, r2]
 800297e:	e02e      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2260      	movs	r2, #96	; 0x60
 8002984:	21ff      	movs	r1, #255	; 0xff
 8002986:	5299      	strh	r1, [r3, r2]
 8002988:	e029      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <UART_Start_Receive_IT+0x7a>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <UART_Start_Receive_IT+0x70>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2260      	movs	r2, #96	; 0x60
 800299e:	21ff      	movs	r1, #255	; 0xff
 80029a0:	5299      	strh	r1, [r3, r2]
 80029a2:	e01c      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2260      	movs	r2, #96	; 0x60
 80029a8:	217f      	movs	r1, #127	; 0x7f
 80029aa:	5299      	strh	r1, [r3, r2]
 80029ac:	e017      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	055b      	lsls	r3, r3, #21
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10d      	bne.n	80029d6 <UART_Start_Receive_IT+0xa2>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <UART_Start_Receive_IT+0x98>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2260      	movs	r2, #96	; 0x60
 80029c6:	217f      	movs	r1, #127	; 0x7f
 80029c8:	5299      	strh	r1, [r3, r2]
 80029ca:	e008      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2260      	movs	r2, #96	; 0x60
 80029d0:	213f      	movs	r1, #63	; 0x3f
 80029d2:	5299      	strh	r1, [r3, r2]
 80029d4:	e003      	b.n	80029de <UART_Start_Receive_IT+0xaa>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2260      	movs	r2, #96	; 0x60
 80029da:	2100      	movs	r1, #0
 80029dc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	228c      	movs	r2, #140	; 0x8c
 80029e2:	2100      	movs	r1, #0
 80029e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2288      	movs	r2, #136	; 0x88
 80029ea:	2122      	movs	r1, #34	; 0x22
 80029ec:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f8:	2301      	movs	r3, #1
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	059b      	lsls	r3, r3, #22
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d150      	bne.n	8002ace <UART_Start_Receive_IT+0x19a>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2268      	movs	r2, #104	; 0x68
 8002a30:	5a9b      	ldrh	r3, [r3, r2]
 8002a32:	1dba      	adds	r2, r7, #6
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d349      	bcc.n	8002ace <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	015b      	lsls	r3, r3, #5
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d107      	bne.n	8002a56 <UART_Start_Receive_IT+0x122>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <UART_Start_Receive_IT+0x208>)
 8002a52:	671a      	str	r2, [r3, #112]	; 0x70
 8002a54:	e002      	b.n	8002a5c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a39      	ldr	r2, [pc, #228]	; (8002b40 <UART_Start_Receive_IT+0x20c>)
 8002a5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a64:	f3ef 8310 	mrs	r3, PRIMASK
 8002a68:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a6a:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a6e:	2301      	movs	r3, #1
 8002a70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	0049      	lsls	r1, r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a98:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0549      	lsls	r1, r1, #21
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	e02e      	b.n	8002b2c <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d107      	bne.n	8002aea <UART_Start_Receive_IT+0x1b6>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <UART_Start_Receive_IT+0x210>)
 8002ae6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ae8:	e002      	b.n	8002af0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <UART_Start_Receive_IT+0x214>)
 8002aee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2280      	movs	r2, #128	; 0x80
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	613b      	str	r3, [r7, #16]
  return(result);
 8002afe:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2190      	movs	r1, #144	; 0x90
 8002b1a:	0049      	lsls	r1, r1, #1
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b014      	add	sp, #80	; 0x50
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	000001ff 	.word	0x000001ff
 8002b3c:	0800325d 	.word	0x0800325d
 8002b40:	08002f79 	.word	0x08002f79
 8002b44:	08002e0d 	.word	0x08002e0d
 8002b48:	08002ca1 	.word	0x08002ca1

08002b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	617b      	str	r3, [r7, #20]
  return(result);
 8002b5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4926      	ldr	r1, [pc, #152]	; (8002c10 <UART_EndRxTransfer+0xc4>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b86:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8a:	623b      	str	r3, [r7, #32]
  return(result);
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	491b      	ldr	r1, [pc, #108]	; (8002c14 <UART_EndRxTransfer+0xc8>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d118      	bne.n	8002bf2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bca:	2301      	movs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2110      	movs	r1, #16
 8002be2:	438a      	bics	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f383 8810 	msr	PRIMASK, r3
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2288      	movs	r2, #136	; 0x88
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b00e      	add	sp, #56	; 0x38
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	fffffedf 	.word	0xfffffedf
 8002c14:	effffffe 	.word	0xeffffffe

08002c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	225e      	movs	r2, #94	; 0x5e
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2256      	movs	r2, #86	; 0x56
 8002c32:	2100      	movs	r1, #0
 8002c34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff fa11 	bl	8002060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	438a      	bics	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2284      	movs	r2, #132	; 0x84
 8002c84:	2120      	movs	r1, #32
 8002c86:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff f9d5 	bl	8002040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b090      	sub	sp, #64	; 0x40
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ca8:	203e      	movs	r0, #62	; 0x3e
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	2160      	movs	r1, #96	; 0x60
 8002cb0:	5a52      	ldrh	r2, [r2, r1]
 8002cb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2288      	movs	r2, #136	; 0x88
 8002cb8:	589b      	ldr	r3, [r3, r2]
 8002cba:	2b22      	cmp	r3, #34	; 0x22
 8002cbc:	d000      	beq.n	8002cc0 <UART_RxISR_8BIT+0x20>
 8002cbe:	e097      	b.n	8002df0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	213c      	movs	r1, #60	; 0x3c
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b2d9      	uxtb	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	400a      	ands	r2, r1
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	225e      	movs	r2, #94	; 0x5e
 8002cf0:	5a9b      	ldrh	r3, [r3, r2]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	225e      	movs	r2, #94	; 0x5e
 8002cfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	225e      	movs	r2, #94	; 0x5e
 8002d02:	5a9b      	ldrh	r3, [r3, r2]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <UART_RxISR_8BIT+0x6c>
 8002d0a:	e079      	b.n	8002e00 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d12:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4936      	ldr	r1, [pc, #216]	; (8002e08 <UART_RxISR_8BIT+0x168>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
 8002d48:	2301      	movs	r3, #1
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2288      	movs	r2, #136	; 0x88
 8002d74:	2120      	movs	r1, #32
 8002d76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d12f      	bne.n	8002de6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d92:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
 8002d96:	2301      	movs	r3, #1
 8002d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2110      	movs	r1, #16
 8002dae:	438a      	bics	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f383 8810 	msr	PRIMASK, r3
}
 8002dbc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d103      	bne.n	8002dd4 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	225c      	movs	r2, #92	; 0x5c
 8002dd8:	5a9a      	ldrh	r2, [r3, r2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff f946 	bl	8002070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002de4:	e00c      	b.n	8002e00 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff f931 	bl	8002050 <HAL_UART_RxCpltCallback>
}
 8002dee:	e007      	b.n	8002e00 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2108      	movs	r1, #8
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b010      	add	sp, #64	; 0x40
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	fffffedf 	.word	0xfffffedf

08002e0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b090      	sub	sp, #64	; 0x40
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e14:	203e      	movs	r0, #62	; 0x3e
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	2160      	movs	r1, #96	; 0x60
 8002e1c:	5a52      	ldrh	r2, [r2, r1]
 8002e1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2288      	movs	r2, #136	; 0x88
 8002e24:	589b      	ldr	r3, [r3, r2]
 8002e26:	2b22      	cmp	r3, #34	; 0x22
 8002e28:	d000      	beq.n	8002e2c <UART_RxISR_16BIT+0x20>
 8002e2a:	e097      	b.n	8002f5c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e32:	213c      	movs	r1, #60	; 0x3c
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	183a      	adds	r2, r7, r0
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	225e      	movs	r2, #94	; 0x5e
 8002e5c:	5a9b      	ldrh	r3, [r3, r2]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b299      	uxth	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	225e      	movs	r2, #94	; 0x5e
 8002e68:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	225e      	movs	r2, #94	; 0x5e
 8002e6e:	5a9b      	ldrh	r3, [r3, r2]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <UART_RxISR_16BIT+0x6c>
 8002e76:	e079      	b.n	8002f6c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e78:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8002e7e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4936      	ldr	r1, [pc, #216]	; (8002f74 <UART_RxISR_16BIT+0x168>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002eae:	623b      	str	r3, [r7, #32]
  return(result);
 8002eb0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	438a      	bics	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2288      	movs	r2, #136	; 0x88
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12f      	bne.n	8002f52 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8002efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002efe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f02:	2301      	movs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2110      	movs	r1, #16
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f383 8810 	msr	PRIMASK, r3
}
 8002f28:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2210      	movs	r2, #16
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d103      	bne.n	8002f40 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	225c      	movs	r2, #92	; 0x5c
 8002f44:	5a9a      	ldrh	r2, [r3, r2]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7ff f890 	bl	8002070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f50:	e00c      	b.n	8002f6c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff f87b 	bl	8002050 <HAL_UART_RxCpltCallback>
}
 8002f5a:	e007      	b.n	8002f6c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2108      	movs	r1, #8
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b010      	add	sp, #64	; 0x40
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	fffffedf 	.word	0xfffffedf

08002f78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b09c      	sub	sp, #112	; 0x70
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8002f80:	236a      	movs	r3, #106	; 0x6a
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	2160      	movs	r1, #96	; 0x60
 8002f88:	5a52      	ldrh	r2, [r2, r1]
 8002f8a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2288      	movs	r2, #136	; 0x88
 8002fa8:	589b      	ldr	r3, [r3, r2]
 8002faa:	2b22      	cmp	r3, #34	; 0x22
 8002fac:	d000      	beq.n	8002fb0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8002fae:	e141      	b.n	8003234 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002fb0:	235e      	movs	r3, #94	; 0x5e
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	2168      	movs	r1, #104	; 0x68
 8002fb8:	5a52      	ldrh	r2, [r2, r1]
 8002fba:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002fbc:	e0e8      	b.n	8003190 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc4:	215c      	movs	r1, #92	; 0x5c
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	236a      	movs	r3, #106	; 0x6a
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b2d9      	uxtb	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	400a      	ands	r2, r1
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	225e      	movs	r2, #94	; 0x5e
 8002ff0:	5a9b      	ldrh	r3, [r3, r2]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b299      	uxth	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	225e      	movs	r2, #94	; 0x5e
 8002ffc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	2207      	movs	r2, #7
 800300a:	4013      	ands	r3, r2
 800300c:	d049      	beq.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d010      	beq.n	8003038 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003016:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4013      	ands	r3, r2
 800301e:	d00b      	beq.n	8003038 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	228c      	movs	r2, #140	; 0x8c
 800302c:	589b      	ldr	r3, [r3, r2]
 800302e:	2201      	movs	r2, #1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	218c      	movs	r1, #140	; 0x8c
 8003036:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d00f      	beq.n	8003060 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d00b      	beq.n	8003060 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	228c      	movs	r2, #140	; 0x8c
 8003054:	589b      	ldr	r3, [r3, r2]
 8003056:	2204      	movs	r2, #4
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	218c      	movs	r1, #140	; 0x8c
 800305e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003062:	2204      	movs	r2, #4
 8003064:	4013      	ands	r3, r2
 8003066:	d00f      	beq.n	8003088 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d00b      	beq.n	8003088 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2204      	movs	r2, #4
 8003076:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	228c      	movs	r2, #140	; 0x8c
 800307c:	589b      	ldr	r3, [r3, r2]
 800307e:	2202      	movs	r2, #2
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	218c      	movs	r1, #140	; 0x8c
 8003086:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	228c      	movs	r2, #140	; 0x8c
 800308c:	589b      	ldr	r3, [r3, r2]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f7fe ffe3 	bl	8002060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	228c      	movs	r2, #140	; 0x8c
 800309e:	2100      	movs	r1, #0
 80030a0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	225e      	movs	r2, #94	; 0x5e
 80030a6:	5a9b      	ldrh	r3, [r3, r2]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d170      	bne.n	8003190 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ae:	f3ef 8310 	mrs	r3, PRIMASK
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b8:	2301      	movs	r3, #1
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	f383 8810 	msr	PRIMASK, r3
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	495f      	ldr	r1, [pc, #380]	; (800324c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e0:	f3ef 8310 	mrs	r3, PRIMASK
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030e8:	657b      	str	r3, [r7, #84]	; 0x54
 80030ea:	2301      	movs	r3, #1
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4953      	ldr	r1, [pc, #332]	; (8003250 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8003102:	400a      	ands	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310c:	f383 8810 	msr	PRIMASK, r3
}
 8003110:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2288      	movs	r2, #136	; 0x88
 8003116:	2120      	movs	r1, #32
 8003118:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d12f      	bne.n	8003188 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	623b      	str	r3, [r7, #32]
  return(result);
 8003134:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
 8003138:	2301      	movs	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2110      	movs	r1, #16
 8003150:	438a      	bics	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2210      	movs	r2, #16
 8003168:	4013      	ands	r3, r2
 800316a:	2b10      	cmp	r3, #16
 800316c:	d103      	bne.n	8003176 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	225c      	movs	r2, #92	; 0x5c
 800317a:	5a9a      	ldrh	r2, [r3, r2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0011      	movs	r1, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f7fe ff75 	bl	8002070 <HAL_UARTEx_RxEventCallback>
 8003186:	e003      	b.n	8003190 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f7fe ff60 	bl	8002050 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003190:	235e      	movs	r3, #94	; 0x5e
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	2220      	movs	r2, #32
 800319e:	4013      	ands	r3, r2
 80031a0:	d000      	beq.n	80031a4 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80031a2:	e70c      	b.n	8002fbe <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80031a4:	204e      	movs	r0, #78	; 0x4e
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	215e      	movs	r1, #94	; 0x5e
 80031ac:	5a52      	ldrh	r2, [r2, r1]
 80031ae:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80031b0:	0001      	movs	r1, r0
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d044      	beq.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2268      	movs	r2, #104	; 0x68
 80031be:	5a9b      	ldrh	r3, [r3, r2]
 80031c0:	187a      	adds	r2, r7, r1
 80031c2:	8812      	ldrh	r2, [r2, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d23d      	bcs.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c8:	f3ef 8310 	mrs	r3, PRIMASK
 80031cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031ce:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d2:	2301      	movs	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	491a      	ldr	r1, [pc, #104]	; (8003254 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80031fe:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003200:	f3ef 8310 	mrs	r3, PRIMASK
 8003204:	617b      	str	r3, [r7, #20]
  return(result);
 8003206:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2120      	movs	r1, #32
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003232:	e007      	b.n	8003244 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2108      	movs	r1, #8
 8003240:	430a      	orrs	r2, r1
 8003242:	619a      	str	r2, [r3, #24]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b01c      	add	sp, #112	; 0x70
 800324a:	bd80      	pop	{r7, pc}
 800324c:	fffffeff 	.word	0xfffffeff
 8003250:	effffffe 	.word	0xeffffffe
 8003254:	efffffff 	.word	0xefffffff
 8003258:	08002ca1 	.word	0x08002ca1

0800325c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b09e      	sub	sp, #120	; 0x78
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003264:	2372      	movs	r3, #114	; 0x72
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	2160      	movs	r1, #96	; 0x60
 800326c:	5a52      	ldrh	r2, [r2, r1]
 800326e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2288      	movs	r2, #136	; 0x88
 800328c:	589b      	ldr	r3, [r3, r2]
 800328e:	2b22      	cmp	r3, #34	; 0x22
 8003290:	d000      	beq.n	8003294 <UART_RxISR_16BIT_FIFOEN+0x38>
 8003292:	e141      	b.n	8003518 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003294:	2366      	movs	r3, #102	; 0x66
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	2168      	movs	r1, #104	; 0x68
 800329c:	5a52      	ldrh	r2, [r2, r1]
 800329e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80032a0:	e0e8      	b.n	8003474 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	2164      	movs	r1, #100	; 0x64
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	2272      	movs	r2, #114	; 0x72
 80032b8:	18ba      	adds	r2, r7, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	8812      	ldrh	r2, [r2, #0]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	1c9a      	adds	r2, r3, #2
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	225e      	movs	r2, #94	; 0x5e
 80032d4:	5a9b      	ldrh	r3, [r3, r2]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b299      	uxth	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	225e      	movs	r2, #94	; 0x5e
 80032e0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80032ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ec:	2207      	movs	r2, #7
 80032ee:	4013      	ands	r3, r2
 80032f0:	d049      	beq.n	8003386 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f4:	2201      	movs	r2, #1
 80032f6:	4013      	ands	r3, r2
 80032f8:	d010      	beq.n	800331c <UART_RxISR_16BIT_FIFOEN+0xc0>
 80032fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d00b      	beq.n	800331c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	228c      	movs	r2, #140	; 0x8c
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	2201      	movs	r2, #1
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	218c      	movs	r1, #140	; 0x8c
 800331a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800331c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331e:	2202      	movs	r2, #2
 8003320:	4013      	ands	r3, r2
 8003322:	d00f      	beq.n	8003344 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	d00b      	beq.n	8003344 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2202      	movs	r2, #2
 8003332:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	228c      	movs	r2, #140	; 0x8c
 8003338:	589b      	ldr	r3, [r3, r2]
 800333a:	2204      	movs	r2, #4
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	218c      	movs	r1, #140	; 0x8c
 8003342:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003346:	2204      	movs	r2, #4
 8003348:	4013      	ands	r3, r2
 800334a:	d00f      	beq.n	800336c <UART_RxISR_16BIT_FIFOEN+0x110>
 800334c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d00b      	beq.n	800336c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2204      	movs	r2, #4
 800335a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	228c      	movs	r2, #140	; 0x8c
 8003360:	589b      	ldr	r3, [r3, r2]
 8003362:	2202      	movs	r2, #2
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	218c      	movs	r1, #140	; 0x8c
 800336a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	228c      	movs	r2, #140	; 0x8c
 8003370:	589b      	ldr	r3, [r3, r2]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe fe71 	bl	8002060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	228c      	movs	r2, #140	; 0x8c
 8003382:	2100      	movs	r1, #0
 8003384:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	225e      	movs	r2, #94	; 0x5e
 800338a:	5a9b      	ldrh	r3, [r3, r2]
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d170      	bne.n	8003474 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800339c:	2301      	movs	r3, #1
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	495f      	ldr	r1, [pc, #380]	; (8003530 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ce:	2301      	movs	r3, #1
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4953      	ldr	r1, [pc, #332]	; (8003534 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2288      	movs	r2, #136	; 0x88
 80033fa:	2120      	movs	r1, #32
 80033fc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d12f      	bne.n	800346c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003412:	f3ef 8310 	mrs	r3, PRIMASK
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
 800341c:	2301      	movs	r3, #1
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2110      	movs	r1, #16
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	2210      	movs	r2, #16
 800344c:	4013      	ands	r3, r2
 800344e:	2b10      	cmp	r3, #16
 8003450:	d103      	bne.n	800345a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	225c      	movs	r2, #92	; 0x5c
 800345e:	5a9a      	ldrh	r2, [r3, r2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f7fe fe03 	bl	8002070 <HAL_UARTEx_RxEventCallback>
 800346a:	e003      	b.n	8003474 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f7fe fdee 	bl	8002050 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003474:	2366      	movs	r3, #102	; 0x66
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d004      	beq.n	8003488 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800347e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003480:	2220      	movs	r2, #32
 8003482:	4013      	ands	r3, r2
 8003484:	d000      	beq.n	8003488 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8003486:	e70c      	b.n	80032a2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003488:	2052      	movs	r0, #82	; 0x52
 800348a:	183b      	adds	r3, r7, r0
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	215e      	movs	r1, #94	; 0x5e
 8003490:	5a52      	ldrh	r2, [r2, r1]
 8003492:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003494:	0001      	movs	r1, r0
 8003496:	187b      	adds	r3, r7, r1
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2268      	movs	r2, #104	; 0x68
 80034a2:	5a9b      	ldrh	r3, [r3, r2]
 80034a4:	187a      	adds	r2, r7, r1
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d23d      	bcs.n	8003528 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ac:	f3ef 8310 	mrs	r3, PRIMASK
 80034b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80034b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b6:	2301      	movs	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	491a      	ldr	r1, [pc, #104]	; (8003538 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f383 8810 	msr	PRIMASK, r3
}
 80034dc:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a16      	ldr	r2, [pc, #88]	; (800353c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80034e2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ea:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2120      	movs	r1, #32
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003516:	e007      	b.n	8003528 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2108      	movs	r1, #8
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b01e      	add	sp, #120	; 0x78
 800352e:	bd80      	pop	{r7, pc}
 8003530:	fffffeff 	.word	0xfffffeff
 8003534:	effffffe 	.word	0xeffffffe
 8003538:	efffffff 	.word	0xefffffff
 800353c:	08002e0d 	.word	0x08002e0d

08003540 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b002      	add	sp, #8
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <__libc_init_array>:
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	2600      	movs	r6, #0
 8003574:	4d0c      	ldr	r5, [pc, #48]	; (80035a8 <__libc_init_array+0x38>)
 8003576:	4c0d      	ldr	r4, [pc, #52]	; (80035ac <__libc_init_array+0x3c>)
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	42a6      	cmp	r6, r4
 800357e:	d109      	bne.n	8003594 <__libc_init_array+0x24>
 8003580:	2600      	movs	r6, #0
 8003582:	f000 f821 	bl	80035c8 <_init>
 8003586:	4d0a      	ldr	r5, [pc, #40]	; (80035b0 <__libc_init_array+0x40>)
 8003588:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <__libc_init_array+0x44>)
 800358a:	1b64      	subs	r4, r4, r5
 800358c:	10a4      	asrs	r4, r4, #2
 800358e:	42a6      	cmp	r6, r4
 8003590:	d105      	bne.n	800359e <__libc_init_array+0x2e>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	00b3      	lsls	r3, r6, #2
 8003596:	58eb      	ldr	r3, [r5, r3]
 8003598:	4798      	blx	r3
 800359a:	3601      	adds	r6, #1
 800359c:	e7ee      	b.n	800357c <__libc_init_array+0xc>
 800359e:	00b3      	lsls	r3, r6, #2
 80035a0:	58eb      	ldr	r3, [r5, r3]
 80035a2:	4798      	blx	r3
 80035a4:	3601      	adds	r6, #1
 80035a6:	e7f2      	b.n	800358e <__libc_init_array+0x1e>
 80035a8:	08003660 	.word	0x08003660
 80035ac:	08003660 	.word	0x08003660
 80035b0:	08003660 	.word	0x08003660
 80035b4:	08003664 	.word	0x08003664

080035b8 <memset>:
 80035b8:	0003      	movs	r3, r0
 80035ba:	1882      	adds	r2, r0, r2
 80035bc:	4293      	cmp	r3, r2
 80035be:	d100      	bne.n	80035c2 <memset+0xa>
 80035c0:	4770      	bx	lr
 80035c2:	7019      	strb	r1, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	e7f9      	b.n	80035bc <memset+0x4>

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
